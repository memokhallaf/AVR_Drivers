
ICU_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002446  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002446  000024da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800068  00800068  000024e2  2**0
                  ALLOC
  3 .stab         00001cd4  00000000  00000000  000024e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cf8  00000000  00000000  000041b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000519f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000071e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000082e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009268  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000093e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000096aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009f38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 32 11 	jmp	0x2264	; 0x2264 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a1 37       	cpi	r26, 0x71	; 113
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e4       	ldi	r30, 0x46	; 70
      78:	f4 e2       	ldi	r31, 0x24	; 36
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 65 11 	call	0x22ca	; 0x22ca <main>
      8a:	0c 94 21 12 	jmp	0x2442	; 0x2442 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 06 12 	jmp	0x240c	; 0x240c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 06 12 	jmp	0x240c	; 0x240c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 16 12 	jmp	0x242c	; 0x242c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <hlcd_sendData>:
/************************************************************************************************/
/*                                    Functions' definitions                                    */
/************************************************************************************************/

static void hlcd_sendData(u8_t au8_data)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	69 97       	sbiw	r28, 0x19	; 25
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 8f       	std	Y+25, r24	; 0x19
	/*SETTING RS PIN TO HIGH FOR SENDING DATA*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_RS_PIN, HIGH);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	/*SETTING RW PIN TO LOW FOR WRITING DATA*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_RW_PIN, LOW);
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	62 e0       	ldi	r22, 0x02	; 2
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	/*PASSING DATA OVER DATA PINS*/
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D0_PIN, GET_BIT(au8_data, 0));
     cc8:	89 8d       	ldd	r24, Y+25	; 0x19
     cca:	98 2f       	mov	r25, r24
     ccc:	91 70       	andi	r25, 0x01	; 1
     cce:	83 e0       	ldi	r24, 0x03	; 3
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	49 2f       	mov	r20, r25
     cd4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D1_PIN, GET_BIT(au8_data, 1));
     cd8:	89 8d       	ldd	r24, Y+25	; 0x19
     cda:	86 95       	lsr	r24
     cdc:	98 2f       	mov	r25, r24
     cde:	91 70       	andi	r25, 0x01	; 1
     ce0:	83 e0       	ldi	r24, 0x03	; 3
     ce2:	62 e0       	ldi	r22, 0x02	; 2
     ce4:	49 2f       	mov	r20, r25
     ce6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D2_PIN, GET_BIT(au8_data, 2));
     cea:	89 8d       	ldd	r24, Y+25	; 0x19
     cec:	86 95       	lsr	r24
     cee:	86 95       	lsr	r24
     cf0:	98 2f       	mov	r25, r24
     cf2:	91 70       	andi	r25, 0x01	; 1
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	64 e0       	ldi	r22, 0x04	; 4
     cf8:	49 2f       	mov	r20, r25
     cfa:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D3_PIN, GET_BIT(au8_data, 3));
     cfe:	89 8d       	ldd	r24, Y+25	; 0x19
     d00:	86 95       	lsr	r24
     d02:	86 95       	lsr	r24
     d04:	86 95       	lsr	r24
     d06:	98 2f       	mov	r25, r24
     d08:	91 70       	andi	r25, 0x01	; 1
     d0a:	83 e0       	ldi	r24, 0x03	; 3
     d0c:	68 e0       	ldi	r22, 0x08	; 8
     d0e:	49 2f       	mov	r20, r25
     d10:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D4_PIN, GET_BIT(au8_data, 4));
     d14:	89 8d       	ldd	r24, Y+25	; 0x19
     d16:	82 95       	swap	r24
     d18:	8f 70       	andi	r24, 0x0F	; 15
     d1a:	98 2f       	mov	r25, r24
     d1c:	91 70       	andi	r25, 0x01	; 1
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	60 e1       	ldi	r22, 0x10	; 16
     d22:	49 2f       	mov	r20, r25
     d24:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D5_PIN, GET_BIT(au8_data, 5));
     d28:	89 8d       	ldd	r24, Y+25	; 0x19
     d2a:	82 95       	swap	r24
     d2c:	86 95       	lsr	r24
     d2e:	87 70       	andi	r24, 0x07	; 7
     d30:	98 2f       	mov	r25, r24
     d32:	91 70       	andi	r25, 0x01	; 1
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	60 e2       	ldi	r22, 0x20	; 32
     d38:	49 2f       	mov	r20, r25
     d3a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D6_PIN, GET_BIT(au8_data, 6));
     d3e:	89 8d       	ldd	r24, Y+25	; 0x19
     d40:	82 95       	swap	r24
     d42:	86 95       	lsr	r24
     d44:	86 95       	lsr	r24
     d46:	83 70       	andi	r24, 0x03	; 3
     d48:	98 2f       	mov	r25, r24
     d4a:	91 70       	andi	r25, 0x01	; 1
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	60 e4       	ldi	r22, 0x40	; 64
     d50:	49 2f       	mov	r20, r25
     d52:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D7_PIN, GET_BIT(au8_data, 7));
     d56:	89 8d       	ldd	r24, Y+25	; 0x19
     d58:	98 2f       	mov	r25, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	60 e8       	ldi	r22, 0x80	; 128
     d64:	49 2f       	mov	r20, r25
     d66:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	/*TRIGGERING DATA BY ENABLE SIGNAL*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_EN_PIN, LOW);
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	64 e0       	ldi	r22, 0x04	; 4
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a8 e4       	ldi	r26, 0x48	; 72
     d7a:	b2 e4       	ldi	r27, 0x42	; 66
     d7c:	8d 8b       	std	Y+21, r24	; 0x15
     d7e:	9e 8b       	std	Y+22, r25	; 0x16
     d80:	af 8b       	std	Y+23, r26	; 0x17
     d82:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d84:	6d 89       	ldd	r22, Y+21	; 0x15
     d86:	7e 89       	ldd	r23, Y+22	; 0x16
     d88:	8f 89       	ldd	r24, Y+23	; 0x17
     d8a:	98 8d       	ldd	r25, Y+24	; 0x18
     d8c:	2b ea       	ldi	r18, 0xAB	; 171
     d8e:	3a ea       	ldi	r19, 0xAA	; 170
     d90:	4a e2       	ldi	r20, 0x2A	; 42
     d92:	50 e4       	ldi	r21, 0x40	; 64
     d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	89 8b       	std	Y+17, r24	; 0x11
     d9e:	9a 8b       	std	Y+18, r25	; 0x12
     da0:	ab 8b       	std	Y+19, r26	; 0x13
     da2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     da4:	69 89       	ldd	r22, Y+17	; 0x11
     da6:	7a 89       	ldd	r23, Y+18	; 0x12
     da8:	8b 89       	ldd	r24, Y+19	; 0x13
     daa:	9c 89       	ldd	r25, Y+20	; 0x14
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e8       	ldi	r20, 0x80	; 128
     db2:	5f e3       	ldi	r21, 0x3F	; 63
     db4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     db8:	88 23       	and	r24, r24
     dba:	1c f4       	brge	.+6      	; 0xdc2 <hlcd_sendData+0x124>
		__ticks = 1;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	88 8b       	std	Y+16, r24	; 0x10
     dc0:	91 c0       	rjmp	.+290    	; 0xee4 <hlcd_sendData+0x246>
	else if (__tmp > 255)
     dc2:	69 89       	ldd	r22, Y+17	; 0x11
     dc4:	7a 89       	ldd	r23, Y+18	; 0x12
     dc6:	8b 89       	ldd	r24, Y+19	; 0x13
     dc8:	9c 89       	ldd	r25, Y+20	; 0x14
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	4f e7       	ldi	r20, 0x7F	; 127
     dd0:	53 e4       	ldi	r21, 0x43	; 67
     dd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     dd6:	18 16       	cp	r1, r24
     dd8:	0c f0       	brlt	.+2      	; 0xddc <hlcd_sendData+0x13e>
     dda:	7b c0       	rjmp	.+246    	; 0xed2 <hlcd_sendData+0x234>
	{
		_delay_ms(__us / 1000.0);
     ddc:	6d 89       	ldd	r22, Y+21	; 0x15
     dde:	7e 89       	ldd	r23, Y+22	; 0x16
     de0:	8f 89       	ldd	r24, Y+23	; 0x17
     de2:	98 8d       	ldd	r25, Y+24	; 0x18
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	4a e7       	ldi	r20, 0x7A	; 122
     dea:	54 e4       	ldi	r21, 0x44	; 68
     dec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	8c 87       	std	Y+12, r24	; 0x0c
     df6:	9d 87       	std	Y+13, r25	; 0x0d
     df8:	ae 87       	std	Y+14, r26	; 0x0e
     dfa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfc:	6c 85       	ldd	r22, Y+12	; 0x0c
     dfe:	7d 85       	ldd	r23, Y+13	; 0x0d
     e00:	8e 85       	ldd	r24, Y+14	; 0x0e
     e02:	9f 85       	ldd	r25, Y+15	; 0x0f
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	4a ef       	ldi	r20, 0xFA	; 250
     e0a:	54 e4       	ldi	r21, 0x44	; 68
     e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	88 87       	std	Y+8, r24	; 0x08
     e16:	99 87       	std	Y+9, r25	; 0x09
     e18:	aa 87       	std	Y+10, r26	; 0x0a
     e1a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     e1c:	68 85       	ldd	r22, Y+8	; 0x08
     e1e:	79 85       	ldd	r23, Y+9	; 0x09
     e20:	8a 85       	ldd	r24, Y+10	; 0x0a
     e22:	9b 85       	ldd	r25, Y+11	; 0x0b
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e8       	ldi	r20, 0x80	; 128
     e2a:	5f e3       	ldi	r21, 0x3F	; 63
     e2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e30:	88 23       	and	r24, r24
     e32:	2c f4       	brge	.+10     	; 0xe3e <hlcd_sendData+0x1a0>
		__ticks = 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	9f 83       	std	Y+7, r25	; 0x07
     e3a:	8e 83       	std	Y+6, r24	; 0x06
     e3c:	3f c0       	rjmp	.+126    	; 0xebc <hlcd_sendData+0x21e>
	else if (__tmp > 65535)
     e3e:	68 85       	ldd	r22, Y+8	; 0x08
     e40:	79 85       	ldd	r23, Y+9	; 0x09
     e42:	8a 85       	ldd	r24, Y+10	; 0x0a
     e44:	9b 85       	ldd	r25, Y+11	; 0x0b
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	3f ef       	ldi	r19, 0xFF	; 255
     e4a:	4f e7       	ldi	r20, 0x7F	; 127
     e4c:	57 e4       	ldi	r21, 0x47	; 71
     e4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e52:	18 16       	cp	r1, r24
     e54:	4c f5       	brge	.+82     	; 0xea8 <hlcd_sendData+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e56:	6c 85       	ldd	r22, Y+12	; 0x0c
     e58:	7d 85       	ldd	r23, Y+13	; 0x0d
     e5a:	8e 85       	ldd	r24, Y+14	; 0x0e
     e5c:	9f 85       	ldd	r25, Y+15	; 0x0f
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e2       	ldi	r20, 0x20	; 32
     e64:	51 e4       	ldi	r21, 0x41	; 65
     e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	9f 83       	std	Y+7, r25	; 0x07
     e7c:	8e 83       	std	Y+6, r24	; 0x06
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <hlcd_sendData+0x200>
     e80:	88 ec       	ldi	r24, 0xC8	; 200
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9d 83       	std	Y+5, r25	; 0x05
     e86:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	9d 81       	ldd	r25, Y+5	; 0x05
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <hlcd_sendData+0x1ee>
     e90:	9d 83       	std	Y+5, r25	; 0x05
     e92:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e94:	8e 81       	ldd	r24, Y+6	; 0x06
     e96:	9f 81       	ldd	r25, Y+7	; 0x07
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	9f 83       	std	Y+7, r25	; 0x07
     e9c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ea0:	9f 81       	ldd	r25, Y+7	; 0x07
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	69 f7       	brne	.-38     	; 0xe80 <hlcd_sendData+0x1e2>
     ea6:	24 c0       	rjmp	.+72     	; 0xef0 <hlcd_sendData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea8:	68 85       	ldd	r22, Y+8	; 0x08
     eaa:	79 85       	ldd	r23, Y+9	; 0x09
     eac:	8a 85       	ldd	r24, Y+10	; 0x0a
     eae:	9b 85       	ldd	r25, Y+11	; 0x0b
     eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	9f 83       	std	Y+7, r25	; 0x07
     eba:	8e 83       	std	Y+6, r24	; 0x06
     ebc:	8e 81       	ldd	r24, Y+6	; 0x06
     ebe:	9f 81       	ldd	r25, Y+7	; 0x07
     ec0:	9b 83       	std	Y+3, r25	; 0x03
     ec2:	8a 83       	std	Y+2, r24	; 0x02
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	9b 81       	ldd	r25, Y+3	; 0x03
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <hlcd_sendData+0x22a>
     ecc:	9b 83       	std	Y+3, r25	; 0x03
     ece:	8a 83       	std	Y+2, r24	; 0x02
     ed0:	0f c0       	rjmp	.+30     	; 0xef0 <hlcd_sendData+0x252>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ed2:	69 89       	ldd	r22, Y+17	; 0x11
     ed4:	7a 89       	ldd	r23, Y+18	; 0x12
     ed6:	8b 89       	ldd	r24, Y+19	; 0x13
     ed8:	9c 89       	ldd	r25, Y+20	; 0x14
     eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	88 8b       	std	Y+16, r24	; 0x10
     ee4:	88 89       	ldd	r24, Y+16	; 0x10
     ee6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	8a 95       	dec	r24
     eec:	f1 f7       	brne	.-4      	; 0xeea <hlcd_sendData+0x24c>
     eee:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_EN_PIN, HIGH);
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	64 e0       	ldi	r22, 0x04	; 4
     ef4:	41 e0       	ldi	r20, 0x01	; 1
     ef6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	/*return from this function*/
	return;
}
     efa:	69 96       	adiw	r28, 0x19	; 25
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <hlcd_sendCmd>:

static void hlcd_sendCmd(u8_t au8_cmd)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	69 97       	sbiw	r28, 0x19	; 25
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	89 8f       	std	Y+25, r24	; 0x19
	/*SETTING RS PIN TO LOW FOR SENDING DATA*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_RS_PIN, LOW);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	/*SETTING RW PIN TO LOW FOR WRITING DATA/CMD*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_RW_PIN, LOW);
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	62 e0       	ldi	r22, 0x02	; 2
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	/*PASSING COMMEND OVER DATA PINS*/
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D0_PIN, GET_BIT(au8_cmd, 0));
     f36:	89 8d       	ldd	r24, Y+25	; 0x19
     f38:	98 2f       	mov	r25, r24
     f3a:	91 70       	andi	r25, 0x01	; 1
     f3c:	83 e0       	ldi	r24, 0x03	; 3
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	49 2f       	mov	r20, r25
     f42:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D1_PIN, GET_BIT(au8_cmd, 1));
     f46:	89 8d       	ldd	r24, Y+25	; 0x19
     f48:	86 95       	lsr	r24
     f4a:	98 2f       	mov	r25, r24
     f4c:	91 70       	andi	r25, 0x01	; 1
     f4e:	83 e0       	ldi	r24, 0x03	; 3
     f50:	62 e0       	ldi	r22, 0x02	; 2
     f52:	49 2f       	mov	r20, r25
     f54:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D2_PIN, GET_BIT(au8_cmd, 2));
     f58:	89 8d       	ldd	r24, Y+25	; 0x19
     f5a:	86 95       	lsr	r24
     f5c:	86 95       	lsr	r24
     f5e:	98 2f       	mov	r25, r24
     f60:	91 70       	andi	r25, 0x01	; 1
     f62:	83 e0       	ldi	r24, 0x03	; 3
     f64:	64 e0       	ldi	r22, 0x04	; 4
     f66:	49 2f       	mov	r20, r25
     f68:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D3_PIN, GET_BIT(au8_cmd, 3));
     f6c:	89 8d       	ldd	r24, Y+25	; 0x19
     f6e:	86 95       	lsr	r24
     f70:	86 95       	lsr	r24
     f72:	86 95       	lsr	r24
     f74:	98 2f       	mov	r25, r24
     f76:	91 70       	andi	r25, 0x01	; 1
     f78:	83 e0       	ldi	r24, 0x03	; 3
     f7a:	68 e0       	ldi	r22, 0x08	; 8
     f7c:	49 2f       	mov	r20, r25
     f7e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D4_PIN, GET_BIT(au8_cmd, 4));
     f82:	89 8d       	ldd	r24, Y+25	; 0x19
     f84:	82 95       	swap	r24
     f86:	8f 70       	andi	r24, 0x0F	; 15
     f88:	98 2f       	mov	r25, r24
     f8a:	91 70       	andi	r25, 0x01	; 1
     f8c:	83 e0       	ldi	r24, 0x03	; 3
     f8e:	60 e1       	ldi	r22, 0x10	; 16
     f90:	49 2f       	mov	r20, r25
     f92:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D5_PIN, GET_BIT(au8_cmd, 5));
     f96:	89 8d       	ldd	r24, Y+25	; 0x19
     f98:	82 95       	swap	r24
     f9a:	86 95       	lsr	r24
     f9c:	87 70       	andi	r24, 0x07	; 7
     f9e:	98 2f       	mov	r25, r24
     fa0:	91 70       	andi	r25, 0x01	; 1
     fa2:	83 e0       	ldi	r24, 0x03	; 3
     fa4:	60 e2       	ldi	r22, 0x20	; 32
     fa6:	49 2f       	mov	r20, r25
     fa8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D6_PIN, GET_BIT(au8_cmd, 6));
     fac:	89 8d       	ldd	r24, Y+25	; 0x19
     fae:	82 95       	swap	r24
     fb0:	86 95       	lsr	r24
     fb2:	86 95       	lsr	r24
     fb4:	83 70       	andi	r24, 0x03	; 3
     fb6:	98 2f       	mov	r25, r24
     fb8:	91 70       	andi	r25, 0x01	; 1
     fba:	83 e0       	ldi	r24, 0x03	; 3
     fbc:	60 e4       	ldi	r22, 0x40	; 64
     fbe:	49 2f       	mov	r20, r25
     fc0:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D7_PIN, GET_BIT(au8_cmd, 7));
     fc4:	89 8d       	ldd	r24, Y+25	; 0x19
     fc6:	98 2f       	mov	r25, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	99 27       	eor	r25, r25
     fcc:	99 1f       	adc	r25, r25
     fce:	83 e0       	ldi	r24, 0x03	; 3
     fd0:	60 e8       	ldi	r22, 0x80	; 128
     fd2:	49 2f       	mov	r20, r25
     fd4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
	/*TRIGGERING DATA BY ENABLE SIGNAL*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_EN_PIN, LOW);
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	64 e0       	ldi	r22, 0x04	; 4
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a8 e4       	ldi	r26, 0x48	; 72
     fe8:	b2 e4       	ldi	r27, 0x42	; 66
     fea:	8d 8b       	std	Y+21, r24	; 0x15
     fec:	9e 8b       	std	Y+22, r25	; 0x16
     fee:	af 8b       	std	Y+23, r26	; 0x17
     ff0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     ff2:	6d 89       	ldd	r22, Y+21	; 0x15
     ff4:	7e 89       	ldd	r23, Y+22	; 0x16
     ff6:	8f 89       	ldd	r24, Y+23	; 0x17
     ff8:	98 8d       	ldd	r25, Y+24	; 0x18
     ffa:	2b ea       	ldi	r18, 0xAB	; 171
     ffc:	3a ea       	ldi	r19, 0xAA	; 170
     ffe:	4a e2       	ldi	r20, 0x2A	; 42
    1000:	50 e4       	ldi	r21, 0x40	; 64
    1002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	89 8b       	std	Y+17, r24	; 0x11
    100c:	9a 8b       	std	Y+18, r25	; 0x12
    100e:	ab 8b       	std	Y+19, r26	; 0x13
    1010:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1012:	69 89       	ldd	r22, Y+17	; 0x11
    1014:	7a 89       	ldd	r23, Y+18	; 0x12
    1016:	8b 89       	ldd	r24, Y+19	; 0x13
    1018:	9c 89       	ldd	r25, Y+20	; 0x14
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e8       	ldi	r20, 0x80	; 128
    1020:	5f e3       	ldi	r21, 0x3F	; 63
    1022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1026:	88 23       	and	r24, r24
    1028:	1c f4       	brge	.+6      	; 0x1030 <hlcd_sendCmd+0x124>
		__ticks = 1;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	88 8b       	std	Y+16, r24	; 0x10
    102e:	91 c0       	rjmp	.+290    	; 0x1152 <hlcd_sendCmd+0x246>
	else if (__tmp > 255)
    1030:	69 89       	ldd	r22, Y+17	; 0x11
    1032:	7a 89       	ldd	r23, Y+18	; 0x12
    1034:	8b 89       	ldd	r24, Y+19	; 0x13
    1036:	9c 89       	ldd	r25, Y+20	; 0x14
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	4f e7       	ldi	r20, 0x7F	; 127
    103e:	53 e4       	ldi	r21, 0x43	; 67
    1040:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1044:	18 16       	cp	r1, r24
    1046:	0c f0       	brlt	.+2      	; 0x104a <hlcd_sendCmd+0x13e>
    1048:	7b c0       	rjmp	.+246    	; 0x1140 <hlcd_sendCmd+0x234>
	{
		_delay_ms(__us / 1000.0);
    104a:	6d 89       	ldd	r22, Y+21	; 0x15
    104c:	7e 89       	ldd	r23, Y+22	; 0x16
    104e:	8f 89       	ldd	r24, Y+23	; 0x17
    1050:	98 8d       	ldd	r25, Y+24	; 0x18
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	4a e7       	ldi	r20, 0x7A	; 122
    1058:	54 e4       	ldi	r21, 0x44	; 68
    105a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	8c 87       	std	Y+12, r24	; 0x0c
    1064:	9d 87       	std	Y+13, r25	; 0x0d
    1066:	ae 87       	std	Y+14, r26	; 0x0e
    1068:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106a:	6c 85       	ldd	r22, Y+12	; 0x0c
    106c:	7d 85       	ldd	r23, Y+13	; 0x0d
    106e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1070:	9f 85       	ldd	r25, Y+15	; 0x0f
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	4a ef       	ldi	r20, 0xFA	; 250
    1078:	54 e4       	ldi	r21, 0x44	; 68
    107a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	88 87       	std	Y+8, r24	; 0x08
    1084:	99 87       	std	Y+9, r25	; 0x09
    1086:	aa 87       	std	Y+10, r26	; 0x0a
    1088:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    108a:	68 85       	ldd	r22, Y+8	; 0x08
    108c:	79 85       	ldd	r23, Y+9	; 0x09
    108e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1090:	9b 85       	ldd	r25, Y+11	; 0x0b
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e8       	ldi	r20, 0x80	; 128
    1098:	5f e3       	ldi	r21, 0x3F	; 63
    109a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    109e:	88 23       	and	r24, r24
    10a0:	2c f4       	brge	.+10     	; 0x10ac <hlcd_sendCmd+0x1a0>
		__ticks = 1;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	9f 83       	std	Y+7, r25	; 0x07
    10a8:	8e 83       	std	Y+6, r24	; 0x06
    10aa:	3f c0       	rjmp	.+126    	; 0x112a <hlcd_sendCmd+0x21e>
	else if (__tmp > 65535)
    10ac:	68 85       	ldd	r22, Y+8	; 0x08
    10ae:	79 85       	ldd	r23, Y+9	; 0x09
    10b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    10b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	3f ef       	ldi	r19, 0xFF	; 255
    10b8:	4f e7       	ldi	r20, 0x7F	; 127
    10ba:	57 e4       	ldi	r21, 0x47	; 71
    10bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10c0:	18 16       	cp	r1, r24
    10c2:	4c f5       	brge	.+82     	; 0x1116 <hlcd_sendCmd+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c4:	6c 85       	ldd	r22, Y+12	; 0x0c
    10c6:	7d 85       	ldd	r23, Y+13	; 0x0d
    10c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    10ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e2       	ldi	r20, 0x20	; 32
    10d2:	51 e4       	ldi	r21, 0x41	; 65
    10d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	bc 01       	movw	r22, r24
    10de:	cd 01       	movw	r24, r26
    10e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	9f 83       	std	Y+7, r25	; 0x07
    10ea:	8e 83       	std	Y+6, r24	; 0x06
    10ec:	0f c0       	rjmp	.+30     	; 0x110c <hlcd_sendCmd+0x200>
    10ee:	88 ec       	ldi	r24, 0xC8	; 200
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	9d 83       	std	Y+5, r25	; 0x05
    10f4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	9d 81       	ldd	r25, Y+5	; 0x05
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <hlcd_sendCmd+0x1ee>
    10fe:	9d 83       	std	Y+5, r25	; 0x05
    1100:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1102:	8e 81       	ldd	r24, Y+6	; 0x06
    1104:	9f 81       	ldd	r25, Y+7	; 0x07
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	9f 83       	std	Y+7, r25	; 0x07
    110a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110c:	8e 81       	ldd	r24, Y+6	; 0x06
    110e:	9f 81       	ldd	r25, Y+7	; 0x07
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	69 f7       	brne	.-38     	; 0x10ee <hlcd_sendCmd+0x1e2>
    1114:	24 c0       	rjmp	.+72     	; 0x115e <hlcd_sendCmd+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1116:	68 85       	ldd	r22, Y+8	; 0x08
    1118:	79 85       	ldd	r23, Y+9	; 0x09
    111a:	8a 85       	ldd	r24, Y+10	; 0x0a
    111c:	9b 85       	ldd	r25, Y+11	; 0x0b
    111e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	9f 83       	std	Y+7, r25	; 0x07
    1128:	8e 83       	std	Y+6, r24	; 0x06
    112a:	8e 81       	ldd	r24, Y+6	; 0x06
    112c:	9f 81       	ldd	r25, Y+7	; 0x07
    112e:	9b 83       	std	Y+3, r25	; 0x03
    1130:	8a 83       	std	Y+2, r24	; 0x02
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	9b 81       	ldd	r25, Y+3	; 0x03
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <hlcd_sendCmd+0x22a>
    113a:	9b 83       	std	Y+3, r25	; 0x03
    113c:	8a 83       	std	Y+2, r24	; 0x02
    113e:	0f c0       	rjmp	.+30     	; 0x115e <hlcd_sendCmd+0x252>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1140:	69 89       	ldd	r22, Y+17	; 0x11
    1142:	7a 89       	ldd	r23, Y+18	; 0x12
    1144:	8b 89       	ldd	r24, Y+19	; 0x13
    1146:	9c 89       	ldd	r25, Y+20	; 0x14
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	88 8b       	std	Y+16, r24	; 0x10
    1152:	88 89       	ldd	r24, Y+16	; 0x10
    1154:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	8a 95       	dec	r24
    115a:	f1 f7       	brne	.-4      	; 0x1158 <hlcd_sendCmd+0x24c>
    115c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_EN_PIN, HIGH);
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	64 e0       	ldi	r22, 0x04	; 4
    1162:	41 e0       	ldi	r20, 0x01	; 1
    1164:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>

	/*return from this function*/
	return;
}
    1168:	69 96       	adiw	r28, 0x19	; 25
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <hlcd_init>:



void hlcd_init(void)
{
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	c6 54       	subi	r28, 0x46	; 70
    1188:	d0 40       	sbci	r29, 0x00	; 0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
	/*SETTING CONTROL PORT PINS TO OUTPUT*/
	mdio_setPinstatus(HLCD_CTRL_PORT, (HLCD_RS_PIN | HLCD_RW_PIN | HLCD_EN_PIN), OUTPUT);
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	67 e0       	ldi	r22, 0x07	; 7
    1198:	41 e0       	ldi	r20, 0x01	; 1
    119a:	0e 94 ef 0b 	call	0x17de	; 0x17de <mdio_setPinstatus>

	/*SETTING DATA PORT PINS TO OUTPUT*/
	mdio_setPinstatus(HLCD_DATA_PORT, (HLCD_D0_PIN | HLCD_D1_PIN | HLCD_D2_PIN | HLCD_D3_PIN |
    119e:	83 e0       	ldi	r24, 0x03	; 3
    11a0:	6f ef       	ldi	r22, 0xFF	; 255
    11a2:	41 e0       	ldi	r20, 0x01	; 1
    11a4:	0e 94 ef 0b 	call	0x17de	; 0x17de <mdio_setPinstatus>
										HLCD_D4_PIN | HLCD_D5_PIN | HLCD_D6_PIN | HLCD_D7_PIN), OUTPUT);
	/*SETTING EN PIN TO HIGH TO READ*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_EN_PIN, HIGH);
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	64 e0       	ldi	r22, 0x04	; 4
    11ac:	41 e0       	ldi	r20, 0x01	; 1
    11ae:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <mdio_setPinValue>
    11b2:	fe 01       	movw	r30, r28
    11b4:	ed 5b       	subi	r30, 0xBD	; 189
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	a8 e4       	ldi	r26, 0x48	; 72
    11be:	b2 e4       	ldi	r27, 0x42	; 66
    11c0:	80 83       	st	Z, r24
    11c2:	91 83       	std	Z+1, r25	; 0x01
    11c4:	a2 83       	std	Z+2, r26	; 0x02
    11c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c8:	8e 01       	movw	r16, r28
    11ca:	01 5c       	subi	r16, 0xC1	; 193
    11cc:	1f 4f       	sbci	r17, 0xFF	; 255
    11ce:	fe 01       	movw	r30, r28
    11d0:	ed 5b       	subi	r30, 0xBD	; 189
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	4a ef       	ldi	r20, 0xFA	; 250
    11e2:	54 e4       	ldi	r21, 0x44	; 68
    11e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	f8 01       	movw	r30, r16
    11ee:	80 83       	st	Z, r24
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	a2 83       	std	Z+2, r26	; 0x02
    11f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11f6:	fe 01       	movw	r30, r28
    11f8:	ff 96       	adiw	r30, 0x3f	; 63
    11fa:	60 81       	ld	r22, Z
    11fc:	71 81       	ldd	r23, Z+1	; 0x01
    11fe:	82 81       	ldd	r24, Z+2	; 0x02
    1200:	93 81       	ldd	r25, Z+3	; 0x03
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	40 e8       	ldi	r20, 0x80	; 128
    1208:	5f e3       	ldi	r21, 0x3F	; 63
    120a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    120e:	88 23       	and	r24, r24
    1210:	2c f4       	brge	.+10     	; 0x121c <hlcd_init+0xa2>
		__ticks = 1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	9e af       	std	Y+62, r25	; 0x3e
    1218:	8d af       	std	Y+61, r24	; 0x3d
    121a:	46 c0       	rjmp	.+140    	; 0x12a8 <hlcd_init+0x12e>
	else if (__tmp > 65535)
    121c:	fe 01       	movw	r30, r28
    121e:	ff 96       	adiw	r30, 0x3f	; 63
    1220:	60 81       	ld	r22, Z
    1222:	71 81       	ldd	r23, Z+1	; 0x01
    1224:	82 81       	ldd	r24, Z+2	; 0x02
    1226:	93 81       	ldd	r25, Z+3	; 0x03
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	3f ef       	ldi	r19, 0xFF	; 255
    122c:	4f e7       	ldi	r20, 0x7F	; 127
    122e:	57 e4       	ldi	r21, 0x47	; 71
    1230:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1234:	18 16       	cp	r1, r24
    1236:	64 f5       	brge	.+88     	; 0x1290 <hlcd_init+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1238:	fe 01       	movw	r30, r28
    123a:	ed 5b       	subi	r30, 0xBD	; 189
    123c:	ff 4f       	sbci	r31, 0xFF	; 255
    123e:	60 81       	ld	r22, Z
    1240:	71 81       	ldd	r23, Z+1	; 0x01
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e2       	ldi	r20, 0x20	; 32
    124c:	51 e4       	ldi	r21, 0x41	; 65
    124e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	bc 01       	movw	r22, r24
    1258:	cd 01       	movw	r24, r26
    125a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	9e af       	std	Y+62, r25	; 0x3e
    1264:	8d af       	std	Y+61, r24	; 0x3d
    1266:	0f c0       	rjmp	.+30     	; 0x1286 <hlcd_init+0x10c>
    1268:	88 ec       	ldi	r24, 0xC8	; 200
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	9c af       	std	Y+60, r25	; 0x3c
    126e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1270:	8b ad       	ldd	r24, Y+59	; 0x3b
    1272:	9c ad       	ldd	r25, Y+60	; 0x3c
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <hlcd_init+0xfa>
    1278:	9c af       	std	Y+60, r25	; 0x3c
    127a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127c:	8d ad       	ldd	r24, Y+61	; 0x3d
    127e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	9e af       	std	Y+62, r25	; 0x3e
    1284:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1286:	8d ad       	ldd	r24, Y+61	; 0x3d
    1288:	9e ad       	ldd	r25, Y+62	; 0x3e
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	69 f7       	brne	.-38     	; 0x1268 <hlcd_init+0xee>
    128e:	16 c0       	rjmp	.+44     	; 0x12bc <hlcd_init+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1290:	fe 01       	movw	r30, r28
    1292:	ff 96       	adiw	r30, 0x3f	; 63
    1294:	60 81       	ld	r22, Z
    1296:	71 81       	ldd	r23, Z+1	; 0x01
    1298:	82 81       	ldd	r24, Z+2	; 0x02
    129a:	93 81       	ldd	r25, Z+3	; 0x03
    129c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9e af       	std	Y+62, r25	; 0x3e
    12a6:	8d af       	std	Y+61, r24	; 0x3d
    12a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    12aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    12ac:	9a af       	std	Y+58, r25	; 0x3a
    12ae:	89 af       	std	Y+57, r24	; 0x39
    12b0:	89 ad       	ldd	r24, Y+57	; 0x39
    12b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <hlcd_init+0x13a>
    12b8:	9a af       	std	Y+58, r25	; 0x3a
    12ba:	89 af       	std	Y+57, r24	; 0x39
	/*waiting for vdd to reach 4.5v*/
	_delay_ms(50);
	/*SENDING FUN SET COMNEND*/
	hlcd_sendCmd(0x3C);
    12bc:	8c e3       	ldi	r24, 0x3C	; 60
    12be:	0e 94 86 07 	call	0xf0c	; 0xf0c <hlcd_sendCmd>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a0 e8       	ldi	r26, 0x80	; 128
    12c8:	bf e3       	ldi	r27, 0x3F	; 63
    12ca:	8d ab       	std	Y+53, r24	; 0x35
    12cc:	9e ab       	std	Y+54, r25	; 0x36
    12ce:	af ab       	std	Y+55, r26	; 0x37
    12d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d2:	6d a9       	ldd	r22, Y+53	; 0x35
    12d4:	7e a9       	ldd	r23, Y+54	; 0x36
    12d6:	8f a9       	ldd	r24, Y+55	; 0x37
    12d8:	98 ad       	ldd	r25, Y+56	; 0x38
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	4a ef       	ldi	r20, 0xFA	; 250
    12e0:	54 e4       	ldi	r21, 0x44	; 68
    12e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	89 ab       	std	Y+49, r24	; 0x31
    12ec:	9a ab       	std	Y+50, r25	; 0x32
    12ee:	ab ab       	std	Y+51, r26	; 0x33
    12f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12f2:	69 a9       	ldd	r22, Y+49	; 0x31
    12f4:	7a a9       	ldd	r23, Y+50	; 0x32
    12f6:	8b a9       	ldd	r24, Y+51	; 0x33
    12f8:	9c a9       	ldd	r25, Y+52	; 0x34
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e8       	ldi	r20, 0x80	; 128
    1300:	5f e3       	ldi	r21, 0x3F	; 63
    1302:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1306:	88 23       	and	r24, r24
    1308:	2c f4       	brge	.+10     	; 0x1314 <hlcd_init+0x19a>
		__ticks = 1;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	98 ab       	std	Y+48, r25	; 0x30
    1310:	8f a7       	std	Y+47, r24	; 0x2f
    1312:	3f c0       	rjmp	.+126    	; 0x1392 <hlcd_init+0x218>
	else if (__tmp > 65535)
    1314:	69 a9       	ldd	r22, Y+49	; 0x31
    1316:	7a a9       	ldd	r23, Y+50	; 0x32
    1318:	8b a9       	ldd	r24, Y+51	; 0x33
    131a:	9c a9       	ldd	r25, Y+52	; 0x34
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	3f ef       	ldi	r19, 0xFF	; 255
    1320:	4f e7       	ldi	r20, 0x7F	; 127
    1322:	57 e4       	ldi	r21, 0x47	; 71
    1324:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1328:	18 16       	cp	r1, r24
    132a:	4c f5       	brge	.+82     	; 0x137e <hlcd_init+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132c:	6d a9       	ldd	r22, Y+53	; 0x35
    132e:	7e a9       	ldd	r23, Y+54	; 0x36
    1330:	8f a9       	ldd	r24, Y+55	; 0x37
    1332:	98 ad       	ldd	r25, Y+56	; 0x38
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e2       	ldi	r20, 0x20	; 32
    133a:	51 e4       	ldi	r21, 0x41	; 65
    133c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	bc 01       	movw	r22, r24
    1346:	cd 01       	movw	r24, r26
    1348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	98 ab       	std	Y+48, r25	; 0x30
    1352:	8f a7       	std	Y+47, r24	; 0x2f
    1354:	0f c0       	rjmp	.+30     	; 0x1374 <hlcd_init+0x1fa>
    1356:	88 ec       	ldi	r24, 0xC8	; 200
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	9e a7       	std	Y+46, r25	; 0x2e
    135c:	8d a7       	std	Y+45, r24	; 0x2d
    135e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1360:	9e a5       	ldd	r25, Y+46	; 0x2e
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <hlcd_init+0x1e8>
    1366:	9e a7       	std	Y+46, r25	; 0x2e
    1368:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136a:	8f a5       	ldd	r24, Y+47	; 0x2f
    136c:	98 a9       	ldd	r25, Y+48	; 0x30
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	98 ab       	std	Y+48, r25	; 0x30
    1372:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1374:	8f a5       	ldd	r24, Y+47	; 0x2f
    1376:	98 a9       	ldd	r25, Y+48	; 0x30
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	69 f7       	brne	.-38     	; 0x1356 <hlcd_init+0x1dc>
    137c:	14 c0       	rjmp	.+40     	; 0x13a6 <hlcd_init+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137e:	69 a9       	ldd	r22, Y+49	; 0x31
    1380:	7a a9       	ldd	r23, Y+50	; 0x32
    1382:	8b a9       	ldd	r24, Y+51	; 0x33
    1384:	9c a9       	ldd	r25, Y+52	; 0x34
    1386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	98 ab       	std	Y+48, r25	; 0x30
    1390:	8f a7       	std	Y+47, r24	; 0x2f
    1392:	8f a5       	ldd	r24, Y+47	; 0x2f
    1394:	98 a9       	ldd	r25, Y+48	; 0x30
    1396:	9c a7       	std	Y+44, r25	; 0x2c
    1398:	8b a7       	std	Y+43, r24	; 0x2b
    139a:	8b a5       	ldd	r24, Y+43	; 0x2b
    139c:	9c a5       	ldd	r25, Y+44	; 0x2c
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <hlcd_init+0x224>
    13a2:	9c a7       	std	Y+44, r25	; 0x2c
    13a4:	8b a7       	std	Y+43, r24	; 0x2b
	/*DELAY FOR ONLY 1 ms*/
	_delay_ms(1);
	/*Sending display on/off command*/
	hlcd_sendCmd(0x0F);
    13a6:	8f e0       	ldi	r24, 0x0F	; 15
    13a8:	0e 94 86 07 	call	0xf0c	; 0xf0c <hlcd_sendCmd>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a0 e8       	ldi	r26, 0x80	; 128
    13b2:	bf e3       	ldi	r27, 0x3F	; 63
    13b4:	8f a3       	std	Y+39, r24	; 0x27
    13b6:	98 a7       	std	Y+40, r25	; 0x28
    13b8:	a9 a7       	std	Y+41, r26	; 0x29
    13ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13bc:	6f a1       	ldd	r22, Y+39	; 0x27
    13be:	78 a5       	ldd	r23, Y+40	; 0x28
    13c0:	89 a5       	ldd	r24, Y+41	; 0x29
    13c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	4a ef       	ldi	r20, 0xFA	; 250
    13ca:	54 e4       	ldi	r21, 0x44	; 68
    13cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	8b a3       	std	Y+35, r24	; 0x23
    13d6:	9c a3       	std	Y+36, r25	; 0x24
    13d8:	ad a3       	std	Y+37, r26	; 0x25
    13da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13dc:	6b a1       	ldd	r22, Y+35	; 0x23
    13de:	7c a1       	ldd	r23, Y+36	; 0x24
    13e0:	8d a1       	ldd	r24, Y+37	; 0x25
    13e2:	9e a1       	ldd	r25, Y+38	; 0x26
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e8       	ldi	r20, 0x80	; 128
    13ea:	5f e3       	ldi	r21, 0x3F	; 63
    13ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13f0:	88 23       	and	r24, r24
    13f2:	2c f4       	brge	.+10     	; 0x13fe <hlcd_init+0x284>
		__ticks = 1;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9a a3       	std	Y+34, r25	; 0x22
    13fa:	89 a3       	std	Y+33, r24	; 0x21
    13fc:	3f c0       	rjmp	.+126    	; 0x147c <hlcd_init+0x302>
	else if (__tmp > 65535)
    13fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1400:	7c a1       	ldd	r23, Y+36	; 0x24
    1402:	8d a1       	ldd	r24, Y+37	; 0x25
    1404:	9e a1       	ldd	r25, Y+38	; 0x26
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	3f ef       	ldi	r19, 0xFF	; 255
    140a:	4f e7       	ldi	r20, 0x7F	; 127
    140c:	57 e4       	ldi	r21, 0x47	; 71
    140e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1412:	18 16       	cp	r1, r24
    1414:	4c f5       	brge	.+82     	; 0x1468 <hlcd_init+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1416:	6f a1       	ldd	r22, Y+39	; 0x27
    1418:	78 a5       	ldd	r23, Y+40	; 0x28
    141a:	89 a5       	ldd	r24, Y+41	; 0x29
    141c:	9a a5       	ldd	r25, Y+42	; 0x2a
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e2       	ldi	r20, 0x20	; 32
    1424:	51 e4       	ldi	r21, 0x41	; 65
    1426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	bc 01       	movw	r22, r24
    1430:	cd 01       	movw	r24, r26
    1432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	9a a3       	std	Y+34, r25	; 0x22
    143c:	89 a3       	std	Y+33, r24	; 0x21
    143e:	0f c0       	rjmp	.+30     	; 0x145e <hlcd_init+0x2e4>
    1440:	88 ec       	ldi	r24, 0xC8	; 200
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	98 a3       	std	Y+32, r25	; 0x20
    1446:	8f 8f       	std	Y+31, r24	; 0x1f
    1448:	8f 8d       	ldd	r24, Y+31	; 0x1f
    144a:	98 a1       	ldd	r25, Y+32	; 0x20
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <hlcd_init+0x2d2>
    1450:	98 a3       	std	Y+32, r25	; 0x20
    1452:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1454:	89 a1       	ldd	r24, Y+33	; 0x21
    1456:	9a a1       	ldd	r25, Y+34	; 0x22
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	9a a3       	std	Y+34, r25	; 0x22
    145c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145e:	89 a1       	ldd	r24, Y+33	; 0x21
    1460:	9a a1       	ldd	r25, Y+34	; 0x22
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	69 f7       	brne	.-38     	; 0x1440 <hlcd_init+0x2c6>
    1466:	14 c0       	rjmp	.+40     	; 0x1490 <hlcd_init+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1468:	6b a1       	ldd	r22, Y+35	; 0x23
    146a:	7c a1       	ldd	r23, Y+36	; 0x24
    146c:	8d a1       	ldd	r24, Y+37	; 0x25
    146e:	9e a1       	ldd	r25, Y+38	; 0x26
    1470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	9a a3       	std	Y+34, r25	; 0x22
    147a:	89 a3       	std	Y+33, r24	; 0x21
    147c:	89 a1       	ldd	r24, Y+33	; 0x21
    147e:	9a a1       	ldd	r25, Y+34	; 0x22
    1480:	9e 8f       	std	Y+30, r25	; 0x1e
    1482:	8d 8f       	std	Y+29, r24	; 0x1d
    1484:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1486:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	f1 f7       	brne	.-4      	; 0x1488 <hlcd_init+0x30e>
    148c:	9e 8f       	std	Y+30, r25	; 0x1e
    148e:	8d 8f       	std	Y+29, r24	; 0x1d

	/*Delaying for 1ms*/
	_delay_ms(1);

	/*Sending display clear command*/
	hlcd_sendCmd(0x01);
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	0e 94 86 07 	call	0xf0c	; 0xf0c <hlcd_sendCmd>
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a0 e0       	ldi	r26, 0x00	; 0
    149c:	b0 e4       	ldi	r27, 0x40	; 64
    149e:	89 8f       	std	Y+25, r24	; 0x19
    14a0:	9a 8f       	std	Y+26, r25	; 0x1a
    14a2:	ab 8f       	std	Y+27, r26	; 0x1b
    14a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a6:	69 8d       	ldd	r22, Y+25	; 0x19
    14a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	4a ef       	ldi	r20, 0xFA	; 250
    14b4:	54 e4       	ldi	r21, 0x44	; 68
    14b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	8d 8b       	std	Y+21, r24	; 0x15
    14c0:	9e 8b       	std	Y+22, r25	; 0x16
    14c2:	af 8b       	std	Y+23, r26	; 0x17
    14c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14c6:	6d 89       	ldd	r22, Y+21	; 0x15
    14c8:	7e 89       	ldd	r23, Y+22	; 0x16
    14ca:	8f 89       	ldd	r24, Y+23	; 0x17
    14cc:	98 8d       	ldd	r25, Y+24	; 0x18
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e8       	ldi	r20, 0x80	; 128
    14d4:	5f e3       	ldi	r21, 0x3F	; 63
    14d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14da:	88 23       	and	r24, r24
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <hlcd_init+0x36e>
		__ticks = 1;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	9c 8b       	std	Y+20, r25	; 0x14
    14e4:	8b 8b       	std	Y+19, r24	; 0x13
    14e6:	3f c0       	rjmp	.+126    	; 0x1566 <hlcd_init+0x3ec>
	else if (__tmp > 65535)
    14e8:	6d 89       	ldd	r22, Y+21	; 0x15
    14ea:	7e 89       	ldd	r23, Y+22	; 0x16
    14ec:	8f 89       	ldd	r24, Y+23	; 0x17
    14ee:	98 8d       	ldd	r25, Y+24	; 0x18
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	3f ef       	ldi	r19, 0xFF	; 255
    14f4:	4f e7       	ldi	r20, 0x7F	; 127
    14f6:	57 e4       	ldi	r21, 0x47	; 71
    14f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14fc:	18 16       	cp	r1, r24
    14fe:	4c f5       	brge	.+82     	; 0x1552 <hlcd_init+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1500:	69 8d       	ldd	r22, Y+25	; 0x19
    1502:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1504:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1506:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e2       	ldi	r20, 0x20	; 32
    150e:	51 e4       	ldi	r21, 0x41	; 65
    1510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	bc 01       	movw	r22, r24
    151a:	cd 01       	movw	r24, r26
    151c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	9c 8b       	std	Y+20, r25	; 0x14
    1526:	8b 8b       	std	Y+19, r24	; 0x13
    1528:	0f c0       	rjmp	.+30     	; 0x1548 <hlcd_init+0x3ce>
    152a:	88 ec       	ldi	r24, 0xC8	; 200
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9a 8b       	std	Y+18, r25	; 0x12
    1530:	89 8b       	std	Y+17, r24	; 0x11
    1532:	89 89       	ldd	r24, Y+17	; 0x11
    1534:	9a 89       	ldd	r25, Y+18	; 0x12
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <hlcd_init+0x3bc>
    153a:	9a 8b       	std	Y+18, r25	; 0x12
    153c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153e:	8b 89       	ldd	r24, Y+19	; 0x13
    1540:	9c 89       	ldd	r25, Y+20	; 0x14
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	9c 8b       	std	Y+20, r25	; 0x14
    1546:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1548:	8b 89       	ldd	r24, Y+19	; 0x13
    154a:	9c 89       	ldd	r25, Y+20	; 0x14
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	69 f7       	brne	.-38     	; 0x152a <hlcd_init+0x3b0>
    1550:	14 c0       	rjmp	.+40     	; 0x157a <hlcd_init+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1552:	6d 89       	ldd	r22, Y+21	; 0x15
    1554:	7e 89       	ldd	r23, Y+22	; 0x16
    1556:	8f 89       	ldd	r24, Y+23	; 0x17
    1558:	98 8d       	ldd	r25, Y+24	; 0x18
    155a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9c 8b       	std	Y+20, r25	; 0x14
    1564:	8b 8b       	std	Y+19, r24	; 0x13
    1566:	8b 89       	ldd	r24, Y+19	; 0x13
    1568:	9c 89       	ldd	r25, Y+20	; 0x14
    156a:	98 8b       	std	Y+16, r25	; 0x10
    156c:	8f 87       	std	Y+15, r24	; 0x0f
    156e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1570:	98 89       	ldd	r25, Y+16	; 0x10
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <hlcd_init+0x3f8>
    1576:	98 8b       	std	Y+16, r25	; 0x10
    1578:	8f 87       	std	Y+15, r24	; 0x0f

	/*Delaying for 2ms*/
	_delay_ms(2);

	/*Sending entry mode set command*/
	hlcd_sendCmd(0x06);
    157a:	86 e0       	ldi	r24, 0x06	; 6
    157c:	0e 94 86 07 	call	0xf0c	; 0xf0c <hlcd_sendCmd>
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	a0 e8       	ldi	r26, 0x80	; 128
    1586:	bf e3       	ldi	r27, 0x3F	; 63
    1588:	8b 87       	std	Y+11, r24	; 0x0b
    158a:	9c 87       	std	Y+12, r25	; 0x0c
    158c:	ad 87       	std	Y+13, r26	; 0x0d
    158e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1590:	6b 85       	ldd	r22, Y+11	; 0x0b
    1592:	7c 85       	ldd	r23, Y+12	; 0x0c
    1594:	8d 85       	ldd	r24, Y+13	; 0x0d
    1596:	9e 85       	ldd	r25, Y+14	; 0x0e
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	4a ef       	ldi	r20, 0xFA	; 250
    159e:	54 e4       	ldi	r21, 0x44	; 68
    15a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	8f 83       	std	Y+7, r24	; 0x07
    15aa:	98 87       	std	Y+8, r25	; 0x08
    15ac:	a9 87       	std	Y+9, r26	; 0x09
    15ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15b0:	6f 81       	ldd	r22, Y+7	; 0x07
    15b2:	78 85       	ldd	r23, Y+8	; 0x08
    15b4:	89 85       	ldd	r24, Y+9	; 0x09
    15b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e8       	ldi	r20, 0x80	; 128
    15be:	5f e3       	ldi	r21, 0x3F	; 63
    15c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15c4:	88 23       	and	r24, r24
    15c6:	2c f4       	brge	.+10     	; 0x15d2 <hlcd_init+0x458>
		__ticks = 1;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	9e 83       	std	Y+6, r25	; 0x06
    15ce:	8d 83       	std	Y+5, r24	; 0x05
    15d0:	3f c0       	rjmp	.+126    	; 0x1650 <hlcd_init+0x4d6>
	else if (__tmp > 65535)
    15d2:	6f 81       	ldd	r22, Y+7	; 0x07
    15d4:	78 85       	ldd	r23, Y+8	; 0x08
    15d6:	89 85       	ldd	r24, Y+9	; 0x09
    15d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	3f ef       	ldi	r19, 0xFF	; 255
    15de:	4f e7       	ldi	r20, 0x7F	; 127
    15e0:	57 e4       	ldi	r21, 0x47	; 71
    15e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15e6:	18 16       	cp	r1, r24
    15e8:	4c f5       	brge	.+82     	; 0x163c <hlcd_init+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e2       	ldi	r20, 0x20	; 32
    15f8:	51 e4       	ldi	r21, 0x41	; 65
    15fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	bc 01       	movw	r22, r24
    1604:	cd 01       	movw	r24, r26
    1606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	9e 83       	std	Y+6, r25	; 0x06
    1610:	8d 83       	std	Y+5, r24	; 0x05
    1612:	0f c0       	rjmp	.+30     	; 0x1632 <hlcd_init+0x4b8>
    1614:	88 ec       	ldi	r24, 0xC8	; 200
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	9c 83       	std	Y+4, r25	; 0x04
    161a:	8b 83       	std	Y+3, r24	; 0x03
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	9c 81       	ldd	r25, Y+4	; 0x04
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <hlcd_init+0x4a6>
    1624:	9c 83       	std	Y+4, r25	; 0x04
    1626:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
    162a:	9e 81       	ldd	r25, Y+6	; 0x06
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	9e 83       	std	Y+6, r25	; 0x06
    1630:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	69 f7       	brne	.-38     	; 0x1614 <hlcd_init+0x49a>
    163a:	14 c0       	rjmp	.+40     	; 0x1664 <hlcd_init+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163c:	6f 81       	ldd	r22, Y+7	; 0x07
    163e:	78 85       	ldd	r23, Y+8	; 0x08
    1640:	89 85       	ldd	r24, Y+9	; 0x09
    1642:	9a 85       	ldd	r25, Y+10	; 0x0a
    1644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	9e 83       	std	Y+6, r25	; 0x06
    164e:	8d 83       	std	Y+5, r24	; 0x05
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	9e 81       	ldd	r25, Y+6	; 0x06
    1654:	9a 83       	std	Y+2, r25	; 0x02
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <hlcd_init+0x4e2>
    1660:	9a 83       	std	Y+2, r25	; 0x02
    1662:	89 83       	std	Y+1, r24	; 0x01

	/*Delaying for 1ms*/
	_delay_ms(1);
	/*return from this function*/
	return;
}
    1664:	ca 5b       	subi	r28, 0xBA	; 186
    1666:	df 4f       	sbci	r29, 0xFF	; 255
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	08 95       	ret

0000167c <hlcd_displayCharacter>:

void hlcd_displayCharacter(u8_t au8_charData)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	0f 92       	push	r0
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	89 83       	std	Y+1, r24	; 0x01
	/*Sending character data*/
		hlcd_sendData(au8_charData);
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
		while(au8_charData != 0)
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	88 23       	and	r24, r24
    1692:	e9 f7       	brne	.-6      	; 0x168e <hlcd_displayCharacter+0x12>
		{
			/*do nothing*/
		}
	/*return from this function*/
	return;
}
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <hlcd_displayString>:

void hlcd_displayString(u8_t* pu8_stringData)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <hlcd_displayString+0x6>
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	9a 83       	std	Y+2, r25	; 0x02
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	0a c0       	rjmp	.+20     	; 0x16c0 <hlcd_displayString+0x24>
	/*Looping over string characters*/
		while(*pu8_stringData != '\0')
		{
			/*Sending character data*/
			hlcd_sendData(*pu8_stringData);
    16ac:	e9 81       	ldd	r30, Y+1	; 0x01
    16ae:	fa 81       	ldd	r31, Y+2	; 0x02
    16b0:	80 81       	ld	r24, Z
    16b2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>

			/*Incrementing pointer address*/
			pu8_stringData++;
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ba:	01 96       	adiw	r24, 0x01	; 1
    16bc:	9a 83       	std	Y+2, r25	; 0x02
    16be:	89 83       	std	Y+1, r24	; 0x01
}

void hlcd_displayString(u8_t* pu8_stringData)
{
	/*Looping over string characters*/
		while(*pu8_stringData != '\0')
    16c0:	e9 81       	ldd	r30, Y+1	; 0x01
    16c2:	fa 81       	ldd	r31, Y+2	; 0x02
    16c4:	80 81       	ld	r24, Z
    16c6:	88 23       	and	r24, r24
    16c8:	89 f7       	brne	.-30     	; 0x16ac <hlcd_displayString+0x10>
			/*Incrementing pointer address*/
			pu8_stringData++;
		}
	/*return from this function*/
	return;
}
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <hlcd_setCursor>:

void hlcd_setCursor(u8_t  au8_row, u8_t  au8_col)
{
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	00 d0       	rcall	.+0      	; 0x16da <hlcd_setCursor+0x6>
    16da:	00 d0       	rcall	.+0      	; 0x16dc <hlcd_setCursor+0x8>
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	89 83       	std	Y+1, r24	; 0x01
    16e2:	6a 83       	std	Y+2, r22	; 0x02
	/*switching over LCD rows*/
	switch(au8_row)
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	3c 83       	std	Y+4, r19	; 0x04
    16ec:	2b 83       	std	Y+3, r18	; 0x03
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	9c 81       	ldd	r25, Y+4	; 0x04
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	31 f0       	breq	.+12     	; 0x1702 <hlcd_setCursor+0x2e>
    16f6:	2b 81       	ldd	r18, Y+3	; 0x03
    16f8:	3c 81       	ldd	r19, Y+4	; 0x04
    16fa:	21 30       	cpi	r18, 0x01	; 1
    16fc:	31 05       	cpc	r19, r1
    16fe:	31 f0       	breq	.+12     	; 0x170c <hlcd_setCursor+0x38>
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <hlcd_setCursor+0x40>
	{
	case ROW_0:
		hlcd_sendCmd(((0x80) | au8_col));
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	80 68       	ori	r24, 0x80	; 128
    1706:	0e 94 86 07 	call	0xf0c	; 0xf0c <hlcd_sendCmd>
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <hlcd_setCursor+0x40>
		break;
	case ROW_1:
		hlcd_sendCmd(((0xC0) | au8_col));
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	80 6c       	ori	r24, 0xC0	; 192
    1710:	0e 94 86 07 	call	0xf0c	; 0xf0c <hlcd_sendCmd>
	default:
		break;
	}
	/*return from this function*/
	return;
}
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <hlcd_creatCustomChar>:

 void hlcd_creatCustomChar(void)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
	/*setting CGRAM Address*/
	hlcd_sendCmd((0x40));
    172a:	80 e4       	ldi	r24, 0x40	; 64
    172c:	0e 94 86 07 	call	0xf0c	; 0xf0c <hlcd_sendCmd>
	/*Sending custom charachter to CGRAM*/
	hlcd_sendData((0x00));
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
	hlcd_sendData((0x0A));
    1736:	8a e0       	ldi	r24, 0x0A	; 10
    1738:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
	hlcd_sendData((0x1F));
    173c:	8f e1       	ldi	r24, 0x1F	; 31
    173e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
	hlcd_sendData((0x1F));
    1742:	8f e1       	ldi	r24, 0x1F	; 31
    1744:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
	hlcd_sendData((0x1F));
    1748:	8f e1       	ldi	r24, 0x1F	; 31
    174a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
	hlcd_sendData((0x07));
    174e:	87 e0       	ldi	r24, 0x07	; 7
    1750:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
	hlcd_sendData((0x04));
    1754:	84 e0       	ldi	r24, 0x04	; 4
    1756:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
	hlcd_sendData((0x00));
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
	/*setting DDRAM Address*/
	hlcd_sendCmd((0x80));
    1760:	80 e8       	ldi	r24, 0x80	; 128
    1762:	0e 94 86 07 	call	0xf0c	; 0xf0c <hlcd_sendCmd>

	/*return from this fun*/
	return;
}
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <hlcd_displayCustomChar>:

void hlcd_displayCustomChar(void)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	/*sending character data*/
	hlcd_sendData((0x00));
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
	/*return from this fun*/
	return;
}
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <hlcd_creatCustomChar1>:
void hlcd_creatCustomChar1(void)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
	/*setting CGRAM Address*/
		hlcd_sendCmd((0x48));
    1788:	88 e4       	ldi	r24, 0x48	; 72
    178a:	0e 94 86 07 	call	0xf0c	; 0xf0c <hlcd_sendCmd>
		/*Sending custom charachter to CGRAM*/
		hlcd_sendData((0x04));
    178e:	84 e0       	ldi	r24, 0x04	; 4
    1790:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
		hlcd_sendData((0x0E));
    1794:	8e e0       	ldi	r24, 0x0E	; 14
    1796:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
		hlcd_sendData((0x0E));
    179a:	8e e0       	ldi	r24, 0x0E	; 14
    179c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
		hlcd_sendData((0x0E));
    17a0:	8e e0       	ldi	r24, 0x0E	; 14
    17a2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
		hlcd_sendData((0x0E));
    17a6:	8e e0       	ldi	r24, 0x0E	; 14
    17a8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
		hlcd_sendData((0x1F));
    17ac:	8f e1       	ldi	r24, 0x1F	; 31
    17ae:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
		hlcd_sendData((0x04));
    17b2:	84 e0       	ldi	r24, 0x04	; 4
    17b4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
		hlcd_sendData((0x00));
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
		/*setting DDRAM Address*/
		hlcd_sendCmd((0xC0));
    17be:	80 ec       	ldi	r24, 0xC0	; 192
    17c0:	0e 94 86 07 	call	0xf0c	; 0xf0c <hlcd_sendCmd>
	/*return from this fun*/
	return;
}
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <hlcd_displayCustomChar1>:
void hlcd_displayCustomChar1(void)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
	/*sending character data*/
		hlcd_sendData((0x01));
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <hlcd_sendData>
	/*return from this fun*/
	return;
}
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <mdio_setPinstatus>:
#include "MDIO_interface.h"
/******************************************/
/*				FUNCTIONS DIFINITIONS		*/
/*******************************************/
void mdio_setPinstatus(u8_t au8_port, u8_t au8_pin, u8_t au8_status )
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	2d 97       	sbiw	r28, 0x0d	; 13
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	6a 83       	std	Y+2, r22	; 0x02
    17f6:	4b 83       	std	Y+3, r20	; 0x03
	/*switching over DIO port*/
	switch(au8_port)
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	3d 87       	std	Y+13, r19	; 0x0d
    1800:	2c 87       	std	Y+12, r18	; 0x0c
    1802:	8c 85       	ldd	r24, Y+12	; 0x0c
    1804:	9d 85       	ldd	r25, Y+13	; 0x0d
    1806:	82 30       	cpi	r24, 0x02	; 2
    1808:	91 05       	cpc	r25, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <mdio_setPinstatus+0x30>
    180c:	54 c0       	rjmp	.+168    	; 0x18b6 <mdio_setPinstatus+0xd8>
    180e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1810:	3d 85       	ldd	r19, Y+13	; 0x0d
    1812:	23 30       	cpi	r18, 0x03	; 3
    1814:	31 05       	cpc	r19, r1
    1816:	34 f4       	brge	.+12     	; 0x1824 <mdio_setPinstatus+0x46>
    1818:	8c 85       	ldd	r24, Y+12	; 0x0c
    181a:	9d 85       	ldd	r25, Y+13	; 0x0d
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	91 05       	cpc	r25, r1
    1820:	71 f0       	breq	.+28     	; 0x183e <mdio_setPinstatus+0x60>
    1822:	fb c0       	rjmp	.+502    	; 0x1a1a <mdio_setPinstatus+0x23c>
    1824:	2c 85       	ldd	r18, Y+12	; 0x0c
    1826:	3d 85       	ldd	r19, Y+13	; 0x0d
    1828:	23 30       	cpi	r18, 0x03	; 3
    182a:	31 05       	cpc	r19, r1
    182c:	09 f4       	brne	.+2      	; 0x1830 <mdio_setPinstatus+0x52>
    182e:	7f c0       	rjmp	.+254    	; 0x192e <mdio_setPinstatus+0x150>
    1830:	8c 85       	ldd	r24, Y+12	; 0x0c
    1832:	9d 85       	ldd	r25, Y+13	; 0x0d
    1834:	84 30       	cpi	r24, 0x04	; 4
    1836:	91 05       	cpc	r25, r1
    1838:	09 f4       	brne	.+2      	; 0x183c <mdio_setPinstatus+0x5e>
    183a:	b5 c0       	rjmp	.+362    	; 0x19a6 <mdio_setPinstatus+0x1c8>
    183c:	ee c0       	rjmp	.+476    	; 0x1a1a <mdio_setPinstatus+0x23c>
	{
	/*IN case of choosing port A*/
	case PORTA:
			/*switching over pin status*/
			switch(au8_status)
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	3b 87       	std	Y+11, r19	; 0x0b
    1846:	2a 87       	std	Y+10, r18	; 0x0a
    1848:	8a 85       	ldd	r24, Y+10	; 0x0a
    184a:	9b 85       	ldd	r25, Y+11	; 0x0b
    184c:	82 30       	cpi	r24, 0x02	; 2
    184e:	91 05       	cpc	r25, r1
    1850:	a1 f0       	breq	.+40     	; 0x187a <mdio_setPinstatus+0x9c>
    1852:	2a 85       	ldd	r18, Y+10	; 0x0a
    1854:	3b 85       	ldd	r19, Y+11	; 0x0b
    1856:	23 30       	cpi	r18, 0x03	; 3
    1858:	31 05       	cpc	r19, r1
    185a:	d1 f0       	breq	.+52     	; 0x1890 <mdio_setPinstatus+0xb2>
    185c:	8a 85       	ldd	r24, Y+10	; 0x0a
    185e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1860:	81 30       	cpi	r24, 0x01	; 1
    1862:	91 05       	cpc	r25, r1
    1864:	09 f0       	breq	.+2      	; 0x1868 <mdio_setPinstatus+0x8a>
    1866:	d9 c0       	rjmp	.+434    	; 0x1a1a <mdio_setPinstatus+0x23c>
			{
				/*In case of choosing output*/
				case OUTPUT:
					/*Setting specific DIO pins to output*/
					MDIO_DDRA |= au8_pin;
    1868:	aa e3       	ldi	r26, 0x3A	; 58
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	ea e3       	ldi	r30, 0x3A	; 58
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	90 81       	ld	r25, Z
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	89 2b       	or	r24, r25
    1876:	8c 93       	st	X, r24
    1878:	d0 c0       	rjmp	.+416    	; 0x1a1a <mdio_setPinstatus+0x23c>
					/*Break from this case*/
					break;
				/*In case of choosing input floating*/
				case INPUT_FLOAT:
					/*Setting specific DIO pins to input floating*/
					MDIO_DDRA &= ~au8_pin;
    187a:	aa e3       	ldi	r26, 0x3A	; 58
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	ea e3       	ldi	r30, 0x3A	; 58
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	98 2f       	mov	r25, r24
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	80 95       	com	r24
    188a:	89 23       	and	r24, r25
    188c:	8c 93       	st	X, r24
    188e:	c5 c0       	rjmp	.+394    	; 0x1a1a <mdio_setPinstatus+0x23c>
					/*Break from this case*/
					break;
				/*In case of choosing input pull-up*/
				case INPUT_PULLUP:
					/*Setting specific DIO pins to input floating*/
					MDIO_DDRA &= ~au8_pin;
    1890:	aa e3       	ldi	r26, 0x3A	; 58
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	ea e3       	ldi	r30, 0x3A	; 58
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	98 2f       	mov	r25, r24
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	80 95       	com	r24
    18a0:	89 23       	and	r24, r25
    18a2:	8c 93       	st	X, r24
					/*Activating specific DIO input pins pull-up resistor*/
					MDIO_PORTA |= au8_pin;
    18a4:	ab e3       	ldi	r26, 0x3B	; 59
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	eb e3       	ldi	r30, 0x3B	; 59
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	90 81       	ld	r25, Z
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	89 2b       	or	r24, r25
    18b2:	8c 93       	st	X, r24
    18b4:	b2 c0       	rjmp	.+356    	; 0x1a1a <mdio_setPinstatus+0x23c>
		break;

	/*IN case of choosing port B*/
	case PORTB:
		/*switching over pin status*/
		switch(au8_status)
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	39 87       	std	Y+9, r19	; 0x09
    18be:	28 87       	std	Y+8, r18	; 0x08
    18c0:	88 85       	ldd	r24, Y+8	; 0x08
    18c2:	99 85       	ldd	r25, Y+9	; 0x09
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	91 05       	cpc	r25, r1
    18c8:	a1 f0       	breq	.+40     	; 0x18f2 <mdio_setPinstatus+0x114>
    18ca:	28 85       	ldd	r18, Y+8	; 0x08
    18cc:	39 85       	ldd	r19, Y+9	; 0x09
    18ce:	23 30       	cpi	r18, 0x03	; 3
    18d0:	31 05       	cpc	r19, r1
    18d2:	d1 f0       	breq	.+52     	; 0x1908 <mdio_setPinstatus+0x12a>
    18d4:	88 85       	ldd	r24, Y+8	; 0x08
    18d6:	99 85       	ldd	r25, Y+9	; 0x09
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	91 05       	cpc	r25, r1
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <mdio_setPinstatus+0x102>
    18de:	9d c0       	rjmp	.+314    	; 0x1a1a <mdio_setPinstatus+0x23c>
		{
			/*In case of choosing output*/
			case OUTPUT:
				/*Setting specific DIO pins to output*/
				MDIO_DDRB |= au8_pin;
    18e0:	a7 e3       	ldi	r26, 0x37	; 55
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e7 e3       	ldi	r30, 0x37	; 55
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	90 81       	ld	r25, Z
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	89 2b       	or	r24, r25
    18ee:	8c 93       	st	X, r24
    18f0:	94 c0       	rjmp	.+296    	; 0x1a1a <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
			/*In case of choosing input floating*/
			case INPUT_FLOAT:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRB &= ~au8_pin;
    18f2:	a7 e3       	ldi	r26, 0x37	; 55
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e7 e3       	ldi	r30, 0x37	; 55
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	98 2f       	mov	r25, r24
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	80 95       	com	r24
    1902:	89 23       	and	r24, r25
    1904:	8c 93       	st	X, r24
    1906:	89 c0       	rjmp	.+274    	; 0x1a1a <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
			/*In case of choosing input pull-up*/
			case INPUT_PULLUP:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRB &= ~au8_pin;
    1908:	a7 e3       	ldi	r26, 0x37	; 55
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e7 e3       	ldi	r30, 0x37	; 55
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	98 2f       	mov	r25, r24
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	80 95       	com	r24
    1918:	89 23       	and	r24, r25
    191a:	8c 93       	st	X, r24
				/*Activating specific DIO input pins pull-up resistor*/
				MDIO_PORTB |= au8_pin;
    191c:	a8 e3       	ldi	r26, 0x38	; 56
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e8 e3       	ldi	r30, 0x38	; 56
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	90 81       	ld	r25, Z
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	89 2b       	or	r24, r25
    192a:	8c 93       	st	X, r24
    192c:	76 c0       	rjmp	.+236    	; 0x1a1a <mdio_setPinstatus+0x23c>
		break;

	/*IN case of choosing port C*/
	case PORTC:
		/*switching over pin status*/
		switch(au8_status)
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	3f 83       	std	Y+7, r19	; 0x07
    1936:	2e 83       	std	Y+6, r18	; 0x06
    1938:	8e 81       	ldd	r24, Y+6	; 0x06
    193a:	9f 81       	ldd	r25, Y+7	; 0x07
    193c:	82 30       	cpi	r24, 0x02	; 2
    193e:	91 05       	cpc	r25, r1
    1940:	a1 f0       	breq	.+40     	; 0x196a <mdio_setPinstatus+0x18c>
    1942:	2e 81       	ldd	r18, Y+6	; 0x06
    1944:	3f 81       	ldd	r19, Y+7	; 0x07
    1946:	23 30       	cpi	r18, 0x03	; 3
    1948:	31 05       	cpc	r19, r1
    194a:	d1 f0       	breq	.+52     	; 0x1980 <mdio_setPinstatus+0x1a2>
    194c:	8e 81       	ldd	r24, Y+6	; 0x06
    194e:	9f 81       	ldd	r25, Y+7	; 0x07
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	91 05       	cpc	r25, r1
    1954:	09 f0       	breq	.+2      	; 0x1958 <mdio_setPinstatus+0x17a>
    1956:	61 c0       	rjmp	.+194    	; 0x1a1a <mdio_setPinstatus+0x23c>
		{
			/*In case of choosing output*/
			case OUTPUT:
				/*Setting specific DIO pins to output*/
				MDIO_DDRC |= au8_pin;
    1958:	a4 e3       	ldi	r26, 0x34	; 52
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e4 e3       	ldi	r30, 0x34	; 52
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	90 81       	ld	r25, Z
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	89 2b       	or	r24, r25
    1966:	8c 93       	st	X, r24
    1968:	58 c0       	rjmp	.+176    	; 0x1a1a <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
			/*In case of choosing input floating*/
			case INPUT_FLOAT:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRC &= ~au8_pin;
    196a:	a4 e3       	ldi	r26, 0x34	; 52
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e4 e3       	ldi	r30, 0x34	; 52
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	98 2f       	mov	r25, r24
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	80 95       	com	r24
    197a:	89 23       	and	r24, r25
    197c:	8c 93       	st	X, r24
    197e:	4d c0       	rjmp	.+154    	; 0x1a1a <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
				/*In case of choosing input pull-up*/
			case INPUT_PULLUP:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRC &= ~au8_pin;
    1980:	a4 e3       	ldi	r26, 0x34	; 52
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e4 e3       	ldi	r30, 0x34	; 52
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	98 2f       	mov	r25, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	80 95       	com	r24
    1990:	89 23       	and	r24, r25
    1992:	8c 93       	st	X, r24
				/*Activating specific DIO input pins pull-up resistor*/
				MDIO_PORTC |= au8_pin;
    1994:	a5 e3       	ldi	r26, 0x35	; 53
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e5 e3       	ldi	r30, 0x35	; 53
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	90 81       	ld	r25, Z
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	89 2b       	or	r24, r25
    19a2:	8c 93       	st	X, r24
    19a4:	3a c0       	rjmp	.+116    	; 0x1a1a <mdio_setPinstatus+0x23c>
		}
		break;
	/*IN case of choosing port D*/
	case PORTD:
		/*switching over pin status*/
		switch(au8_status)
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	3d 83       	std	Y+5, r19	; 0x05
    19ae:	2c 83       	std	Y+4, r18	; 0x04
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	9d 81       	ldd	r25, Y+5	; 0x05
    19b4:	82 30       	cpi	r24, 0x02	; 2
    19b6:	91 05       	cpc	r25, r1
    19b8:	99 f0       	breq	.+38     	; 0x19e0 <mdio_setPinstatus+0x202>
    19ba:	2c 81       	ldd	r18, Y+4	; 0x04
    19bc:	3d 81       	ldd	r19, Y+5	; 0x05
    19be:	23 30       	cpi	r18, 0x03	; 3
    19c0:	31 05       	cpc	r19, r1
    19c2:	c9 f0       	breq	.+50     	; 0x19f6 <mdio_setPinstatus+0x218>
    19c4:	8c 81       	ldd	r24, Y+4	; 0x04
    19c6:	9d 81       	ldd	r25, Y+5	; 0x05
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	91 05       	cpc	r25, r1
    19cc:	31 f5       	brne	.+76     	; 0x1a1a <mdio_setPinstatus+0x23c>
		{
			/*In case of choosing output*/
			case OUTPUT:
				/*Setting specific DIO pins to output*/
				MDIO_DDRD |= au8_pin;
    19ce:	a1 e3       	ldi	r26, 0x31	; 49
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e1 e3       	ldi	r30, 0x31	; 49
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	90 81       	ld	r25, Z
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	89 2b       	or	r24, r25
    19dc:	8c 93       	st	X, r24
    19de:	1d c0       	rjmp	.+58     	; 0x1a1a <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
			/*In case of choosing input floating*/
			case INPUT_FLOAT:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRD &= ~au8_pin;
    19e0:	a1 e3       	ldi	r26, 0x31	; 49
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e1 e3       	ldi	r30, 0x31	; 49
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	98 2f       	mov	r25, r24
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	80 95       	com	r24
    19f0:	89 23       	and	r24, r25
    19f2:	8c 93       	st	X, r24
    19f4:	12 c0       	rjmp	.+36     	; 0x1a1a <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
				/*In case of choosing input pull-up*/
			case INPUT_PULLUP:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRD &= ~au8_pin;
    19f6:	a1 e3       	ldi	r26, 0x31	; 49
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e1 e3       	ldi	r30, 0x31	; 49
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	98 2f       	mov	r25, r24
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	80 95       	com	r24
    1a06:	89 23       	and	r24, r25
    1a08:	8c 93       	st	X, r24
				/*Activating specific DIO input pins pull-up resistor*/
				MDIO_PORTD |= au8_pin;
    1a0a:	a2 e3       	ldi	r26, 0x32	; 50
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e2 e3       	ldi	r30, 0x32	; 50
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	90 81       	ld	r25, Z
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	89 2b       	or	r24, r25
    1a18:	8c 93       	st	X, r24
		default:
			break;
	}
	/*Return from this function*/
	return;
}
    1a1a:	2d 96       	adiw	r28, 0x0d	; 13
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <mdio_setPinValue>:


void mdio_setPinValue(u8_t au8_port, u8_t au8_pin, u8_t au8_Value )
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	2d 97       	sbiw	r28, 0x0d	; 13
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	6a 83       	std	Y+2, r22	; 0x02
    1a44:	4b 83       	std	Y+3, r20	; 0x03
	/*switching over DIO Ports*/
	switch(au8_port)
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	3d 87       	std	Y+13, r19	; 0x0d
    1a4e:	2c 87       	std	Y+12, r18	; 0x0c
    1a50:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a52:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a54:	82 30       	cpi	r24, 0x02	; 2
    1a56:	91 05       	cpc	r25, r1
    1a58:	d9 f1       	breq	.+118    	; 0x1ad0 <mdio_setPinValue+0xa4>
    1a5a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a5c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a5e:	23 30       	cpi	r18, 0x03	; 3
    1a60:	31 05       	cpc	r19, r1
    1a62:	34 f4       	brge	.+12     	; 0x1a70 <mdio_setPinValue+0x44>
    1a64:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a66:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	71 f0       	breq	.+28     	; 0x1a8a <mdio_setPinValue+0x5e>
    1a6e:	96 c0       	rjmp	.+300    	; 0x1b9c <mdio_setPinValue+0x170>
    1a70:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a72:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a74:	23 30       	cpi	r18, 0x03	; 3
    1a76:	31 05       	cpc	r19, r1
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <mdio_setPinValue+0x50>
    1a7a:	4d c0       	rjmp	.+154    	; 0x1b16 <mdio_setPinValue+0xea>
    1a7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a7e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a80:	84 30       	cpi	r24, 0x04	; 4
    1a82:	91 05       	cpc	r25, r1
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <mdio_setPinValue+0x5c>
    1a86:	69 c0       	rjmp	.+210    	; 0x1b5a <mdio_setPinValue+0x12e>
    1a88:	89 c0       	rjmp	.+274    	; 0x1b9c <mdio_setPinValue+0x170>
	{
	/*IN CASE OF CHOOSING PORT A*/
	case PORTA:
		/*switching over pin value*/
		switch(au8_Value)
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	3b 87       	std	Y+11, r19	; 0x0b
    1a92:	2a 87       	std	Y+10, r18	; 0x0a
    1a94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a96:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	79 f0       	breq	.+30     	; 0x1aba <mdio_setPinValue+0x8e>
    1a9c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a9e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1aa0:	21 30       	cpi	r18, 0x01	; 1
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <mdio_setPinValue+0x7c>
    1aa6:	7a c0       	rjmp	.+244    	; 0x1b9c <mdio_setPinValue+0x170>
		{
		/*in case of choosing high*/
		case HIGH:
			/*setting specific DIO Pins to high */
			MDIO_PORTA |= au8_pin;
    1aa8:	ab e3       	ldi	r26, 0x3B	; 59
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	eb e3       	ldi	r30, 0x3B	; 59
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	90 81       	ld	r25, Z
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	89 2b       	or	r24, r25
    1ab6:	8c 93       	st	X, r24
    1ab8:	71 c0       	rjmp	.+226    	; 0x1b9c <mdio_setPinValue+0x170>
			/*break from this case*/
			break;
		/*in case of choosing low*/
		case LOW:
			/*setting specific DIO pin to low*/
			MDIO_PORTA &= ~ au8_pin;
    1aba:	ab e3       	ldi	r26, 0x3B	; 59
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	eb e3       	ldi	r30, 0x3B	; 59
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	98 2f       	mov	r25, r24
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	80 95       	com	r24
    1aca:	89 23       	and	r24, r25
    1acc:	8c 93       	st	X, r24
    1ace:	66 c0       	rjmp	.+204    	; 0x1b9c <mdio_setPinValue+0x170>
		/*break from this case*/
		break;
	/*IN CASE OF CHOOSING PORT B*/
	case PORTB:
		/*switching over pin value*/
		switch(au8_Value)
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	39 87       	std	Y+9, r19	; 0x09
    1ad8:	28 87       	std	Y+8, r18	; 0x08
    1ada:	88 85       	ldd	r24, Y+8	; 0x08
    1adc:	99 85       	ldd	r25, Y+9	; 0x09
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	79 f0       	breq	.+30     	; 0x1b00 <mdio_setPinValue+0xd4>
    1ae2:	28 85       	ldd	r18, Y+8	; 0x08
    1ae4:	39 85       	ldd	r19, Y+9	; 0x09
    1ae6:	21 30       	cpi	r18, 0x01	; 1
    1ae8:	31 05       	cpc	r19, r1
    1aea:	09 f0       	breq	.+2      	; 0x1aee <mdio_setPinValue+0xc2>
    1aec:	57 c0       	rjmp	.+174    	; 0x1b9c <mdio_setPinValue+0x170>
		{
		/*in case of choosing high*/
		case HIGH:
			/*setting specific DIO Pins to high */
			MDIO_PORTB |= au8_pin;
    1aee:	a8 e3       	ldi	r26, 0x38	; 56
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e8 e3       	ldi	r30, 0x38	; 56
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	90 81       	ld	r25, Z
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	89 2b       	or	r24, r25
    1afc:	8c 93       	st	X, r24
    1afe:	4e c0       	rjmp	.+156    	; 0x1b9c <mdio_setPinValue+0x170>
			/*break from this case*/
			break;
		/*in case of choosing low*/
		case LOW:
			/*setting specific DIO pin to low*/
			MDIO_PORTB &= ~ au8_pin;
    1b00:	a8 e3       	ldi	r26, 0x38	; 56
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e8 e3       	ldi	r30, 0x38	; 56
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	98 2f       	mov	r25, r24
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	80 95       	com	r24
    1b10:	89 23       	and	r24, r25
    1b12:	8c 93       	st	X, r24
    1b14:	43 c0       	rjmp	.+134    	; 0x1b9c <mdio_setPinValue+0x170>
		/*break from this case*/
		break;
	/*IN CASE OF CHOOSING PORT C*/
	case PORTC:
		/*switching over pin value*/
		switch(au8_Value)
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	3f 83       	std	Y+7, r19	; 0x07
    1b1e:	2e 83       	std	Y+6, r18	; 0x06
    1b20:	8e 81       	ldd	r24, Y+6	; 0x06
    1b22:	9f 81       	ldd	r25, Y+7	; 0x07
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	71 f0       	breq	.+28     	; 0x1b44 <mdio_setPinValue+0x118>
    1b28:	2e 81       	ldd	r18, Y+6	; 0x06
    1b2a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b2c:	21 30       	cpi	r18, 0x01	; 1
    1b2e:	31 05       	cpc	r19, r1
    1b30:	a9 f5       	brne	.+106    	; 0x1b9c <mdio_setPinValue+0x170>
		{
		/*in case of choosing high*/
		case HIGH:
			/*setting specific DIO Pins to high */
			MDIO_PORTC |= au8_pin;
    1b32:	a5 e3       	ldi	r26, 0x35	; 53
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e5 e3       	ldi	r30, 0x35	; 53
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	90 81       	ld	r25, Z
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	89 2b       	or	r24, r25
    1b40:	8c 93       	st	X, r24
    1b42:	2c c0       	rjmp	.+88     	; 0x1b9c <mdio_setPinValue+0x170>
			/*break from this case*/
			break;
		/*in case of choosing low*/
		case LOW:
			/*setting specific DIO pin to low*/
			MDIO_PORTC &= ~ au8_pin;
    1b44:	a5 e3       	ldi	r26, 0x35	; 53
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e5 e3       	ldi	r30, 0x35	; 53
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	98 2f       	mov	r25, r24
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	80 95       	com	r24
    1b54:	89 23       	and	r24, r25
    1b56:	8c 93       	st	X, r24
    1b58:	21 c0       	rjmp	.+66     	; 0x1b9c <mdio_setPinValue+0x170>
		/*break from this case*/
		break;
	/*IN CASE OF CHOOSING PORT D*/
	case PORTD:
		/*switching over pin value*/
		switch(au8_Value)
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	3d 83       	std	Y+5, r19	; 0x05
    1b62:	2c 83       	std	Y+4, r18	; 0x04
    1b64:	8c 81       	ldd	r24, Y+4	; 0x04
    1b66:	9d 81       	ldd	r25, Y+5	; 0x05
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	71 f0       	breq	.+28     	; 0x1b88 <mdio_setPinValue+0x15c>
    1b6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b70:	21 30       	cpi	r18, 0x01	; 1
    1b72:	31 05       	cpc	r19, r1
    1b74:	99 f4       	brne	.+38     	; 0x1b9c <mdio_setPinValue+0x170>
		{
		/*in case of choosing high*/
		case HIGH:
			/*setting specific DIO Pins to high */
			MDIO_PORTD |= au8_pin;
    1b76:	a2 e3       	ldi	r26, 0x32	; 50
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e2 e3       	ldi	r30, 0x32	; 50
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	90 81       	ld	r25, Z
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	89 2b       	or	r24, r25
    1b84:	8c 93       	st	X, r24
    1b86:	0a c0       	rjmp	.+20     	; 0x1b9c <mdio_setPinValue+0x170>
			/*break from this case*/
			break;
		/*in case of choosing low*/
		case LOW:
			/*setting specific DIO pin to low*/
			MDIO_PORTD &= ~ au8_pin;
    1b88:	a2 e3       	ldi	r26, 0x32	; 50
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e2 e3       	ldi	r30, 0x32	; 50
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	98 2f       	mov	r25, r24
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	80 95       	com	r24
    1b98:	89 23       	and	r24, r25
    1b9a:	8c 93       	st	X, r24
		/*break from this case*/
		break;
	}
	/*Return from this function*/
	return;
}
    1b9c:	2d 96       	adiw	r28, 0x0d	; 13
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <mdio_togglePinValue>:


void mdio_togglePinValue(u8_t au8_port, u8_t au8_pin )
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <mdio_togglePinValue+0x6>
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <mdio_togglePinValue+0x8>
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	6a 83       	std	Y+2, r22	; 0x02
	/*switching over DIO PORTS*/
	switch(au8_port)
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	3c 83       	std	Y+4, r19	; 0x04
    1bc6:	2b 83       	std	Y+3, r18	; 0x03
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	82 30       	cpi	r24, 0x02	; 2
    1bce:	91 05       	cpc	r25, r1
    1bd0:	f9 f0       	breq	.+62     	; 0x1c10 <mdio_togglePinValue+0x62>
    1bd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd6:	23 30       	cpi	r18, 0x03	; 3
    1bd8:	31 05       	cpc	r19, r1
    1bda:	34 f4       	brge	.+12     	; 0x1be8 <mdio_togglePinValue+0x3a>
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	91 05       	cpc	r25, r1
    1be4:	61 f0       	breq	.+24     	; 0x1bfe <mdio_togglePinValue+0x50>
    1be6:	2e c0       	rjmp	.+92     	; 0x1c44 <mdio_togglePinValue+0x96>
    1be8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bea:	3c 81       	ldd	r19, Y+4	; 0x04
    1bec:	23 30       	cpi	r18, 0x03	; 3
    1bee:	31 05       	cpc	r19, r1
    1bf0:	c1 f0       	breq	.+48     	; 0x1c22 <mdio_togglePinValue+0x74>
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf6:	84 30       	cpi	r24, 0x04	; 4
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	e1 f0       	breq	.+56     	; 0x1c34 <mdio_togglePinValue+0x86>
    1bfc:	23 c0       	rjmp	.+70     	; 0x1c44 <mdio_togglePinValue+0x96>
	{
	/*in case of choosing PORTA*/
	case PORTA:
		/*toggling specific DIO pin*/
		MDIO_PORTA |= au8_pin;
    1bfe:	ab e3       	ldi	r26, 0x3B	; 59
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	eb e3       	ldi	r30, 0x3B	; 59
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	90 81       	ld	r25, Z
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	89 2b       	or	r24, r25
    1c0c:	8c 93       	st	X, r24
    1c0e:	1a c0       	rjmp	.+52     	; 0x1c44 <mdio_togglePinValue+0x96>
		/*break from this case*/
		break;
	/*in case of choosing PORTB*/
	case PORTB:
		/*toggling specific DIO pin*/
		MDIO_PORTB |= au8_pin;
    1c10:	a8 e3       	ldi	r26, 0x38	; 56
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e8 e3       	ldi	r30, 0x38	; 56
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	90 81       	ld	r25, Z
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	89 2b       	or	r24, r25
    1c1e:	8c 93       	st	X, r24
    1c20:	11 c0       	rjmp	.+34     	; 0x1c44 <mdio_togglePinValue+0x96>
		/*break from this case*/
		break;
	/*in case of choosing PORTB*/
	case PORTC:
		/*toggling specific DIO pin*/
		MDIO_PORTC |= au8_pin;
    1c22:	a5 e3       	ldi	r26, 0x35	; 53
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e5 e3       	ldi	r30, 0x35	; 53
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	90 81       	ld	r25, Z
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	89 2b       	or	r24, r25
    1c30:	8c 93       	st	X, r24
    1c32:	08 c0       	rjmp	.+16     	; 0x1c44 <mdio_togglePinValue+0x96>
		/*break from this case*/
		break;
	/*in case of choosing PORTB*/
	case PORTD:
		/*toggling specific DIO pin*/
		MDIO_PORTD |= au8_pin;
    1c34:	a2 e3       	ldi	r26, 0x32	; 50
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e2 e3       	ldi	r30, 0x32	; 50
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	90 81       	ld	r25, Z
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	89 2b       	or	r24, r25
    1c42:	8c 93       	st	X, r24
		/*break from default*/
		break;
	}
	/*Return from this function*/
	return;
}
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <mdio_getPinValue>:


u8_t mdio_getPinValue(u8_t au8_port, u8_t au8_pin )
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <mdio_getPinValue+0x6>
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <mdio_getPinValue+0x8>
    1c5a:	0f 92       	push	r0
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	8a 83       	std	Y+2, r24	; 0x02
    1c62:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable used to get a specific pin value*/
	u8_t au8_pinValue = 0;
    1c64:	19 82       	std	Y+1, r1	; 0x01
	/*switching over DIO ports*/
	switch(au8_port)
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	3d 83       	std	Y+5, r19	; 0x05
    1c6e:	2c 83       	std	Y+4, r18	; 0x04
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	9d 81       	ldd	r25, Y+5	; 0x05
    1c74:	82 30       	cpi	r24, 0x02	; 2
    1c76:	91 05       	cpc	r25, r1
    1c78:	11 f1       	breq	.+68     	; 0x1cbe <mdio_getPinValue+0x6c>
    1c7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7e:	23 30       	cpi	r18, 0x03	; 3
    1c80:	31 05       	cpc	r19, r1
    1c82:	34 f4       	brge	.+12     	; 0x1c90 <mdio_getPinValue+0x3e>
    1c84:	8c 81       	ldd	r24, Y+4	; 0x04
    1c86:	9d 81       	ldd	r25, Y+5	; 0x05
    1c88:	81 30       	cpi	r24, 0x01	; 1
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	61 f0       	breq	.+24     	; 0x1ca6 <mdio_getPinValue+0x54>
    1c8e:	3a c0       	rjmp	.+116    	; 0x1d04 <mdio_getPinValue+0xb2>
    1c90:	2c 81       	ldd	r18, Y+4	; 0x04
    1c92:	3d 81       	ldd	r19, Y+5	; 0x05
    1c94:	23 30       	cpi	r18, 0x03	; 3
    1c96:	31 05       	cpc	r19, r1
    1c98:	f1 f0       	breq	.+60     	; 0x1cd6 <mdio_getPinValue+0x84>
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9e:	84 30       	cpi	r24, 0x04	; 4
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	29 f1       	breq	.+74     	; 0x1cee <mdio_getPinValue+0x9c>
    1ca4:	2f c0       	rjmp	.+94     	; 0x1d04 <mdio_getPinValue+0xb2>
	{
	/*in case of choosing PORTA*/
	case PORTA:
		/*checking a specific pin value*/
		if(MDIO_PINA & au8_pin)
    1ca6:	e9 e3       	ldi	r30, 0x39	; 57
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	90 81       	ld	r25, Z
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	89 23       	and	r24, r25
    1cb0:	88 23       	and	r24, r24
    1cb2:	19 f0       	breq	.+6      	; 0x1cba <mdio_getPinValue+0x68>
		{
			/*setting the pin value to high*/
			au8_pinValue = HIGH;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	25 c0       	rjmp	.+74     	; 0x1d04 <mdio_getPinValue+0xb2>
		}
		else
		{
			/*setting the pin value to low*/
			au8_pinValue = LOW;
    1cba:	19 82       	std	Y+1, r1	; 0x01
    1cbc:	23 c0       	rjmp	.+70     	; 0x1d04 <mdio_getPinValue+0xb2>
		/*break from this case*/
		break;
	/*in case of choosing PORTB*/
	case PORTB:
		/*checking a specific pin value*/
		if(MDIO_PINB & au8_pin)
    1cbe:	e6 e3       	ldi	r30, 0x36	; 54
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	90 81       	ld	r25, Z
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	89 23       	and	r24, r25
    1cc8:	88 23       	and	r24, r24
    1cca:	19 f0       	breq	.+6      	; 0x1cd2 <mdio_getPinValue+0x80>
		{
			/*setting the pin value to high*/
			au8_pinValue = HIGH;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	19 c0       	rjmp	.+50     	; 0x1d04 <mdio_getPinValue+0xb2>
		}
		else
		{
			/*setting the pin value to low*/
			au8_pinValue = LOW;
    1cd2:	19 82       	std	Y+1, r1	; 0x01
    1cd4:	17 c0       	rjmp	.+46     	; 0x1d04 <mdio_getPinValue+0xb2>
		/*break from this case*/
		break;
	/*in case of choosing PORTC*/
	case PORTC:
		/*checking a specific pin value*/
		if(MDIO_PINC & au8_pin)
    1cd6:	e3 e3       	ldi	r30, 0x33	; 51
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	90 81       	ld	r25, Z
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	89 23       	and	r24, r25
    1ce0:	88 23       	and	r24, r24
    1ce2:	19 f0       	breq	.+6      	; 0x1cea <mdio_getPinValue+0x98>
		{
			/*setting the pin value to high*/
			au8_pinValue = HIGH;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	0d c0       	rjmp	.+26     	; 0x1d04 <mdio_getPinValue+0xb2>
		}
		else
		{
			/*setting the pin value to low*/
			au8_pinValue = LOW;
    1cea:	19 82       	std	Y+1, r1	; 0x01
    1cec:	0b c0       	rjmp	.+22     	; 0x1d04 <mdio_getPinValue+0xb2>
		/*break from this case*/
		break;
	/*in case of choosing PORTD*/
	case PORTD:
		/*checking a specific pin value*/
		if(MDIO_PIND & au8_pin)
    1cee:	e0 e3       	ldi	r30, 0x30	; 48
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	90 81       	ld	r25, Z
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	89 23       	and	r24, r25
    1cf8:	88 23       	and	r24, r24
    1cfa:	19 f0       	breq	.+6      	; 0x1d02 <mdio_getPinValue+0xb0>
		{
			/*setting the pin value to high*/
			au8_pinValue = HIGH;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	01 c0       	rjmp	.+2      	; 0x1d04 <mdio_getPinValue+0xb2>
		}
		else
		{
			/*setting the pin value to low*/
			au8_pinValue = LOW;
    1d02:	19 82       	std	Y+1, r1	; 0x01
	default:
		/*break from default*/
		break;
	}
	/*Return from this function*/
	return au8_pinValue ;
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <mExInt_init>:
/******************************************/
/*				FUNCTIONS DIFINITIONS		*/
/*******************************************/

void mExInt_init(u8_t au8_IntPin, u8_t au8_IntMode)
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	2a 97       	sbiw	r28, 0x0a	; 10
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	6a 83       	std	Y+2, r22	; 0x02
	/*SWITCHING OVER INTERRUPT PINS*/
	switch(au8_IntPin)
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	3a 87       	std	Y+10, r19	; 0x0a
    1d36:	29 87       	std	Y+9, r18	; 0x09
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	91 05       	cpc	r25, r1
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <mExInt_init+0x2e>
    1d42:	66 c0       	rjmp	.+204    	; 0x1e10 <mExInt_init+0xfa>
    1d44:	29 85       	ldd	r18, Y+9	; 0x09
    1d46:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d48:	22 30       	cpi	r18, 0x02	; 2
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <mExInt_init+0x3a>
    1d4e:	bb c0       	rjmp	.+374    	; 0x1ec6 <mExInt_init+0x1b0>
    1d50:	89 85       	ldd	r24, Y+9	; 0x09
    1d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <mExInt_init+0x44>
    1d58:	d4 c0       	rjmp	.+424    	; 0x1f02 <mExInt_init+0x1ec>
	{
	/*IN CASE OF CHOOSING PIN_INT0 */
	case PIN_INT0:
		/*SWITCHING OVER INTERRUPT STATUES  */
		switch(au8_IntMode)
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	38 87       	std	Y+8, r19	; 0x08
    1d62:	2f 83       	std	Y+7, r18	; 0x07
    1d64:	8f 81       	ldd	r24, Y+7	; 0x07
    1d66:	98 85       	ldd	r25, Y+8	; 0x08
    1d68:	81 30       	cpi	r24, 0x01	; 1
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	21 f1       	breq	.+72     	; 0x1db6 <mExInt_init+0xa0>
    1d6e:	2f 81       	ldd	r18, Y+7	; 0x07
    1d70:	38 85       	ldd	r19, Y+8	; 0x08
    1d72:	22 30       	cpi	r18, 0x02	; 2
    1d74:	31 05       	cpc	r19, r1
    1d76:	2c f4       	brge	.+10     	; 0x1d82 <mExInt_init+0x6c>
    1d78:	8f 81       	ldd	r24, Y+7	; 0x07
    1d7a:	98 85       	ldd	r25, Y+8	; 0x08
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	61 f0       	breq	.+24     	; 0x1d98 <mExInt_init+0x82>
    1d80:	c0 c0       	rjmp	.+384    	; 0x1f02 <mExInt_init+0x1ec>
    1d82:	2f 81       	ldd	r18, Y+7	; 0x07
    1d84:	38 85       	ldd	r19, Y+8	; 0x08
    1d86:	22 30       	cpi	r18, 0x02	; 2
    1d88:	31 05       	cpc	r19, r1
    1d8a:	21 f1       	breq	.+72     	; 0x1dd4 <mExInt_init+0xbe>
    1d8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d8e:	98 85       	ldd	r25, Y+8	; 0x08
    1d90:	83 30       	cpi	r24, 0x03	; 3
    1d92:	91 05       	cpc	r25, r1
    1d94:	71 f1       	breq	.+92     	; 0x1df2 <mExInt_init+0xdc>
    1d96:	b5 c0       	rjmp	.+362    	; 0x1f02 <mExInt_init+0x1ec>
		{
		/*IN OF CHOOSING RISING EDGE*/
		case RISING_EDGE:
			/*SETTING MCUCR REGISTER BIT NO 0 FROM (0 -> 1) */
			SET_BIT(MCUCR,0);
    1d98:	a5 e5       	ldi	r26, 0x55	; 85
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e5 e5       	ldi	r30, 0x55	; 85
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	81 60       	ori	r24, 0x01	; 1
    1da4:	8c 93       	st	X, r24
			/*SETTING MCUCR REGISTER BIT NO 1 FROM (0 -> 1) */
			SET_BIT(MCUCR,1);
    1da6:	a5 e5       	ldi	r26, 0x55	; 85
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e5 e5       	ldi	r30, 0x55	; 85
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	82 60       	ori	r24, 0x02	; 2
    1db2:	8c 93       	st	X, r24
    1db4:	a6 c0       	rjmp	.+332    	; 0x1f02 <mExInt_init+0x1ec>
			/*BREAK FROM THIS CASE*/
			break;
		/*IN CASE OF CHOOSING FALLING EDGE*/
		case FALLING_EDGE:
			/*SETTING MCUCR REGISTER BIT NO 0 FROM (1 -> 0) */
			CLEAR_BIT(MCUCR,0);
    1db6:	a5 e5       	ldi	r26, 0x55	; 85
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e5 e5       	ldi	r30, 0x55	; 85
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	8e 7f       	andi	r24, 0xFE	; 254
    1dc2:	8c 93       	st	X, r24
			/*SETTING MCUCR REGISTER BIT NO 1 FROM (0 -> 1) */
			SET_BIT(MCUCR,1);
    1dc4:	a5 e5       	ldi	r26, 0x55	; 85
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e5 e5       	ldi	r30, 0x55	; 85
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	82 60       	ori	r24, 0x02	; 2
    1dd0:	8c 93       	st	X, r24
    1dd2:	97 c0       	rjmp	.+302    	; 0x1f02 <mExInt_init+0x1ec>
			/*BREAK FROM THIS CASE*/
			break;
		/*IN CASE OF CHOOSING SWITCHING*/
		case SWITCHING:
			/*SETTING MCUCR REGISTER BIT NO 0 FROM (0 -> 1) */
			SET_BIT(MCUCR,0);
    1dd4:	a5 e5       	ldi	r26, 0x55	; 85
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e5 e5       	ldi	r30, 0x55	; 85
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	81 60       	ori	r24, 0x01	; 1
    1de0:	8c 93       	st	X, r24
			/*SETTING MCUCR REGISTER BIT NO 1 FROM (1 -> 0) */
			CLEAR_BIT(MCUCR,1);
    1de2:	a5 e5       	ldi	r26, 0x55	; 85
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e5 e5       	ldi	r30, 0x55	; 85
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	8d 7f       	andi	r24, 0xFD	; 253
    1dee:	8c 93       	st	X, r24
    1df0:	88 c0       	rjmp	.+272    	; 0x1f02 <mExInt_init+0x1ec>
			/*BREAK FROM THIS CASE*/
			break;
		/*IN CASE OF CHOOSING LOW LEVEL*/
		case LOW_LEVEL:
			/*SETTING MCUCR REGISTER BIT NO 0 FROM (1 -> 0) */
				CLEAR_BIT(MCUCR,0);
    1df2:	a5 e5       	ldi	r26, 0x55	; 85
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e5 e5       	ldi	r30, 0x55	; 85
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	8e 7f       	andi	r24, 0xFE	; 254
    1dfe:	8c 93       	st	X, r24
				/*SETTING MCUCR REGISTER BIT NO 1 FROM (1 -> 0) */
				CLEAR_BIT(MCUCR,1);
    1e00:	a5 e5       	ldi	r26, 0x55	; 85
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e5 e5       	ldi	r30, 0x55	; 85
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	8d 7f       	andi	r24, 0xFD	; 253
    1e0c:	8c 93       	st	X, r24
    1e0e:	79 c0       	rjmp	.+242    	; 0x1f02 <mExInt_init+0x1ec>
		/*BREAK FROM PIN_INT0 CASE*/
		break;
	/*IN CASE OF CHOOSING PIN_INT1*/
	case PIN_INT1:
		/*SWITCHING OVER INTERRUPT STATUES  */
		switch(au8_IntMode)
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	3e 83       	std	Y+6, r19	; 0x06
    1e18:	2d 83       	std	Y+5, r18	; 0x05
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	91 05       	cpc	r25, r1
    1e22:	21 f1       	breq	.+72     	; 0x1e6c <mExInt_init+0x156>
    1e24:	2d 81       	ldd	r18, Y+5	; 0x05
    1e26:	3e 81       	ldd	r19, Y+6	; 0x06
    1e28:	22 30       	cpi	r18, 0x02	; 2
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <mExInt_init+0x122>
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	61 f0       	breq	.+24     	; 0x1e4e <mExInt_init+0x138>
    1e36:	65 c0       	rjmp	.+202    	; 0x1f02 <mExInt_init+0x1ec>
    1e38:	2d 81       	ldd	r18, Y+5	; 0x05
    1e3a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e3c:	22 30       	cpi	r18, 0x02	; 2
    1e3e:	31 05       	cpc	r19, r1
    1e40:	21 f1       	breq	.+72     	; 0x1e8a <mExInt_init+0x174>
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	9e 81       	ldd	r25, Y+6	; 0x06
    1e46:	83 30       	cpi	r24, 0x03	; 3
    1e48:	91 05       	cpc	r25, r1
    1e4a:	71 f1       	breq	.+92     	; 0x1ea8 <mExInt_init+0x192>
    1e4c:	5a c0       	rjmp	.+180    	; 0x1f02 <mExInt_init+0x1ec>
		{
		/*IN OF CHOOSING RISING EDGE*/
		case RISING_EDGE:
			/*SETTING MCUCR REGISTER BIT NO 2 FROM (0 -> 1) */
			SET_BIT(MCUCR,2);
    1e4e:	a5 e5       	ldi	r26, 0x55	; 85
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e5 e5       	ldi	r30, 0x55	; 85
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	84 60       	ori	r24, 0x04	; 4
    1e5a:	8c 93       	st	X, r24
			/*SETTING MCUCR REGISTER BIT NO 3 FROM (0 -> 1) */
			SET_BIT(MCUCR,3);
    1e5c:	a5 e5       	ldi	r26, 0x55	; 85
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e5 e5       	ldi	r30, 0x55	; 85
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	88 60       	ori	r24, 0x08	; 8
    1e68:	8c 93       	st	X, r24
    1e6a:	4b c0       	rjmp	.+150    	; 0x1f02 <mExInt_init+0x1ec>
			/*BREAK FROM THIS CASE*/
			break;
		/*IN CASE OF CHOOSING FALLING EDGE*/
		case FALLING_EDGE:
			/*SETTING MCUCR REGISTER BIT NO 2 FROM (1 -> 0) */
			CLEAR_BIT(MCUCR,2);
    1e6c:	a5 e5       	ldi	r26, 0x55	; 85
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e5 e5       	ldi	r30, 0x55	; 85
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	8b 7f       	andi	r24, 0xFB	; 251
    1e78:	8c 93       	st	X, r24
			/*SETTING MCUCR REGISTER BIT NO 3 FROM (0 -> 1) */
			SET_BIT(MCUCR,3);
    1e7a:	a5 e5       	ldi	r26, 0x55	; 85
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	e5 e5       	ldi	r30, 0x55	; 85
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	88 60       	ori	r24, 0x08	; 8
    1e86:	8c 93       	st	X, r24
    1e88:	3c c0       	rjmp	.+120    	; 0x1f02 <mExInt_init+0x1ec>
			/*BREAK FROM THIS CASE*/
			break;
		/*IN CASE OF CHOOSING SWITCHING*/
		case SWITCHING:
			/*SETTING MCUCR REGISTER BIT NO 2 FROM (0 -> 1) */
			SET_BIT(MCUCR,2);
    1e8a:	a5 e5       	ldi	r26, 0x55	; 85
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e5 e5       	ldi	r30, 0x55	; 85
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	84 60       	ori	r24, 0x04	; 4
    1e96:	8c 93       	st	X, r24
			/*SETTING MCUCR REGISTER BIT NO 3 FROM (1 -> 0) */
			CLEAR_BIT(MCUCR,3);
    1e98:	a5 e5       	ldi	r26, 0x55	; 85
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e5 e5       	ldi	r30, 0x55	; 85
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	87 7f       	andi	r24, 0xF7	; 247
    1ea4:	8c 93       	st	X, r24
    1ea6:	2d c0       	rjmp	.+90     	; 0x1f02 <mExInt_init+0x1ec>
			/*BREAK FROM THIS CASE*/
			break;
		/*IN CASE OF CHOOSING LOW LEVEL*/
		case LOW_LEVEL:
			/*SETTING MCUCR REGISTER BIT NO 2 FROM (1 -> 0) */
				CLEAR_BIT(MCUCR,2);
    1ea8:	a5 e5       	ldi	r26, 0x55	; 85
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e5 e5       	ldi	r30, 0x55	; 85
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	8b 7f       	andi	r24, 0xFB	; 251
    1eb4:	8c 93       	st	X, r24
				/*SETTING MCUCR REGISTER BIT NO 3 FROM (1 -> 0) */
				CLEAR_BIT(MCUCR,3);
    1eb6:	a5 e5       	ldi	r26, 0x55	; 85
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e5 e5       	ldi	r30, 0x55	; 85
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	87 7f       	andi	r24, 0xF7	; 247
    1ec2:	8c 93       	st	X, r24
    1ec4:	1e c0       	rjmp	.+60     	; 0x1f02 <mExInt_init+0x1ec>
		/*BREAK FROM PIN_INT1 CASE*/
		break;
	/*IN CASE OF CHOOSING PIN_INT2*/
	case PIN_INT2:
		/*SWITCHING OVER INTERRUPT STATUES  */
		switch(au8_IntMode)
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	3c 83       	std	Y+4, r19	; 0x04
    1ece:	2b 83       	std	Y+3, r18	; 0x03
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	31 f0       	breq	.+12     	; 0x1ee4 <mExInt_init+0x1ce>
    1ed8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eda:	3c 81       	ldd	r19, Y+4	; 0x04
    1edc:	21 30       	cpi	r18, 0x01	; 1
    1ede:	31 05       	cpc	r19, r1
    1ee0:	49 f0       	breq	.+18     	; 0x1ef4 <mExInt_init+0x1de>
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <mExInt_init+0x1ec>
		{
		/*IN OF CHOOSING RISING EDGE*/
		case RISING_EDGE:
			/*SETTING MCUCSR REGISTER BIT NO 6 FROM (0 -> 1) */
			SET_BIT(MCUCSR,6);
    1ee4:	a4 e5       	ldi	r26, 0x54	; 84
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e4 e5       	ldi	r30, 0x54	; 84
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	80 64       	ori	r24, 0x40	; 64
    1ef0:	8c 93       	st	X, r24
    1ef2:	07 c0       	rjmp	.+14     	; 0x1f02 <mExInt_init+0x1ec>
			/*BREAK FROM THIS CASE*/
			break;
		/*IN CASE OF CHOOSING FALLING EDGE*/
		case FALLING_EDGE:
			/*SETTING MCUCSR REGISTER BIT NO 6 FROM (1 -> 0) */
			CLEAR_BIT(MCUCSR,6);
    1ef4:	a4 e5       	ldi	r26, 0x54	; 84
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e4 e5       	ldi	r30, 0x54	; 84
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	8f 7b       	andi	r24, 0xBF	; 191
    1f00:	8c 93       	st	X, r24
		/*BREAK FROM DEFAULT*/
		break;
	}
	/*RETURN FROM THIS FUN*/
	return;
}
    1f02:	2a 96       	adiw	r28, 0x0a	; 10
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <mExInt_EnableInt>:

void mExInt_EnableInt(u8_t au8_IntPin)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <mExInt_EnableInt+0x6>
    1f1a:	0f 92       	push	r0
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	89 83       	std	Y+1, r24	; 0x01
	/*SWITCHING OVER INTERRUPT PINS*/
	switch(au8_IntPin)
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	3b 83       	std	Y+3, r19	; 0x03
    1f2a:	2a 83       	std	Y+2, r18	; 0x02
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	91 05       	cpc	r25, r1
    1f34:	89 f0       	breq	.+34     	; 0x1f58 <mExInt_EnableInt+0x44>
    1f36:	2a 81       	ldd	r18, Y+2	; 0x02
    1f38:	3b 81       	ldd	r19, Y+3	; 0x03
    1f3a:	22 30       	cpi	r18, 0x02	; 2
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	a1 f0       	breq	.+40     	; 0x1f68 <mExInt_EnableInt+0x54>
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	9b 81       	ldd	r25, Y+3	; 0x03
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	b9 f4       	brne	.+46     	; 0x1f76 <mExInt_EnableInt+0x62>
	{
	/*IN CASE OF CHOOSING */
	case PIN_INT0:
		/*SETTING GICR REGISTER BIT NO 6 FROM (0 -> 1) */
		SET_BIT(GICR,6);
    1f48:	ab e5       	ldi	r26, 0x5B	; 91
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	eb e5       	ldi	r30, 0x5B	; 91
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	80 64       	ori	r24, 0x40	; 64
    1f54:	8c 93       	st	X, r24
    1f56:	0f c0       	rjmp	.+30     	; 0x1f76 <mExInt_EnableInt+0x62>
		/*BREAK FROM THIS CASE*/
		break;
	/*IN CASE OF CHOOSING */
	case PIN_INT1:
		/*SETTING GICR REGISTER BIT NO 7 FROM (0 -> 1) */
		SET_BIT(GICR,7);
    1f58:	ab e5       	ldi	r26, 0x5B	; 91
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	eb e5       	ldi	r30, 0x5B	; 91
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	80 68       	ori	r24, 0x80	; 128
    1f64:	8c 93       	st	X, r24
    1f66:	07 c0       	rjmp	.+14     	; 0x1f76 <mExInt_EnableInt+0x62>
		/*BREAK FROM THIS CASE*/
		break;
	/*IN CASE OF CHOOSING */
	case PIN_INT2:
		/*SETTING GICR REGISTER BIT NO 5 FROM (0 -> 1) */
		SET_BIT(GICR,5);
    1f68:	ab e5       	ldi	r26, 0x5B	; 91
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	eb e5       	ldi	r30, 0x5B	; 91
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	80 62       	ori	r24, 0x20	; 32
    1f74:	8c 93       	st	X, r24
		/*BREAK FROM THIS CASE*/
		break;

	}
	return;
}
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <mExInt_DisableInt>:

void mExInt_DisableInt(u8_t Intpin)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	00 d0       	rcall	.+0      	; 0x1f88 <mExInt_DisableInt+0x6>
    1f88:	0f 92       	push	r0
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	89 83       	std	Y+1, r24	; 0x01
	/*SWITCHING OVER INTERRUPT PINS*/
		switch(Intpin)
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	3b 83       	std	Y+3, r19	; 0x03
    1f98:	2a 83       	std	Y+2, r18	; 0x02
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9e:	81 30       	cpi	r24, 0x01	; 1
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	89 f0       	breq	.+34     	; 0x1fc6 <mExInt_DisableInt+0x44>
    1fa4:	2a 81       	ldd	r18, Y+2	; 0x02
    1fa6:	3b 81       	ldd	r19, Y+3	; 0x03
    1fa8:	22 30       	cpi	r18, 0x02	; 2
    1faa:	31 05       	cpc	r19, r1
    1fac:	a1 f0       	breq	.+40     	; 0x1fd6 <mExInt_DisableInt+0x54>
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	b9 f4       	brne	.+46     	; 0x1fe4 <mExInt_DisableInt+0x62>
		{
		/*IN CASE OF CHOOSING */
		case PIN_INT0:
			/*SETTING GICR REGISTER BIT NO 6 FROM (0 -> 1) */
			CLEAR_BIT(GICR,6);
    1fb6:	ab e5       	ldi	r26, 0x5B	; 91
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	eb e5       	ldi	r30, 0x5B	; 91
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	8f 7b       	andi	r24, 0xBF	; 191
    1fc2:	8c 93       	st	X, r24
    1fc4:	0f c0       	rjmp	.+30     	; 0x1fe4 <mExInt_DisableInt+0x62>
			/*BREAK FROM THIS CASE*/
			break;
		/*IN CASE OF CHOOSING */
		case PIN_INT1:
			/*SETTING GICR REGISTER BIT NO 7 FROM (0 -> 1) */
			CLEAR_BIT(GICR,7);
    1fc6:	ab e5       	ldi	r26, 0x5B	; 91
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	eb e5       	ldi	r30, 0x5B	; 91
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	8f 77       	andi	r24, 0x7F	; 127
    1fd2:	8c 93       	st	X, r24
    1fd4:	07 c0       	rjmp	.+14     	; 0x1fe4 <mExInt_DisableInt+0x62>
			/*BREAK FROM THIS CASE*/
			break;
		/*IN CASE OF CHOOSING */
		case PIN_INT2:
			/*SETTING GICR REGISTER BIT NO 5 FROM (0 -> 1) */
			CLEAR_BIT(GICR,5);
    1fd6:	ab e5       	ldi	r26, 0x5B	; 91
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	eb e5       	ldi	r30, 0x5B	; 91
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	8f 7d       	andi	r24, 0xDF	; 223
    1fe2:	8c 93       	st	X, r24
			/*BREAK FROM THIS CASE*/
			break;

		}
	return;
}
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <mExInt_CallBack>:

void mExInt_CallBack(void(*mExInt_Fun)(void))
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <mExInt_CallBack+0x6>
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	9a 83       	std	Y+2, r25	; 0x02
    1ffc:	89 83       	std	Y+1, r24	; 0x01
	global_fun = mExInt_Fun;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	90 93 69 00 	sts	0x0069, r25
    2006:	80 93 68 00 	sts	0x0068, r24
	return;
}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <__vector_1>:



/*INTERRUPT FUNC DIFINITIONS*/
void __vector_1(void)
{
    2014:	1f 92       	push	r1
    2016:	0f 92       	push	r0
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	0f 92       	push	r0
    201c:	11 24       	eor	r1, r1
    201e:	2f 93       	push	r18
    2020:	3f 93       	push	r19
    2022:	4f 93       	push	r20
    2024:	5f 93       	push	r21
    2026:	6f 93       	push	r22
    2028:	7f 93       	push	r23
    202a:	8f 93       	push	r24
    202c:	9f 93       	push	r25
    202e:	af 93       	push	r26
    2030:	bf 93       	push	r27
    2032:	ef 93       	push	r30
    2034:	ff 93       	push	r31
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
	if(global_fun != 0)
    203e:	80 91 68 00 	lds	r24, 0x0068
    2042:	90 91 69 00 	lds	r25, 0x0069
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	29 f0       	breq	.+10     	; 0x2054 <__vector_1+0x40>
	{
		global_fun();
    204a:	e0 91 68 00 	lds	r30, 0x0068
    204e:	f0 91 69 00 	lds	r31, 0x0069
    2052:	09 95       	icall
	else
	{
		/*do nothing*/
	}
	return;
}
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	ff 91       	pop	r31
    205a:	ef 91       	pop	r30
    205c:	bf 91       	pop	r27
    205e:	af 91       	pop	r26
    2060:	9f 91       	pop	r25
    2062:	8f 91       	pop	r24
    2064:	7f 91       	pop	r23
    2066:	6f 91       	pop	r22
    2068:	5f 91       	pop	r21
    206a:	4f 91       	pop	r20
    206c:	3f 91       	pop	r19
    206e:	2f 91       	pop	r18
    2070:	0f 90       	pop	r0
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	0f 90       	pop	r0
    2076:	1f 90       	pop	r1
    2078:	18 95       	reti

0000207a <mGIE_EnableGie>:
/******************************************/
/*				FUNCTIONS DIFINITIONS		*/
/*******************************************/

void mGIE_EnableGie(void)
{
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
	/*SETTING SREG REGISTER BIT NO 7 FROM (0 -> 1)*/
	SET_BIT(SREG, 7);
    2082:	af e5       	ldi	r26, 0x5F	; 95
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	ef e5       	ldi	r30, 0x5F	; 95
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	80 68       	ori	r24, 0x80	; 128
    208e:	8c 93       	st	X, r24
	return;
}
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <mGIE_DisableGie>:

void mGIE_DisableGie(void)
{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
	/*SETTING SREG REGISTER BIT NO 7 FROM (0 -> 1)*/
	CLEAR_BIT(SREG, 7);
    209e:	af e5       	ldi	r26, 0x5F	; 95
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	ef e5       	ldi	r30, 0x5F	; 95
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	8f 77       	andi	r24, 0x7F	; 127
    20aa:	8c 93       	st	X, r24
	return;
}
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <mtimer_init>:
void(*FunToSet)(void)=0;



void mtimer_init(void)
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62

	/*SET FAST  PWM MODE */
	SET_BIT(TCCR0, 3);
    20ba:	a3 e5       	ldi	r26, 0x53	; 83
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e3 e5       	ldi	r30, 0x53	; 83
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	88 60       	ori	r24, 0x08	; 8
    20c6:	8c 93       	st	X, r24
	SET_BIT(TCCR0, 6);
    20c8:	a3 e5       	ldi	r26, 0x53	; 83
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e3 e5       	ldi	r30, 0x53	; 83
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	80 64       	ori	r24, 0x40	; 64
    20d4:	8c 93       	st	X, r24
	/*NON INVERTING MODE*/

	SET_BIT(TCCR0, 5);
    20d6:	a3 e5       	ldi	r26, 0x53	; 83
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e3 e5       	ldi	r30, 0x53	; 83
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	80 62       	ori	r24, 0x20	; 32
    20e2:	8c 93       	st	X, r24

	CLEAR_BIT(TCCR0,4);
    20e4:	a3 e5       	ldi	r26, 0x53	; 83
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e3 e5       	ldi	r30, 0x53	; 83
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	8f 7e       	andi	r24, 0xEF	; 239
    20f0:	8c 93       	st	X, r24


	/**/
	OCR0 = 100;
    20f2:	ec e5       	ldi	r30, 0x5C	; 92
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	84 e6       	ldi	r24, 0x64	; 100
    20f8:	80 83       	st	Z, r24
	/*SET PRESCALLER*/
	SET_BIT(TCCR0,1);
    20fa:	a3 e5       	ldi	r26, 0x53	; 83
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e3 e5       	ldi	r30, 0x53	; 83
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	82 60       	ori	r24, 0x02	; 2
    2106:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, 0);
    2108:	a3 e5       	ldi	r26, 0x53	; 83
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e3 e5       	ldi	r30, 0x53	; 83
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	8e 7f       	andi	r24, 0xFE	; 254
    2114:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,2);
    2116:	a3 e5       	ldi	r26, 0x53	; 83
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e3 e5       	ldi	r30, 0x53	; 83
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	8b 7f       	andi	r24, 0xFB	; 251
    2122:	8c 93       	st	X, r24



	return;
}
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <mtimrer1_init>:

void mtimrer1_init(void)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
	/*SET NORMAL MODE*/
	CLEAR_BIT(TCCR1A,0);
    2132:	af e4       	ldi	r26, 0x4F	; 79
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	ef e4       	ldi	r30, 0x4F	; 79
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	8e 7f       	andi	r24, 0xFE	; 254
    213e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,1);
    2140:	af e4       	ldi	r26, 0x4F	; 79
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	ef e4       	ldi	r30, 0x4F	; 79
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	8d 7f       	andi	r24, 0xFD	; 253
    214c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,3);
    214e:	ae e4       	ldi	r26, 0x4E	; 78
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	ee e4       	ldi	r30, 0x4E	; 78
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	87 7f       	andi	r24, 0xF7	; 247
    215a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,4);
    215c:	ae e4       	ldi	r26, 0x4E	; 78
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	ee e4       	ldi	r30, 0x4E	; 78
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	8f 7e       	andi	r24, 0xEF	; 239
    2168:	8c 93       	st	X, r24
	/*SET PRESCALLER*/
	CLEAR_BIT(TCCR1B,0);
    216a:	ae e4       	ldi	r26, 0x4E	; 78
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	ee e4       	ldi	r30, 0x4E	; 78
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	8e 7f       	andi	r24, 0xFE	; 254
    2176:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    2178:	ae e4       	ldi	r26, 0x4E	; 78
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	ee e4       	ldi	r30, 0x4E	; 78
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	82 60       	ori	r24, 0x02	; 2
    2184:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,2);
    2186:	af e4       	ldi	r26, 0x4F	; 79
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	ef e4       	ldi	r30, 0x4F	; 79
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	8b 7f       	andi	r24, 0xFB	; 251
    2192:	8c 93       	st	X, r24

	return;
}
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <mtimer1_GetReading>:

u16_t mtimer1_GetReading(void)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62

	return TCNT1 ;
    21a2:	ec e4       	ldi	r30, 0x4C	; 76
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	91 81       	ldd	r25, Z+1	; 0x01
}
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <mtimer1_SendReading>:

void mtimer1_SendReading(u16_t au16_Value)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <mtimer1_SendReading+0x6>
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = au16_Value;
    21be:	ec e4       	ldi	r30, 0x4C	; 76
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	80 83       	st	Z, r24
	return;
}
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <mtimer_BusyWait>:

void mtimer_BusyWait(u16_t au16_value)
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	00 d0       	rcall	.+0      	; 0x21da <mtimer_BusyWait+0x6>
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	9a 83       	std	Y+2, r25	; 0x02
    21e0:	89 83       	std	Y+1, r24	; 0x01
	/**/
	SET_BIT(TCCR0, 3);
    21e2:	a3 e5       	ldi	r26, 0x53	; 83
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e3 e5       	ldi	r30, 0x53	; 83
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	88 60       	ori	r24, 0x08	; 8
    21ee:	8c 93       	st	X, r24
	SET_BIT(TCCR0, 6);
    21f0:	a3 e5       	ldi	r26, 0x53	; 83
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e3 e5       	ldi	r30, 0x53	; 83
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	80 64       	ori	r24, 0x40	; 64
    21fc:	8c 93       	st	X, r24

	/**/
	CLEAR_BIT(TCCR0, 4);
    21fe:	a3 e5       	ldi	r26, 0x53	; 83
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e3 e5       	ldi	r30, 0x53	; 83
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	8f 7e       	andi	r24, 0xEF	; 239
    220a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, 5);
    220c:	a3 e5       	ldi	r26, 0x53	; 83
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e3 e5       	ldi	r30, 0x53	; 83
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	8f 7d       	andi	r24, 0xDF	; 223
    2218:	8c 93       	st	X, r24


	return;
}
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <mtimer0_GeneratePWM>:

void mtimer0_GeneratePWM(u8_t au8_DutyCycle)
{
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	0f 92       	push	r0
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = au8_DutyCycle;
    2230:	ec e5       	ldi	r30, 0x5C	; 92
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	80 83       	st	Z, r24
	return;
}
    2238:	0f 90       	pop	r0
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <mtimer0_CallBack>:
void mtimer0_CallBack(void(*func)(void))
{
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	00 d0       	rcall	.+0      	; 0x2246 <mtimer0_CallBack+0x6>
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	9a 83       	std	Y+2, r25	; 0x02
    224c:	89 83       	std	Y+1, r24	; 0x01
	FunToSet = func;
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	9a 81       	ldd	r25, Y+2	; 0x02
    2252:	90 93 6b 00 	sts	0x006B, r25
    2256:	80 93 6a 00 	sts	0x006A, r24
}
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <__vector_10>:



void __vector_10 (void)
{
    2264:	1f 92       	push	r1
    2266:	0f 92       	push	r0
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	0f 92       	push	r0
    226c:	11 24       	eor	r1, r1
    226e:	2f 93       	push	r18
    2270:	3f 93       	push	r19
    2272:	4f 93       	push	r20
    2274:	5f 93       	push	r21
    2276:	6f 93       	push	r22
    2278:	7f 93       	push	r23
    227a:	8f 93       	push	r24
    227c:	9f 93       	push	r25
    227e:	af 93       	push	r26
    2280:	bf 93       	push	r27
    2282:	ef 93       	push	r30
    2284:	ff 93       	push	r31
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
	if( FunToSet != 0)
    228e:	80 91 6a 00 	lds	r24, 0x006A
    2292:	90 91 6b 00 	lds	r25, 0x006B
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	29 f0       	breq	.+10     	; 0x22a4 <__vector_10+0x40>
		FunToSet();
    229a:	e0 91 6a 00 	lds	r30, 0x006A
    229e:	f0 91 6b 00 	lds	r31, 0x006B
    22a2:	09 95       	icall
}
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	ff 91       	pop	r31
    22aa:	ef 91       	pop	r30
    22ac:	bf 91       	pop	r27
    22ae:	af 91       	pop	r26
    22b0:	9f 91       	pop	r25
    22b2:	8f 91       	pop	r24
    22b4:	7f 91       	pop	r23
    22b6:	6f 91       	pop	r22
    22b8:	5f 91       	pop	r21
    22ba:	4f 91       	pop	r20
    22bc:	3f 91       	pop	r19
    22be:	2f 91       	pop	r18
    22c0:	0f 90       	pop	r0
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	0f 90       	pop	r0
    22c6:	1f 90       	pop	r1
    22c8:	18 95       	reti

000022ca <main>:

u16_t P_T;
u16_t T_ON;

int main (void)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
	mdio_setPinstatus(PORTB,PIN3,OUTPUT);
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	68 e0       	ldi	r22, 0x08	; 8
    22d6:	41 e0       	ldi	r20, 0x01	; 1
    22d8:	0e 94 ef 0b 	call	0x17de	; 0x17de <mdio_setPinstatus>
	mdio_setPinstatus(PORTD,PIN2,INPUT_FLOAT);
    22dc:	84 e0       	ldi	r24, 0x04	; 4
    22de:	64 e0       	ldi	r22, 0x04	; 4
    22e0:	42 e0       	ldi	r20, 0x02	; 2
    22e2:	0e 94 ef 0b 	call	0x17de	; 0x17de <mdio_setPinstatus>



	mExInt_CallBack(func);
    22e6:	8a ea       	ldi	r24, 0xAA	; 170
    22e8:	91 e1       	ldi	r25, 0x11	; 17
    22ea:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <mExInt_CallBack>

	hlcd_init();
    22ee:	0e 94 bd 08 	call	0x117a	; 0x117a <hlcd_init>

	mtimrer1_init();
    22f2:	0e 94 95 10 	call	0x212a	; 0x212a <mtimrer1_init>
	mtimer_init();
    22f6:	0e 94 59 10 	call	0x20b2	; 0x20b2 <mtimer_init>

	mExInt_init(PIN_INT0,RISING_EDGE);
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	60 e0       	ldi	r22, 0x00	; 0
    22fe:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <mExInt_init>

	mExInt_EnableInt(PIN_INT0);
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <mExInt_EnableInt>


	mGIE_EnableGie();
    2308:	0e 94 3d 10 	call	0x207a	; 0x207a <mGIE_EnableGie>


	while(1)
	{

		if(P_T != 0 && T_ON != 0)
    230c:	80 91 6d 00 	lds	r24, 0x006D
    2310:	90 91 6e 00 	lds	r25, 0x006E
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	d1 f3       	breq	.-12     	; 0x230c <main+0x42>
    2318:	80 91 6f 00 	lds	r24, 0x006F
    231c:	90 91 70 00 	lds	r25, 0x0070
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	a1 f3       	breq	.-24     	; 0x230c <main+0x42>
		{
			hlcd_setCursor(0,0);
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	60 e0       	ldi	r22, 0x00	; 0
    2328:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <hlcd_setCursor>
			hlcd_displayCharacter('a');
    232c:	81 e6       	ldi	r24, 0x61	; 97
    232e:	0e 94 3e 0b 	call	0x167c	; 0x167c <hlcd_displayCharacter>
			hlcd_displayString(P_T);
    2332:	80 91 6d 00 	lds	r24, 0x006D
    2336:	90 91 6e 00 	lds	r25, 0x006E
    233a:	0e 94 4e 0b 	call	0x169c	; 0x169c <hlcd_displayString>
			hlcd_setCursor(1,0);
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <hlcd_setCursor>
			hlcd_displayString(T_ON);
    2346:	80 91 6f 00 	lds	r24, 0x006F
    234a:	90 91 70 00 	lds	r25, 0x0070
    234e:	0e 94 4e 0b 	call	0x169c	; 0x169c <hlcd_displayString>
    2352:	dc cf       	rjmp	.-72     	; 0x230c <main+0x42>

00002354 <func>:
	}
	return 0 ;
}

void func(void)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	00 d0       	rcall	.+0      	; 0x235a <func+0x6>
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
	static u8_t count = 0;
	count++;
    235e:	80 91 6c 00 	lds	r24, 0x006C
    2362:	8f 5f       	subi	r24, 0xFF	; 255
    2364:	80 93 6c 00 	sts	0x006C, r24
	if(count == 1)
    2368:	80 91 6c 00 	lds	r24, 0x006C
    236c:	81 30       	cpi	r24, 0x01	; 1
    236e:	29 f4       	brne	.+10     	; 0x237a <func+0x26>
	{
		mtimer1_SendReading(0);
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <mtimer1_SendReading>
    2378:	28 c0       	rjmp	.+80     	; 0x23ca <func+0x76>
	}
	else if(count == 2)
    237a:	80 91 6c 00 	lds	r24, 0x006C
    237e:	82 30       	cpi	r24, 0x02	; 2
    2380:	59 f4       	brne	.+22     	; 0x2398 <func+0x44>
	{
		P_T = mtimer1_GetReading();
    2382:	0e 94 cd 10 	call	0x219a	; 0x219a <mtimer1_GetReading>
    2386:	90 93 6e 00 	sts	0x006E, r25
    238a:	80 93 6d 00 	sts	0x006D, r24
		mExInt_init(PIN_INT0, FALLING_EDGE);
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	61 e0       	ldi	r22, 0x01	; 1
    2392:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <mExInt_init>
    2396:	19 c0       	rjmp	.+50     	; 0x23ca <func+0x76>
	}
	else if (count == 3)
    2398:	80 91 6c 00 	lds	r24, 0x006C
    239c:	83 30       	cpi	r24, 0x03	; 3
    239e:	a9 f4       	brne	.+42     	; 0x23ca <func+0x76>
	{
		u16_t au16_data = mtimer1_GetReading();
    23a0:	0e 94 cd 10 	call	0x219a	; 0x219a <mtimer1_GetReading>
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
		T_ON = au16_data - P_T;
    23a8:	20 91 6d 00 	lds	r18, 0x006D
    23ac:	30 91 6e 00 	lds	r19, 0x006E
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	82 1b       	sub	r24, r18
    23b6:	93 0b       	sbc	r25, r19
    23b8:	90 93 70 00 	sts	0x0070, r25
    23bc:	80 93 6f 00 	sts	0x006F, r24
		mExInt_DisableInt(PIN_INT0);
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <mExInt_DisableInt>
		count = 0 ;
    23c6:	10 92 6c 00 	sts	0x006C, r1
	}
	return;
}
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <__prologue_saves__>:
    23d4:	2f 92       	push	r2
    23d6:	3f 92       	push	r3
    23d8:	4f 92       	push	r4
    23da:	5f 92       	push	r5
    23dc:	6f 92       	push	r6
    23de:	7f 92       	push	r7
    23e0:	8f 92       	push	r8
    23e2:	9f 92       	push	r9
    23e4:	af 92       	push	r10
    23e6:	bf 92       	push	r11
    23e8:	cf 92       	push	r12
    23ea:	df 92       	push	r13
    23ec:	ef 92       	push	r14
    23ee:	ff 92       	push	r15
    23f0:	0f 93       	push	r16
    23f2:	1f 93       	push	r17
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	ca 1b       	sub	r28, r26
    23fe:	db 0b       	sbc	r29, r27
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	09 94       	ijmp

0000240c <__epilogue_restores__>:
    240c:	2a 88       	ldd	r2, Y+18	; 0x12
    240e:	39 88       	ldd	r3, Y+17	; 0x11
    2410:	48 88       	ldd	r4, Y+16	; 0x10
    2412:	5f 84       	ldd	r5, Y+15	; 0x0f
    2414:	6e 84       	ldd	r6, Y+14	; 0x0e
    2416:	7d 84       	ldd	r7, Y+13	; 0x0d
    2418:	8c 84       	ldd	r8, Y+12	; 0x0c
    241a:	9b 84       	ldd	r9, Y+11	; 0x0b
    241c:	aa 84       	ldd	r10, Y+10	; 0x0a
    241e:	b9 84       	ldd	r11, Y+9	; 0x09
    2420:	c8 84       	ldd	r12, Y+8	; 0x08
    2422:	df 80       	ldd	r13, Y+7	; 0x07
    2424:	ee 80       	ldd	r14, Y+6	; 0x06
    2426:	fd 80       	ldd	r15, Y+5	; 0x05
    2428:	0c 81       	ldd	r16, Y+4	; 0x04
    242a:	1b 81       	ldd	r17, Y+3	; 0x03
    242c:	aa 81       	ldd	r26, Y+2	; 0x02
    242e:	b9 81       	ldd	r27, Y+1	; 0x01
    2430:	ce 0f       	add	r28, r30
    2432:	d1 1d       	adc	r29, r1
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	ed 01       	movw	r28, r26
    2440:	08 95       	ret

00002442 <_exit>:
    2442:	f8 94       	cli

00002444 <__stop_program>:
    2444:	ff cf       	rjmp	.-2      	; 0x2444 <__stop_program>
