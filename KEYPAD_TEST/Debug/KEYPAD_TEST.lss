
KEYPAD_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000778  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000778  000007ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000a38  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000004ee  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 a3 03 	call	0x746	; 0x746 <main>
  7a:	0c 94 ba 03 	jmp	0x774	; 0x774 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <hkpd_init>:
/******************************************/
/*				FUNCTIONS DIFINITIONS		*/
/*******************************************/

void hkpd_init(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	/*setting rows pins as i/p pullup*/
	mdio_setPinstatus(HKPD_PORT, (HKPD_ROW_0 | HKPD_ROW_1 | HKPD_ROW_2 | HKPD_ROW_3), INPUT_PULLUP);
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	6f e0       	ldi	r22, 0x0F	; 15
  8e:	43 e0       	ldi	r20, 0x03	; 3
  90:	0e 94 07 01 	call	0x20e	; 0x20e <mdio_setPinstatus>
	/*setting rows pins as o/p*/
	mdio_setPinstatus(HKPD_PORT, (HKPD_COLS_0 | HKPD_COLS_1 | HKPD_COLS_2 ), OUTPUT);
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	60 e7       	ldi	r22, 0x70	; 112
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	0e 94 07 01 	call	0x20e	; 0x20e <mdio_setPinstatus>
	/*setting columns pins to high*/
	mdio_setPinValue(HKPD_PORT, (HKPD_COLS_0 | HKPD_COLS_1 | HKPD_COLS_2 ),HIGH);
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	60 e7       	ldi	r22, 0x70	; 112
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	0e 94 2e 02 	call	0x45c	; 0x45c <mdio_setPinValue>
	/*return from this fun*/
	return;
}
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <hkpd_getPressKey>:

void hkpd_getPressKey(u8_t* pu8_key)
{
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	00 d0       	rcall	.+0      	; 0xb4 <hkpd_getPressKey+0x6>
  b4:	00 d0       	rcall	.+0      	; 0xb6 <hkpd_getPressKey+0x8>
  b6:	0f 92       	push	r0
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	9d 83       	std	Y+5, r25	; 0x05
  be:	8c 83       	std	Y+4, r24	; 0x04
	/*local variable used in rows looping operations*/
	u8_t au8_rowIterator = 0 ;
  c0:	1b 82       	std	Y+3, r1	; 0x03
	/*local variable used in cols looping operations*/
	u8_t au8_colIterator = 0;
  c2:	1a 82       	std	Y+2, r1	; 0x02
	/**/
	u8_t au8_keyFlag = 0;
  c4:	19 82       	std	Y+1, r1	; 0x01
	/*resetting the key value holder variables*/
	*pu8_key = 0;
  c6:	ec 81       	ldd	r30, Y+4	; 0x04
  c8:	fd 81       	ldd	r31, Y+5	; 0x05
  ca:	10 82       	st	Z, r1
	/**/
	for(au8_colIterator= 0 ;au8_colIterator < HKPD_COLS ;au8_colIterator++ )
  cc:	1a 82       	std	Y+2, r1	; 0x02
  ce:	57 c0       	rjmp	.+174    	; 0x17e <hkpd_getPressKey+0xd0>
	{
		/**/
		mdio_setPinValue(HKPD_PORT, (HKPD_COLS_0 << au8_colIterator), LOW);
  d0:	8a 81       	ldd	r24, Y+2	; 0x02
  d2:	28 2f       	mov	r18, r24
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <hkpd_getPressKey+0x32>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	2a 95       	dec	r18
  e2:	e2 f7       	brpl	.-8      	; 0xdc <hkpd_getPressKey+0x2e>
  e4:	98 2f       	mov	r25, r24
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	69 2f       	mov	r22, r25
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	0e 94 2e 02 	call	0x45c	; 0x45c <mdio_setPinValue>
		/*looping over keypad rows*/
		for(au8_rowIterator= 0; au8_rowIterator < HKPD_ROWS; au8_rowIterator++)
  f0:	1b 82       	std	Y+3, r1	; 0x03
  f2:	2c c0       	rjmp	.+88     	; 0x14c <hkpd_getPressKey+0x9e>
		{
			/**/
			if(mdio_getPinValue(HKPD_PORT, (HKPD_ROW_0 << au8_rowIterator)) == LOW)
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <hkpd_getPressKey+0x56>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	2a 95       	dec	r18
 106:	e2 f7       	brpl	.-8      	; 0x100 <hkpd_getPressKey+0x52>
 108:	98 2f       	mov	r25, r24
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	69 2f       	mov	r22, r25
 10e:	0e 94 41 03 	call	0x682	; 0x682 <mdio_getPinValue>
 112:	88 23       	and	r24, r24
 114:	c1 f4       	brne	.+48     	; 0x146 <hkpd_getPressKey+0x98>
			{
				/*report the pressed pin*/
				*pu8_key = gu8_kpdMap[au8_rowIterator][au8_colIterator];
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	28 2f       	mov	r18, r24
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	8a 81       	ldd	r24, Y+2	; 0x02
 11e:	48 2f       	mov	r20, r24
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	c9 01       	movw	r24, r18
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	82 0f       	add	r24, r18
 12a:	93 1f       	adc	r25, r19
 12c:	84 0f       	add	r24, r20
 12e:	95 1f       	adc	r25, r21
 130:	fc 01       	movw	r30, r24
 132:	e0 5a       	subi	r30, 0xA0	; 160
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	80 81       	ld	r24, Z
 138:	ec 81       	ldd	r30, Y+4	; 0x04
 13a:	fd 81       	ldd	r31, Y+5	; 0x05
 13c:	80 83       	st	Z, r24
				/**/
				au8_keyFlag++;
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	89 83       	std	Y+1, r24	; 0x01
 144:	06 c0       	rjmp	.+12     	; 0x152 <hkpd_getPressKey+0xa4>
	for(au8_colIterator= 0 ;au8_colIterator < HKPD_COLS ;au8_colIterator++ )
	{
		/**/
		mdio_setPinValue(HKPD_PORT, (HKPD_COLS_0 << au8_colIterator), LOW);
		/*looping over keypad rows*/
		for(au8_rowIterator= 0; au8_rowIterator < HKPD_ROWS; au8_rowIterator++)
 146:	8b 81       	ldd	r24, Y+3	; 0x03
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	8b 83       	std	Y+3, r24	; 0x03
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	84 30       	cpi	r24, 0x04	; 4
 150:	88 f2       	brcs	.-94     	; 0xf4 <hkpd_getPressKey+0x46>
			{
				/*do nothing*/
			}
		}
		/*setting specific col pin to high*/
		mdio_setPinValue(HKPD_PORT, (HKPD_COLS_0 << au8_colIterator), HIGH);
 152:	8a 81       	ldd	r24, Y+2	; 0x02
 154:	28 2f       	mov	r18, r24
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	80 e1       	ldi	r24, 0x10	; 16
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <hkpd_getPressKey+0xb4>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	2a 95       	dec	r18
 164:	e2 f7       	brpl	.-8      	; 0x15e <hkpd_getPressKey+0xb0>
 166:	98 2f       	mov	r25, r24
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	69 2f       	mov	r22, r25
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	0e 94 2e 02 	call	0x45c	; 0x45c <mdio_setPinValue>
		/**/
		if(au8_keyFlag)
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	88 23       	and	r24, r24
 176:	39 f4       	brne	.+14     	; 0x186 <hkpd_getPressKey+0xd8>
	/**/
	u8_t au8_keyFlag = 0;
	/*resetting the key value holder variables*/
	*pu8_key = 0;
	/**/
	for(au8_colIterator= 0 ;au8_colIterator < HKPD_COLS ;au8_colIterator++ )
 178:	8a 81       	ldd	r24, Y+2	; 0x02
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	8a 83       	std	Y+2, r24	; 0x02
 17e:	8a 81       	ldd	r24, Y+2	; 0x02
 180:	83 30       	cpi	r24, 0x03	; 3
 182:	08 f4       	brcc	.+2      	; 0x186 <hkpd_getPressKey+0xd8>
 184:	a5 cf       	rjmp	.-182    	; 0xd0 <hkpd_getPressKey+0x22>
			/*do nothing*/
		}
	}
	/*return from this fun*/
	return;
}
 186:	0f 90       	pop	r0
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	cf 91       	pop	r28
 192:	df 91       	pop	r29
 194:	08 95       	ret

00000196 <h7seg_init>:
/******************************************/
/*				FUNCTIONS DIFINITIONS		*/
/*******************************************/

void h7seg_init(void)
{
 196:	df 93       	push	r29
 198:	cf 93       	push	r28
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
	/*setting 7-segmnt pins status as output*/
	mdio_setPinstatus(H7SEG_PORT, (H7SEG_A | H7SEG_B | H7SEG_C | H7SEG_D), OUTPUT);
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	6f e0       	ldi	r22, 0x0F	; 15
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	0e 94 07 01 	call	0x20e	; 0x20e <mdio_setPinstatus>
	/*return from this fun*/
	return;
}
 1a8:	cf 91       	pop	r28
 1aa:	df 91       	pop	r29
 1ac:	08 95       	ret

000001ae <h7seg_displayNum>:

void h7seg_displayNum(u8_t au8_num)
{
 1ae:	df 93       	push	r29
 1b0:	cf 93       	push	r28
 1b2:	0f 92       	push	r0
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	89 83       	std	Y+1, r24	; 0x01
	/*setting binary num from DIO over pins*/
	mdio_setPinValue(H7SEG_PORT, H7SEG_A, GET_BIT(au8_num, 0));
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	98 2f       	mov	r25, r24
 1be:	91 70       	andi	r25, 0x01	; 1
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	49 2f       	mov	r20, r25
 1c6:	0e 94 2e 02 	call	0x45c	; 0x45c <mdio_setPinValue>
	mdio_setPinValue(H7SEG_PORT, H7SEG_B, GET_BIT(au8_num, 1));
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	86 95       	lsr	r24
 1ce:	98 2f       	mov	r25, r24
 1d0:	91 70       	andi	r25, 0x01	; 1
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	62 e0       	ldi	r22, 0x02	; 2
 1d6:	49 2f       	mov	r20, r25
 1d8:	0e 94 2e 02 	call	0x45c	; 0x45c <mdio_setPinValue>
	mdio_setPinValue(H7SEG_PORT, H7SEG_C, GET_BIT(au8_num, 2));
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	86 95       	lsr	r24
 1e0:	86 95       	lsr	r24
 1e2:	98 2f       	mov	r25, r24
 1e4:	91 70       	andi	r25, 0x01	; 1
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	64 e0       	ldi	r22, 0x04	; 4
 1ea:	49 2f       	mov	r20, r25
 1ec:	0e 94 2e 02 	call	0x45c	; 0x45c <mdio_setPinValue>
	mdio_setPinValue(H7SEG_PORT, H7SEG_D, GET_BIT(au8_num, 3));
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	86 95       	lsr	r24
 1f4:	86 95       	lsr	r24
 1f6:	86 95       	lsr	r24
 1f8:	98 2f       	mov	r25, r24
 1fa:	91 70       	andi	r25, 0x01	; 1
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	68 e0       	ldi	r22, 0x08	; 8
 200:	49 2f       	mov	r20, r25
 202:	0e 94 2e 02 	call	0x45c	; 0x45c <mdio_setPinValue>
	/*return from this fun*/
	return;
}
 206:	0f 90       	pop	r0
 208:	cf 91       	pop	r28
 20a:	df 91       	pop	r29
 20c:	08 95       	ret

0000020e <mdio_setPinstatus>:
#include "MDIO_interface.h"
/******************************************/
/*				FUNCTIONS DIFINITIONS		*/
/*******************************************/
void mdio_setPinstatus(u8_t au8_port, u8_t au8_pin, u8_t au8_status )
{
 20e:	df 93       	push	r29
 210:	cf 93       	push	r28
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	2d 97       	sbiw	r28, 0x0d	; 13
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
 222:	89 83       	std	Y+1, r24	; 0x01
 224:	6a 83       	std	Y+2, r22	; 0x02
 226:	4b 83       	std	Y+3, r20	; 0x03
	/*switching over DIO port*/
	switch(au8_port)
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	3d 87       	std	Y+13, r19	; 0x0d
 230:	2c 87       	std	Y+12, r18	; 0x0c
 232:	8c 85       	ldd	r24, Y+12	; 0x0c
 234:	9d 85       	ldd	r25, Y+13	; 0x0d
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	91 05       	cpc	r25, r1
 23a:	09 f4       	brne	.+2      	; 0x23e <mdio_setPinstatus+0x30>
 23c:	54 c0       	rjmp	.+168    	; 0x2e6 <mdio_setPinstatus+0xd8>
 23e:	2c 85       	ldd	r18, Y+12	; 0x0c
 240:	3d 85       	ldd	r19, Y+13	; 0x0d
 242:	23 30       	cpi	r18, 0x03	; 3
 244:	31 05       	cpc	r19, r1
 246:	34 f4       	brge	.+12     	; 0x254 <mdio_setPinstatus+0x46>
 248:	8c 85       	ldd	r24, Y+12	; 0x0c
 24a:	9d 85       	ldd	r25, Y+13	; 0x0d
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	91 05       	cpc	r25, r1
 250:	71 f0       	breq	.+28     	; 0x26e <mdio_setPinstatus+0x60>
 252:	fb c0       	rjmp	.+502    	; 0x44a <mdio_setPinstatus+0x23c>
 254:	2c 85       	ldd	r18, Y+12	; 0x0c
 256:	3d 85       	ldd	r19, Y+13	; 0x0d
 258:	23 30       	cpi	r18, 0x03	; 3
 25a:	31 05       	cpc	r19, r1
 25c:	09 f4       	brne	.+2      	; 0x260 <mdio_setPinstatus+0x52>
 25e:	7f c0       	rjmp	.+254    	; 0x35e <mdio_setPinstatus+0x150>
 260:	8c 85       	ldd	r24, Y+12	; 0x0c
 262:	9d 85       	ldd	r25, Y+13	; 0x0d
 264:	84 30       	cpi	r24, 0x04	; 4
 266:	91 05       	cpc	r25, r1
 268:	09 f4       	brne	.+2      	; 0x26c <mdio_setPinstatus+0x5e>
 26a:	b5 c0       	rjmp	.+362    	; 0x3d6 <mdio_setPinstatus+0x1c8>
 26c:	ee c0       	rjmp	.+476    	; 0x44a <mdio_setPinstatus+0x23c>
	{
	/*IN case of choosing port A*/
	case PORTA:
			/*switching over pin status*/
			switch(au8_status)
 26e:	8b 81       	ldd	r24, Y+3	; 0x03
 270:	28 2f       	mov	r18, r24
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	3b 87       	std	Y+11, r19	; 0x0b
 276:	2a 87       	std	Y+10, r18	; 0x0a
 278:	8a 85       	ldd	r24, Y+10	; 0x0a
 27a:	9b 85       	ldd	r25, Y+11	; 0x0b
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	91 05       	cpc	r25, r1
 280:	a1 f0       	breq	.+40     	; 0x2aa <mdio_setPinstatus+0x9c>
 282:	2a 85       	ldd	r18, Y+10	; 0x0a
 284:	3b 85       	ldd	r19, Y+11	; 0x0b
 286:	23 30       	cpi	r18, 0x03	; 3
 288:	31 05       	cpc	r19, r1
 28a:	d1 f0       	breq	.+52     	; 0x2c0 <mdio_setPinstatus+0xb2>
 28c:	8a 85       	ldd	r24, Y+10	; 0x0a
 28e:	9b 85       	ldd	r25, Y+11	; 0x0b
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	91 05       	cpc	r25, r1
 294:	09 f0       	breq	.+2      	; 0x298 <mdio_setPinstatus+0x8a>
 296:	d9 c0       	rjmp	.+434    	; 0x44a <mdio_setPinstatus+0x23c>
			{
				/*In case of choosing output*/
				case OUTPUT:
					/*Setting specific DIO pins to output*/
					MDIO_DDRA |= au8_pin;
 298:	aa e3       	ldi	r26, 0x3A	; 58
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	ea e3       	ldi	r30, 0x3A	; 58
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	90 81       	ld	r25, Z
 2a2:	8a 81       	ldd	r24, Y+2	; 0x02
 2a4:	89 2b       	or	r24, r25
 2a6:	8c 93       	st	X, r24
 2a8:	d0 c0       	rjmp	.+416    	; 0x44a <mdio_setPinstatus+0x23c>
					/*Break from this case*/
					break;
				/*In case of choosing input floating*/
				case INPUT_FLOAT:
					/*Setting specific DIO pins to input floating*/
					MDIO_DDRA &= ~au8_pin;
 2aa:	aa e3       	ldi	r26, 0x3A	; 58
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	ea e3       	ldi	r30, 0x3A	; 58
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	98 2f       	mov	r25, r24
 2b6:	8a 81       	ldd	r24, Y+2	; 0x02
 2b8:	80 95       	com	r24
 2ba:	89 23       	and	r24, r25
 2bc:	8c 93       	st	X, r24
 2be:	c5 c0       	rjmp	.+394    	; 0x44a <mdio_setPinstatus+0x23c>
					/*Break from this case*/
					break;
				/*In case of choosing input pull-up*/
				case INPUT_PULLUP:
					/*Setting specific DIO pins to input floating*/
					MDIO_DDRA &= ~au8_pin;
 2c0:	aa e3       	ldi	r26, 0x3A	; 58
 2c2:	b0 e0       	ldi	r27, 0x00	; 0
 2c4:	ea e3       	ldi	r30, 0x3A	; 58
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	98 2f       	mov	r25, r24
 2cc:	8a 81       	ldd	r24, Y+2	; 0x02
 2ce:	80 95       	com	r24
 2d0:	89 23       	and	r24, r25
 2d2:	8c 93       	st	X, r24
					/*Activating specific DIO input pins pull-up resistor*/
					MDIO_PORTA |= au8_pin;
 2d4:	ab e3       	ldi	r26, 0x3B	; 59
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	eb e3       	ldi	r30, 0x3B	; 59
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	90 81       	ld	r25, Z
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	89 2b       	or	r24, r25
 2e2:	8c 93       	st	X, r24
 2e4:	b2 c0       	rjmp	.+356    	; 0x44a <mdio_setPinstatus+0x23c>
		break;

	/*IN case of choosing port B*/
	case PORTB:
		/*switching over pin status*/
		switch(au8_status)
 2e6:	8b 81       	ldd	r24, Y+3	; 0x03
 2e8:	28 2f       	mov	r18, r24
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	39 87       	std	Y+9, r19	; 0x09
 2ee:	28 87       	std	Y+8, r18	; 0x08
 2f0:	88 85       	ldd	r24, Y+8	; 0x08
 2f2:	99 85       	ldd	r25, Y+9	; 0x09
 2f4:	82 30       	cpi	r24, 0x02	; 2
 2f6:	91 05       	cpc	r25, r1
 2f8:	a1 f0       	breq	.+40     	; 0x322 <mdio_setPinstatus+0x114>
 2fa:	28 85       	ldd	r18, Y+8	; 0x08
 2fc:	39 85       	ldd	r19, Y+9	; 0x09
 2fe:	23 30       	cpi	r18, 0x03	; 3
 300:	31 05       	cpc	r19, r1
 302:	d1 f0       	breq	.+52     	; 0x338 <mdio_setPinstatus+0x12a>
 304:	88 85       	ldd	r24, Y+8	; 0x08
 306:	99 85       	ldd	r25, Y+9	; 0x09
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	91 05       	cpc	r25, r1
 30c:	09 f0       	breq	.+2      	; 0x310 <mdio_setPinstatus+0x102>
 30e:	9d c0       	rjmp	.+314    	; 0x44a <mdio_setPinstatus+0x23c>
		{
			/*In case of choosing output*/
			case OUTPUT:
				/*Setting specific DIO pins to output*/
				MDIO_DDRB |= au8_pin;
 310:	a7 e3       	ldi	r26, 0x37	; 55
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	e7 e3       	ldi	r30, 0x37	; 55
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	90 81       	ld	r25, Z
 31a:	8a 81       	ldd	r24, Y+2	; 0x02
 31c:	89 2b       	or	r24, r25
 31e:	8c 93       	st	X, r24
 320:	94 c0       	rjmp	.+296    	; 0x44a <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
			/*In case of choosing input floating*/
			case INPUT_FLOAT:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRB &= ~au8_pin;
 322:	a7 e3       	ldi	r26, 0x37	; 55
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	e7 e3       	ldi	r30, 0x37	; 55
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	98 2f       	mov	r25, r24
 32e:	8a 81       	ldd	r24, Y+2	; 0x02
 330:	80 95       	com	r24
 332:	89 23       	and	r24, r25
 334:	8c 93       	st	X, r24
 336:	89 c0       	rjmp	.+274    	; 0x44a <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
			/*In case of choosing input pull-up*/
			case INPUT_PULLUP:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRB &= ~au8_pin;
 338:	a7 e3       	ldi	r26, 0x37	; 55
 33a:	b0 e0       	ldi	r27, 0x00	; 0
 33c:	e7 e3       	ldi	r30, 0x37	; 55
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	98 2f       	mov	r25, r24
 344:	8a 81       	ldd	r24, Y+2	; 0x02
 346:	80 95       	com	r24
 348:	89 23       	and	r24, r25
 34a:	8c 93       	st	X, r24
				/*Activating specific DIO input pins pull-up resistor*/
				MDIO_PORTB |= au8_pin;
 34c:	a8 e3       	ldi	r26, 0x38	; 56
 34e:	b0 e0       	ldi	r27, 0x00	; 0
 350:	e8 e3       	ldi	r30, 0x38	; 56
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	90 81       	ld	r25, Z
 356:	8a 81       	ldd	r24, Y+2	; 0x02
 358:	89 2b       	or	r24, r25
 35a:	8c 93       	st	X, r24
 35c:	76 c0       	rjmp	.+236    	; 0x44a <mdio_setPinstatus+0x23c>
		break;

	/*IN case of choosing port C*/
	case PORTC:
		/*switching over pin status*/
		switch(au8_status)
 35e:	8b 81       	ldd	r24, Y+3	; 0x03
 360:	28 2f       	mov	r18, r24
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	3f 83       	std	Y+7, r19	; 0x07
 366:	2e 83       	std	Y+6, r18	; 0x06
 368:	8e 81       	ldd	r24, Y+6	; 0x06
 36a:	9f 81       	ldd	r25, Y+7	; 0x07
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	91 05       	cpc	r25, r1
 370:	a1 f0       	breq	.+40     	; 0x39a <mdio_setPinstatus+0x18c>
 372:	2e 81       	ldd	r18, Y+6	; 0x06
 374:	3f 81       	ldd	r19, Y+7	; 0x07
 376:	23 30       	cpi	r18, 0x03	; 3
 378:	31 05       	cpc	r19, r1
 37a:	d1 f0       	breq	.+52     	; 0x3b0 <mdio_setPinstatus+0x1a2>
 37c:	8e 81       	ldd	r24, Y+6	; 0x06
 37e:	9f 81       	ldd	r25, Y+7	; 0x07
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	91 05       	cpc	r25, r1
 384:	09 f0       	breq	.+2      	; 0x388 <mdio_setPinstatus+0x17a>
 386:	61 c0       	rjmp	.+194    	; 0x44a <mdio_setPinstatus+0x23c>
		{
			/*In case of choosing output*/
			case OUTPUT:
				/*Setting specific DIO pins to output*/
				MDIO_DDRC |= au8_pin;
 388:	a4 e3       	ldi	r26, 0x34	; 52
 38a:	b0 e0       	ldi	r27, 0x00	; 0
 38c:	e4 e3       	ldi	r30, 0x34	; 52
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	90 81       	ld	r25, Z
 392:	8a 81       	ldd	r24, Y+2	; 0x02
 394:	89 2b       	or	r24, r25
 396:	8c 93       	st	X, r24
 398:	58 c0       	rjmp	.+176    	; 0x44a <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
			/*In case of choosing input floating*/
			case INPUT_FLOAT:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRC &= ~au8_pin;
 39a:	a4 e3       	ldi	r26, 0x34	; 52
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	e4 e3       	ldi	r30, 0x34	; 52
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	98 2f       	mov	r25, r24
 3a6:	8a 81       	ldd	r24, Y+2	; 0x02
 3a8:	80 95       	com	r24
 3aa:	89 23       	and	r24, r25
 3ac:	8c 93       	st	X, r24
 3ae:	4d c0       	rjmp	.+154    	; 0x44a <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
				/*In case of choosing input pull-up*/
			case INPUT_PULLUP:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRC &= ~au8_pin;
 3b0:	a4 e3       	ldi	r26, 0x34	; 52
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	e4 e3       	ldi	r30, 0x34	; 52
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	98 2f       	mov	r25, r24
 3bc:	8a 81       	ldd	r24, Y+2	; 0x02
 3be:	80 95       	com	r24
 3c0:	89 23       	and	r24, r25
 3c2:	8c 93       	st	X, r24
				/*Activating specific DIO input pins pull-up resistor*/
				MDIO_PORTC |= au8_pin;
 3c4:	a5 e3       	ldi	r26, 0x35	; 53
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	e5 e3       	ldi	r30, 0x35	; 53
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	90 81       	ld	r25, Z
 3ce:	8a 81       	ldd	r24, Y+2	; 0x02
 3d0:	89 2b       	or	r24, r25
 3d2:	8c 93       	st	X, r24
 3d4:	3a c0       	rjmp	.+116    	; 0x44a <mdio_setPinstatus+0x23c>
		}
		break;
	/*IN case of choosing port D*/
	case PORTD:
		/*switching over pin status*/
		switch(au8_status)
 3d6:	8b 81       	ldd	r24, Y+3	; 0x03
 3d8:	28 2f       	mov	r18, r24
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	3d 83       	std	Y+5, r19	; 0x05
 3de:	2c 83       	std	Y+4, r18	; 0x04
 3e0:	8c 81       	ldd	r24, Y+4	; 0x04
 3e2:	9d 81       	ldd	r25, Y+5	; 0x05
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	91 05       	cpc	r25, r1
 3e8:	99 f0       	breq	.+38     	; 0x410 <mdio_setPinstatus+0x202>
 3ea:	2c 81       	ldd	r18, Y+4	; 0x04
 3ec:	3d 81       	ldd	r19, Y+5	; 0x05
 3ee:	23 30       	cpi	r18, 0x03	; 3
 3f0:	31 05       	cpc	r19, r1
 3f2:	c9 f0       	breq	.+50     	; 0x426 <mdio_setPinstatus+0x218>
 3f4:	8c 81       	ldd	r24, Y+4	; 0x04
 3f6:	9d 81       	ldd	r25, Y+5	; 0x05
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	91 05       	cpc	r25, r1
 3fc:	31 f5       	brne	.+76     	; 0x44a <mdio_setPinstatus+0x23c>
		{
			/*In case of choosing output*/
			case OUTPUT:
				/*Setting specific DIO pins to output*/
				MDIO_DDRD |= au8_pin;
 3fe:	a1 e3       	ldi	r26, 0x31	; 49
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	e1 e3       	ldi	r30, 0x31	; 49
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	90 81       	ld	r25, Z
 408:	8a 81       	ldd	r24, Y+2	; 0x02
 40a:	89 2b       	or	r24, r25
 40c:	8c 93       	st	X, r24
 40e:	1d c0       	rjmp	.+58     	; 0x44a <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
			/*In case of choosing input floating*/
			case INPUT_FLOAT:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRD &= ~au8_pin;
 410:	a1 e3       	ldi	r26, 0x31	; 49
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	e1 e3       	ldi	r30, 0x31	; 49
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	98 2f       	mov	r25, r24
 41c:	8a 81       	ldd	r24, Y+2	; 0x02
 41e:	80 95       	com	r24
 420:	89 23       	and	r24, r25
 422:	8c 93       	st	X, r24
 424:	12 c0       	rjmp	.+36     	; 0x44a <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
				/*In case of choosing input pull-up*/
			case INPUT_PULLUP:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRD &= ~au8_pin;
 426:	a1 e3       	ldi	r26, 0x31	; 49
 428:	b0 e0       	ldi	r27, 0x00	; 0
 42a:	e1 e3       	ldi	r30, 0x31	; 49
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	98 2f       	mov	r25, r24
 432:	8a 81       	ldd	r24, Y+2	; 0x02
 434:	80 95       	com	r24
 436:	89 23       	and	r24, r25
 438:	8c 93       	st	X, r24
				/*Activating specific DIO input pins pull-up resistor*/
				MDIO_PORTD |= au8_pin;
 43a:	a2 e3       	ldi	r26, 0x32	; 50
 43c:	b0 e0       	ldi	r27, 0x00	; 0
 43e:	e2 e3       	ldi	r30, 0x32	; 50
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	90 81       	ld	r25, Z
 444:	8a 81       	ldd	r24, Y+2	; 0x02
 446:	89 2b       	or	r24, r25
 448:	8c 93       	st	X, r24
		default:
			break;
	}
	/*Return from this function*/
	return;
}
 44a:	2d 96       	adiw	r28, 0x0d	; 13
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	cf 91       	pop	r28
 458:	df 91       	pop	r29
 45a:	08 95       	ret

0000045c <mdio_setPinValue>:


void mdio_setPinValue(u8_t au8_port, u8_t au8_pin, u8_t au8_Value )
{
 45c:	df 93       	push	r29
 45e:	cf 93       	push	r28
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
 464:	2d 97       	sbiw	r28, 0x0d	; 13
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
 470:	89 83       	std	Y+1, r24	; 0x01
 472:	6a 83       	std	Y+2, r22	; 0x02
 474:	4b 83       	std	Y+3, r20	; 0x03
	/*switching over DIO Ports*/
	switch(au8_port)
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	28 2f       	mov	r18, r24
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	3d 87       	std	Y+13, r19	; 0x0d
 47e:	2c 87       	std	Y+12, r18	; 0x0c
 480:	8c 85       	ldd	r24, Y+12	; 0x0c
 482:	9d 85       	ldd	r25, Y+13	; 0x0d
 484:	82 30       	cpi	r24, 0x02	; 2
 486:	91 05       	cpc	r25, r1
 488:	d9 f1       	breq	.+118    	; 0x500 <mdio_setPinValue+0xa4>
 48a:	2c 85       	ldd	r18, Y+12	; 0x0c
 48c:	3d 85       	ldd	r19, Y+13	; 0x0d
 48e:	23 30       	cpi	r18, 0x03	; 3
 490:	31 05       	cpc	r19, r1
 492:	34 f4       	brge	.+12     	; 0x4a0 <mdio_setPinValue+0x44>
 494:	8c 85       	ldd	r24, Y+12	; 0x0c
 496:	9d 85       	ldd	r25, Y+13	; 0x0d
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	91 05       	cpc	r25, r1
 49c:	71 f0       	breq	.+28     	; 0x4ba <mdio_setPinValue+0x5e>
 49e:	96 c0       	rjmp	.+300    	; 0x5cc <mdio_setPinValue+0x170>
 4a0:	2c 85       	ldd	r18, Y+12	; 0x0c
 4a2:	3d 85       	ldd	r19, Y+13	; 0x0d
 4a4:	23 30       	cpi	r18, 0x03	; 3
 4a6:	31 05       	cpc	r19, r1
 4a8:	09 f4       	brne	.+2      	; 0x4ac <mdio_setPinValue+0x50>
 4aa:	4d c0       	rjmp	.+154    	; 0x546 <mdio_setPinValue+0xea>
 4ac:	8c 85       	ldd	r24, Y+12	; 0x0c
 4ae:	9d 85       	ldd	r25, Y+13	; 0x0d
 4b0:	84 30       	cpi	r24, 0x04	; 4
 4b2:	91 05       	cpc	r25, r1
 4b4:	09 f4       	brne	.+2      	; 0x4b8 <mdio_setPinValue+0x5c>
 4b6:	69 c0       	rjmp	.+210    	; 0x58a <mdio_setPinValue+0x12e>
 4b8:	89 c0       	rjmp	.+274    	; 0x5cc <mdio_setPinValue+0x170>
	{
	/*IN CASE OF CHOOSING PORT A*/
	case PORTA:
		/*switching over pin value*/
		switch(au8_Value)
 4ba:	8b 81       	ldd	r24, Y+3	; 0x03
 4bc:	28 2f       	mov	r18, r24
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	3b 87       	std	Y+11, r19	; 0x0b
 4c2:	2a 87       	std	Y+10, r18	; 0x0a
 4c4:	8a 85       	ldd	r24, Y+10	; 0x0a
 4c6:	9b 85       	ldd	r25, Y+11	; 0x0b
 4c8:	00 97       	sbiw	r24, 0x00	; 0
 4ca:	79 f0       	breq	.+30     	; 0x4ea <mdio_setPinValue+0x8e>
 4cc:	2a 85       	ldd	r18, Y+10	; 0x0a
 4ce:	3b 85       	ldd	r19, Y+11	; 0x0b
 4d0:	21 30       	cpi	r18, 0x01	; 1
 4d2:	31 05       	cpc	r19, r1
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <mdio_setPinValue+0x7c>
 4d6:	7a c0       	rjmp	.+244    	; 0x5cc <mdio_setPinValue+0x170>
		{
		/*in case of choosing high*/
		case HIGH:
			/*setting specific DIO Pins to high */
			MDIO_PORTA |= au8_pin;
 4d8:	ab e3       	ldi	r26, 0x3B	; 59
 4da:	b0 e0       	ldi	r27, 0x00	; 0
 4dc:	eb e3       	ldi	r30, 0x3B	; 59
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	90 81       	ld	r25, Z
 4e2:	8a 81       	ldd	r24, Y+2	; 0x02
 4e4:	89 2b       	or	r24, r25
 4e6:	8c 93       	st	X, r24
 4e8:	71 c0       	rjmp	.+226    	; 0x5cc <mdio_setPinValue+0x170>
			/*break from this case*/
			break;
		/*in case of choosing low*/
		case LOW:
			/*setting specific DIO pin to low*/
			MDIO_PORTA &= ~ au8_pin;
 4ea:	ab e3       	ldi	r26, 0x3B	; 59
 4ec:	b0 e0       	ldi	r27, 0x00	; 0
 4ee:	eb e3       	ldi	r30, 0x3B	; 59
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	98 2f       	mov	r25, r24
 4f6:	8a 81       	ldd	r24, Y+2	; 0x02
 4f8:	80 95       	com	r24
 4fa:	89 23       	and	r24, r25
 4fc:	8c 93       	st	X, r24
 4fe:	66 c0       	rjmp	.+204    	; 0x5cc <mdio_setPinValue+0x170>
		/*break from this case*/
		break;
	/*IN CASE OF CHOOSING PORT B*/
	case PORTB:
		/*switching over pin value*/
		switch(au8_Value)
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	28 2f       	mov	r18, r24
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	39 87       	std	Y+9, r19	; 0x09
 508:	28 87       	std	Y+8, r18	; 0x08
 50a:	88 85       	ldd	r24, Y+8	; 0x08
 50c:	99 85       	ldd	r25, Y+9	; 0x09
 50e:	00 97       	sbiw	r24, 0x00	; 0
 510:	79 f0       	breq	.+30     	; 0x530 <mdio_setPinValue+0xd4>
 512:	28 85       	ldd	r18, Y+8	; 0x08
 514:	39 85       	ldd	r19, Y+9	; 0x09
 516:	21 30       	cpi	r18, 0x01	; 1
 518:	31 05       	cpc	r19, r1
 51a:	09 f0       	breq	.+2      	; 0x51e <mdio_setPinValue+0xc2>
 51c:	57 c0       	rjmp	.+174    	; 0x5cc <mdio_setPinValue+0x170>
		{
		/*in case of choosing high*/
		case HIGH:
			/*setting specific DIO Pins to high */
			MDIO_PORTB |= au8_pin;
 51e:	a8 e3       	ldi	r26, 0x38	; 56
 520:	b0 e0       	ldi	r27, 0x00	; 0
 522:	e8 e3       	ldi	r30, 0x38	; 56
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	90 81       	ld	r25, Z
 528:	8a 81       	ldd	r24, Y+2	; 0x02
 52a:	89 2b       	or	r24, r25
 52c:	8c 93       	st	X, r24
 52e:	4e c0       	rjmp	.+156    	; 0x5cc <mdio_setPinValue+0x170>
			/*break from this case*/
			break;
		/*in case of choosing low*/
		case LOW:
			/*setting specific DIO pin to low*/
			MDIO_PORTB &= ~ au8_pin;
 530:	a8 e3       	ldi	r26, 0x38	; 56
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	e8 e3       	ldi	r30, 0x38	; 56
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	98 2f       	mov	r25, r24
 53c:	8a 81       	ldd	r24, Y+2	; 0x02
 53e:	80 95       	com	r24
 540:	89 23       	and	r24, r25
 542:	8c 93       	st	X, r24
 544:	43 c0       	rjmp	.+134    	; 0x5cc <mdio_setPinValue+0x170>
		/*break from this case*/
		break;
	/*IN CASE OF CHOOSING PORT C*/
	case PORTC:
		/*switching over pin value*/
		switch(au8_Value)
 546:	8b 81       	ldd	r24, Y+3	; 0x03
 548:	28 2f       	mov	r18, r24
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	3f 83       	std	Y+7, r19	; 0x07
 54e:	2e 83       	std	Y+6, r18	; 0x06
 550:	8e 81       	ldd	r24, Y+6	; 0x06
 552:	9f 81       	ldd	r25, Y+7	; 0x07
 554:	00 97       	sbiw	r24, 0x00	; 0
 556:	71 f0       	breq	.+28     	; 0x574 <mdio_setPinValue+0x118>
 558:	2e 81       	ldd	r18, Y+6	; 0x06
 55a:	3f 81       	ldd	r19, Y+7	; 0x07
 55c:	21 30       	cpi	r18, 0x01	; 1
 55e:	31 05       	cpc	r19, r1
 560:	a9 f5       	brne	.+106    	; 0x5cc <mdio_setPinValue+0x170>
		{
		/*in case of choosing high*/
		case HIGH:
			/*setting specific DIO Pins to high */
			MDIO_PORTC |= au8_pin;
 562:	a5 e3       	ldi	r26, 0x35	; 53
 564:	b0 e0       	ldi	r27, 0x00	; 0
 566:	e5 e3       	ldi	r30, 0x35	; 53
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	90 81       	ld	r25, Z
 56c:	8a 81       	ldd	r24, Y+2	; 0x02
 56e:	89 2b       	or	r24, r25
 570:	8c 93       	st	X, r24
 572:	2c c0       	rjmp	.+88     	; 0x5cc <mdio_setPinValue+0x170>
			/*break from this case*/
			break;
		/*in case of choosing low*/
		case LOW:
			/*setting specific DIO pin to low*/
			MDIO_PORTC &= ~ au8_pin;
 574:	a5 e3       	ldi	r26, 0x35	; 53
 576:	b0 e0       	ldi	r27, 0x00	; 0
 578:	e5 e3       	ldi	r30, 0x35	; 53
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	80 81       	ld	r24, Z
 57e:	98 2f       	mov	r25, r24
 580:	8a 81       	ldd	r24, Y+2	; 0x02
 582:	80 95       	com	r24
 584:	89 23       	and	r24, r25
 586:	8c 93       	st	X, r24
 588:	21 c0       	rjmp	.+66     	; 0x5cc <mdio_setPinValue+0x170>
		/*break from this case*/
		break;
	/*IN CASE OF CHOOSING PORT D*/
	case PORTD:
		/*switching over pin value*/
		switch(au8_Value)
 58a:	8b 81       	ldd	r24, Y+3	; 0x03
 58c:	28 2f       	mov	r18, r24
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	3d 83       	std	Y+5, r19	; 0x05
 592:	2c 83       	std	Y+4, r18	; 0x04
 594:	8c 81       	ldd	r24, Y+4	; 0x04
 596:	9d 81       	ldd	r25, Y+5	; 0x05
 598:	00 97       	sbiw	r24, 0x00	; 0
 59a:	71 f0       	breq	.+28     	; 0x5b8 <mdio_setPinValue+0x15c>
 59c:	2c 81       	ldd	r18, Y+4	; 0x04
 59e:	3d 81       	ldd	r19, Y+5	; 0x05
 5a0:	21 30       	cpi	r18, 0x01	; 1
 5a2:	31 05       	cpc	r19, r1
 5a4:	99 f4       	brne	.+38     	; 0x5cc <mdio_setPinValue+0x170>
		{
		/*in case of choosing high*/
		case HIGH:
			/*setting specific DIO Pins to high */
			MDIO_PORTD |= au8_pin;
 5a6:	a2 e3       	ldi	r26, 0x32	; 50
 5a8:	b0 e0       	ldi	r27, 0x00	; 0
 5aa:	e2 e3       	ldi	r30, 0x32	; 50
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	90 81       	ld	r25, Z
 5b0:	8a 81       	ldd	r24, Y+2	; 0x02
 5b2:	89 2b       	or	r24, r25
 5b4:	8c 93       	st	X, r24
 5b6:	0a c0       	rjmp	.+20     	; 0x5cc <mdio_setPinValue+0x170>
			/*break from this case*/
			break;
		/*in case of choosing low*/
		case LOW:
			/*setting specific DIO pin to low*/
			MDIO_PORTD &= ~ au8_pin;
 5b8:	a2 e3       	ldi	r26, 0x32	; 50
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
 5bc:	e2 e3       	ldi	r30, 0x32	; 50
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	98 2f       	mov	r25, r24
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
 5c6:	80 95       	com	r24
 5c8:	89 23       	and	r24, r25
 5ca:	8c 93       	st	X, r24
		/*break from this case*/
		break;
	}
	/*Return from this function*/
	return;
}
 5cc:	2d 96       	adiw	r28, 0x0d	; 13
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	f8 94       	cli
 5d2:	de bf       	out	0x3e, r29	; 62
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	cd bf       	out	0x3d, r28	; 61
 5d8:	cf 91       	pop	r28
 5da:	df 91       	pop	r29
 5dc:	08 95       	ret

000005de <mdio_togglePinValue>:


void mdio_togglePinValue(u8_t au8_port, u8_t au8_pin )
{
 5de:	df 93       	push	r29
 5e0:	cf 93       	push	r28
 5e2:	00 d0       	rcall	.+0      	; 0x5e4 <mdio_togglePinValue+0x6>
 5e4:	00 d0       	rcall	.+0      	; 0x5e6 <mdio_togglePinValue+0x8>
 5e6:	cd b7       	in	r28, 0x3d	; 61
 5e8:	de b7       	in	r29, 0x3e	; 62
 5ea:	89 83       	std	Y+1, r24	; 0x01
 5ec:	6a 83       	std	Y+2, r22	; 0x02
	/*switching over DIO PORTS*/
	switch(au8_port)
 5ee:	89 81       	ldd	r24, Y+1	; 0x01
 5f0:	28 2f       	mov	r18, r24
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	3c 83       	std	Y+4, r19	; 0x04
 5f6:	2b 83       	std	Y+3, r18	; 0x03
 5f8:	8b 81       	ldd	r24, Y+3	; 0x03
 5fa:	9c 81       	ldd	r25, Y+4	; 0x04
 5fc:	82 30       	cpi	r24, 0x02	; 2
 5fe:	91 05       	cpc	r25, r1
 600:	f9 f0       	breq	.+62     	; 0x640 <mdio_togglePinValue+0x62>
 602:	2b 81       	ldd	r18, Y+3	; 0x03
 604:	3c 81       	ldd	r19, Y+4	; 0x04
 606:	23 30       	cpi	r18, 0x03	; 3
 608:	31 05       	cpc	r19, r1
 60a:	34 f4       	brge	.+12     	; 0x618 <mdio_togglePinValue+0x3a>
 60c:	8b 81       	ldd	r24, Y+3	; 0x03
 60e:	9c 81       	ldd	r25, Y+4	; 0x04
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	91 05       	cpc	r25, r1
 614:	61 f0       	breq	.+24     	; 0x62e <mdio_togglePinValue+0x50>
 616:	2e c0       	rjmp	.+92     	; 0x674 <mdio_togglePinValue+0x96>
 618:	2b 81       	ldd	r18, Y+3	; 0x03
 61a:	3c 81       	ldd	r19, Y+4	; 0x04
 61c:	23 30       	cpi	r18, 0x03	; 3
 61e:	31 05       	cpc	r19, r1
 620:	c1 f0       	breq	.+48     	; 0x652 <mdio_togglePinValue+0x74>
 622:	8b 81       	ldd	r24, Y+3	; 0x03
 624:	9c 81       	ldd	r25, Y+4	; 0x04
 626:	84 30       	cpi	r24, 0x04	; 4
 628:	91 05       	cpc	r25, r1
 62a:	e1 f0       	breq	.+56     	; 0x664 <mdio_togglePinValue+0x86>
 62c:	23 c0       	rjmp	.+70     	; 0x674 <mdio_togglePinValue+0x96>
	{
	/*in case of choosing PORTA*/
	case PORTA:
		/*toggling specific DIO pin*/
		MDIO_PORTA |= au8_pin;
 62e:	ab e3       	ldi	r26, 0x3B	; 59
 630:	b0 e0       	ldi	r27, 0x00	; 0
 632:	eb e3       	ldi	r30, 0x3B	; 59
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	90 81       	ld	r25, Z
 638:	8a 81       	ldd	r24, Y+2	; 0x02
 63a:	89 2b       	or	r24, r25
 63c:	8c 93       	st	X, r24
 63e:	1a c0       	rjmp	.+52     	; 0x674 <mdio_togglePinValue+0x96>
		/*break from this case*/
		break;
	/*in case of choosing PORTB*/
	case PORTB:
		/*toggling specific DIO pin*/
		MDIO_PORTB |= au8_pin;
 640:	a8 e3       	ldi	r26, 0x38	; 56
 642:	b0 e0       	ldi	r27, 0x00	; 0
 644:	e8 e3       	ldi	r30, 0x38	; 56
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	90 81       	ld	r25, Z
 64a:	8a 81       	ldd	r24, Y+2	; 0x02
 64c:	89 2b       	or	r24, r25
 64e:	8c 93       	st	X, r24
 650:	11 c0       	rjmp	.+34     	; 0x674 <mdio_togglePinValue+0x96>
		/*break from this case*/
		break;
	/*in case of choosing PORTB*/
	case PORTC:
		/*toggling specific DIO pin*/
		MDIO_PORTC |= au8_pin;
 652:	a5 e3       	ldi	r26, 0x35	; 53
 654:	b0 e0       	ldi	r27, 0x00	; 0
 656:	e5 e3       	ldi	r30, 0x35	; 53
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	90 81       	ld	r25, Z
 65c:	8a 81       	ldd	r24, Y+2	; 0x02
 65e:	89 2b       	or	r24, r25
 660:	8c 93       	st	X, r24
 662:	08 c0       	rjmp	.+16     	; 0x674 <mdio_togglePinValue+0x96>
		/*break from this case*/
		break;
	/*in case of choosing PORTB*/
	case PORTD:
		/*toggling specific DIO pin*/
		MDIO_PORTD |= au8_pin;
 664:	a2 e3       	ldi	r26, 0x32	; 50
 666:	b0 e0       	ldi	r27, 0x00	; 0
 668:	e2 e3       	ldi	r30, 0x32	; 50
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	90 81       	ld	r25, Z
 66e:	8a 81       	ldd	r24, Y+2	; 0x02
 670:	89 2b       	or	r24, r25
 672:	8c 93       	st	X, r24
		/*break from default*/
		break;
	}
	/*Return from this function*/
	return;
}
 674:	0f 90       	pop	r0
 676:	0f 90       	pop	r0
 678:	0f 90       	pop	r0
 67a:	0f 90       	pop	r0
 67c:	cf 91       	pop	r28
 67e:	df 91       	pop	r29
 680:	08 95       	ret

00000682 <mdio_getPinValue>:


u8_t mdio_getPinValue(u8_t au8_port, u8_t au8_pin )
{
 682:	df 93       	push	r29
 684:	cf 93       	push	r28
 686:	00 d0       	rcall	.+0      	; 0x688 <mdio_getPinValue+0x6>
 688:	00 d0       	rcall	.+0      	; 0x68a <mdio_getPinValue+0x8>
 68a:	0f 92       	push	r0
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
 690:	8a 83       	std	Y+2, r24	; 0x02
 692:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable used to get a specific pin value*/
	u8_t au8_pinValue = 0;
 694:	19 82       	std	Y+1, r1	; 0x01
	/*switching over DIO ports*/
	switch(au8_port)
 696:	8a 81       	ldd	r24, Y+2	; 0x02
 698:	28 2f       	mov	r18, r24
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	3d 83       	std	Y+5, r19	; 0x05
 69e:	2c 83       	std	Y+4, r18	; 0x04
 6a0:	8c 81       	ldd	r24, Y+4	; 0x04
 6a2:	9d 81       	ldd	r25, Y+5	; 0x05
 6a4:	82 30       	cpi	r24, 0x02	; 2
 6a6:	91 05       	cpc	r25, r1
 6a8:	11 f1       	breq	.+68     	; 0x6ee <mdio_getPinValue+0x6c>
 6aa:	2c 81       	ldd	r18, Y+4	; 0x04
 6ac:	3d 81       	ldd	r19, Y+5	; 0x05
 6ae:	23 30       	cpi	r18, 0x03	; 3
 6b0:	31 05       	cpc	r19, r1
 6b2:	34 f4       	brge	.+12     	; 0x6c0 <mdio_getPinValue+0x3e>
 6b4:	8c 81       	ldd	r24, Y+4	; 0x04
 6b6:	9d 81       	ldd	r25, Y+5	; 0x05
 6b8:	81 30       	cpi	r24, 0x01	; 1
 6ba:	91 05       	cpc	r25, r1
 6bc:	61 f0       	breq	.+24     	; 0x6d6 <mdio_getPinValue+0x54>
 6be:	3a c0       	rjmp	.+116    	; 0x734 <mdio_getPinValue+0xb2>
 6c0:	2c 81       	ldd	r18, Y+4	; 0x04
 6c2:	3d 81       	ldd	r19, Y+5	; 0x05
 6c4:	23 30       	cpi	r18, 0x03	; 3
 6c6:	31 05       	cpc	r19, r1
 6c8:	f1 f0       	breq	.+60     	; 0x706 <mdio_getPinValue+0x84>
 6ca:	8c 81       	ldd	r24, Y+4	; 0x04
 6cc:	9d 81       	ldd	r25, Y+5	; 0x05
 6ce:	84 30       	cpi	r24, 0x04	; 4
 6d0:	91 05       	cpc	r25, r1
 6d2:	29 f1       	breq	.+74     	; 0x71e <mdio_getPinValue+0x9c>
 6d4:	2f c0       	rjmp	.+94     	; 0x734 <mdio_getPinValue+0xb2>
	{
	/*in case of choosing PORTA*/
	case PORTA:
		/*checking a specific pin value*/
		if(MDIO_PINA & au8_pin)
 6d6:	e9 e3       	ldi	r30, 0x39	; 57
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	90 81       	ld	r25, Z
 6dc:	8b 81       	ldd	r24, Y+3	; 0x03
 6de:	89 23       	and	r24, r25
 6e0:	88 23       	and	r24, r24
 6e2:	19 f0       	breq	.+6      	; 0x6ea <mdio_getPinValue+0x68>
		{
			/*setting the pin value to high*/
			au8_pinValue = HIGH;
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	89 83       	std	Y+1, r24	; 0x01
 6e8:	25 c0       	rjmp	.+74     	; 0x734 <mdio_getPinValue+0xb2>
		}
		else
		{
			/*setting the pin value to low*/
			au8_pinValue = LOW;
 6ea:	19 82       	std	Y+1, r1	; 0x01
 6ec:	23 c0       	rjmp	.+70     	; 0x734 <mdio_getPinValue+0xb2>
		/*break from this case*/
		break;
	/*in case of choosing PORTB*/
	case PORTB:
		/*checking a specific pin value*/
		if(MDIO_PINB & au8_pin)
 6ee:	e6 e3       	ldi	r30, 0x36	; 54
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	90 81       	ld	r25, Z
 6f4:	8b 81       	ldd	r24, Y+3	; 0x03
 6f6:	89 23       	and	r24, r25
 6f8:	88 23       	and	r24, r24
 6fa:	19 f0       	breq	.+6      	; 0x702 <mdio_getPinValue+0x80>
		{
			/*setting the pin value to high*/
			au8_pinValue = HIGH;
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	89 83       	std	Y+1, r24	; 0x01
 700:	19 c0       	rjmp	.+50     	; 0x734 <mdio_getPinValue+0xb2>
		}
		else
		{
			/*setting the pin value to low*/
			au8_pinValue = LOW;
 702:	19 82       	std	Y+1, r1	; 0x01
 704:	17 c0       	rjmp	.+46     	; 0x734 <mdio_getPinValue+0xb2>
		/*break from this case*/
		break;
	/*in case of choosing PORTC*/
	case PORTC:
		/*checking a specific pin value*/
		if(MDIO_PINC & au8_pin)
 706:	e3 e3       	ldi	r30, 0x33	; 51
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	90 81       	ld	r25, Z
 70c:	8b 81       	ldd	r24, Y+3	; 0x03
 70e:	89 23       	and	r24, r25
 710:	88 23       	and	r24, r24
 712:	19 f0       	breq	.+6      	; 0x71a <mdio_getPinValue+0x98>
		{
			/*setting the pin value to high*/
			au8_pinValue = HIGH;
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	89 83       	std	Y+1, r24	; 0x01
 718:	0d c0       	rjmp	.+26     	; 0x734 <mdio_getPinValue+0xb2>
		}
		else
		{
			/*setting the pin value to low*/
			au8_pinValue = LOW;
 71a:	19 82       	std	Y+1, r1	; 0x01
 71c:	0b c0       	rjmp	.+22     	; 0x734 <mdio_getPinValue+0xb2>
		/*break from this case*/
		break;
	/*in case of choosing PORTD*/
	case PORTD:
		/*checking a specific pin value*/
		if(MDIO_PIND & au8_pin)
 71e:	e0 e3       	ldi	r30, 0x30	; 48
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	90 81       	ld	r25, Z
 724:	8b 81       	ldd	r24, Y+3	; 0x03
 726:	89 23       	and	r24, r25
 728:	88 23       	and	r24, r24
 72a:	19 f0       	breq	.+6      	; 0x732 <mdio_getPinValue+0xb0>
		{
			/*setting the pin value to high*/
			au8_pinValue = HIGH;
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	89 83       	std	Y+1, r24	; 0x01
 730:	01 c0       	rjmp	.+2      	; 0x734 <mdio_getPinValue+0xb2>
		}
		else
		{
			/*setting the pin value to low*/
			au8_pinValue = LOW;
 732:	19 82       	std	Y+1, r1	; 0x01
	default:
		/*break from default*/
		break;
	}
	/*Return from this function*/
	return au8_pinValue ;
 734:	89 81       	ldd	r24, Y+1	; 0x01
}
 736:	0f 90       	pop	r0
 738:	0f 90       	pop	r0
 73a:	0f 90       	pop	r0
 73c:	0f 90       	pop	r0
 73e:	0f 90       	pop	r0
 740:	cf 91       	pop	r28
 742:	df 91       	pop	r29
 744:	08 95       	ret

00000746 <main>:
#include "LSTD_TYPES.h"
#include "HKEYPAD_interface.h"


int main(void)
{
 746:	df 93       	push	r29
 748:	cf 93       	push	r28
 74a:	0f 92       	push	r0
 74c:	cd b7       	in	r28, 0x3d	; 61
 74e:	de b7       	in	r29, 0x3e	; 62
	u8_t x = 0;
 750:	19 82       	std	Y+1, r1	; 0x01

	hkpd_init();
 752:	0e 94 41 00 	call	0x82	; 0x82 <hkpd_init>
	h7seg_init();
 756:	0e 94 cb 00 	call	0x196	; 0x196 <h7seg_init>
	while(1)
	{
		hkpd_getPressKey(&x);
 75a:	ce 01       	movw	r24, r28
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	0e 94 57 00 	call	0xae	; 0xae <hkpd_getPressKey>

		x = x - '0';
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	80 53       	subi	r24, 0x30	; 48
 766:	89 83       	std	Y+1, r24	; 0x01

		h7seg_displayNum(x);
 768:	89 81       	ldd	r24, Y+1	; 0x01
 76a:	88 2f       	mov	r24, r24
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <h7seg_displayNum>
 772:	f3 cf       	rjmp	.-26     	; 0x75a <main+0x14>

00000774 <_exit>:
 774:	f8 94       	cli

00000776 <__stop_program>:
 776:	ff cf       	rjmp	.-2      	; 0x776 <__stop_program>
