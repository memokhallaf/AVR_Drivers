
STEPPER_MOTOR_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002820  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00002820  00002894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ed8  00000000  00000000  000028b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b9c  00000000  00000000  0000478c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005617  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000765c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000875d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000096e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <main>
      7a:	0c 94 0e 14 	jmp	0x281c	; 0x281c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa e6       	ldi	r26, 0x6A	; 106
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8a e6       	ldi	r24, 0x6A	; 106
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 df 13 	jmp	0x27be	; 0x27be <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6a e6       	ldi	r22, 0x6A	; 106
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <hkpd_init>:
/******************************************/
/*				FUNCTIONS DIFINITIONS		*/
/*******************************************/

void hkpd_init(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	/*setting rows pins as i/p pullup*/
	mdio_setPinstatus(HKPD_PORT, (HKPD_ROW_0 | HKPD_ROW_1 | HKPD_ROW_2 | HKPD_ROW_3), INPUT_PULLUP);
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	6f e0       	ldi	r22, 0x0F	; 15
     c9a:	43 e0       	ldi	r20, 0x03	; 3
     c9c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <mdio_setPinstatus>
	/*setting rows pins as o/p*/
	mdio_setPinstatus(HKPD_PORT, (HKPD_COLS_0 | HKPD_COLS_1 | HKPD_COLS_2 ), OUTPUT);
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	60 e7       	ldi	r22, 0x70	; 112
     ca4:	41 e0       	ldi	r20, 0x01	; 1
     ca6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <mdio_setPinstatus>
	/*setting columns pins to high*/
	mdio_setPinValue(HKPD_PORT, (HKPD_COLS_0 | HKPD_COLS_1 | HKPD_COLS_2 ),HIGH);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	60 e7       	ldi	r22, 0x70	; 112
     cae:	41 e0       	ldi	r20, 0x01	; 1
     cb0:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	/*return from this fun*/
	return;
}
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <hkpd_getPressKey>:

void hkpd_getPressKey(u8_t* pu8_key)
{
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <hkpd_getPressKey+0x6>
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <hkpd_getPressKey+0x8>
     cc2:	0f 92       	push	r0
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	9d 83       	std	Y+5, r25	; 0x05
     cca:	8c 83       	std	Y+4, r24	; 0x04
	/*local variable used in rows looping operations*/
	u8_t au8_rowIterator = 0 ;
     ccc:	1b 82       	std	Y+3, r1	; 0x03
	/*local variable used in cols looping operations*/
	u8_t au8_colIterator = 0;
     cce:	1a 82       	std	Y+2, r1	; 0x02
	/**/
	u8_t au8_keyFlag = 0;
     cd0:	19 82       	std	Y+1, r1	; 0x01
	/*resetting the key value holder variables*/
	*pu8_key = 0;
     cd2:	ec 81       	ldd	r30, Y+4	; 0x04
     cd4:	fd 81       	ldd	r31, Y+5	; 0x05
     cd6:	10 82       	st	Z, r1
	/**/
	for(au8_colIterator= 0 ;au8_colIterator < HKPD_COLS ;au8_colIterator++ )
     cd8:	1a 82       	std	Y+2, r1	; 0x02
     cda:	57 c0       	rjmp	.+174    	; 0xd8a <hkpd_getPressKey+0xd0>
	{
		/**/
		mdio_setPinValue(HKPD_PORT, (HKPD_COLS_0 << au8_colIterator), LOW);
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	80 e1       	ldi	r24, 0x10	; 16
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <hkpd_getPressKey+0x32>
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	2a 95       	dec	r18
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <hkpd_getPressKey+0x2e>
     cf0:	98 2f       	mov	r25, r24
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	69 2f       	mov	r22, r25
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
		/*looping over keypad rows*/
		for(au8_rowIterator= 0; au8_rowIterator < HKPD_ROWS; au8_rowIterator++)
     cfc:	1b 82       	std	Y+3, r1	; 0x03
     cfe:	2c c0       	rjmp	.+88     	; 0xd58 <hkpd_getPressKey+0x9e>
		{
			/**/
			if(mdio_getPinValue(HKPD_PORT, (HKPD_ROW_0 << au8_rowIterator)) == LOW)
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <hkpd_getPressKey+0x56>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	2a 95       	dec	r18
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <hkpd_getPressKey+0x52>
     d14:	98 2f       	mov	r25, r24
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	69 2f       	mov	r22, r25
     d1a:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <mdio_getPinValue>
     d1e:	88 23       	and	r24, r24
     d20:	c1 f4       	brne	.+48     	; 0xd52 <hkpd_getPressKey+0x98>
			{
				/*report the pressed pin*/
				*pu8_key = gu8_kpdMap[au8_rowIterator][au8_colIterator];
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	48 2f       	mov	r20, r24
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	c9 01       	movw	r24, r18
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	82 0f       	add	r24, r18
     d36:	93 1f       	adc	r25, r19
     d38:	84 0f       	add	r24, r20
     d3a:	95 1f       	adc	r25, r21
     d3c:	fc 01       	movw	r30, r24
     d3e:	ee 58       	subi	r30, 0x8E	; 142
     d40:	ff 4f       	sbci	r31, 0xFF	; 255
     d42:	80 81       	ld	r24, Z
     d44:	ec 81       	ldd	r30, Y+4	; 0x04
     d46:	fd 81       	ldd	r31, Y+5	; 0x05
     d48:	80 83       	st	Z, r24
				/**/
				au8_keyFlag++;
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	8f 5f       	subi	r24, 0xFF	; 255
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <hkpd_getPressKey+0xa4>
	for(au8_colIterator= 0 ;au8_colIterator < HKPD_COLS ;au8_colIterator++ )
	{
		/**/
		mdio_setPinValue(HKPD_PORT, (HKPD_COLS_0 << au8_colIterator), LOW);
		/*looping over keypad rows*/
		for(au8_rowIterator= 0; au8_rowIterator < HKPD_ROWS; au8_rowIterator++)
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	8f 5f       	subi	r24, 0xFF	; 255
     d56:	8b 83       	std	Y+3, r24	; 0x03
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	84 30       	cpi	r24, 0x04	; 4
     d5c:	88 f2       	brcs	.-94     	; 0xd00 <hkpd_getPressKey+0x46>
			{
				/*do nothing*/
			}
		}
		/*setting specific col pin to high*/
		mdio_setPinValue(HKPD_PORT, (HKPD_COLS_0 << au8_colIterator), HIGH);
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	80 e1       	ldi	r24, 0x10	; 16
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <hkpd_getPressKey+0xb4>
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	2a 95       	dec	r18
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <hkpd_getPressKey+0xb0>
     d72:	98 2f       	mov	r25, r24
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	69 2f       	mov	r22, r25
     d78:	41 e0       	ldi	r20, 0x01	; 1
     d7a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
		/**/
		if(au8_keyFlag)
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	88 23       	and	r24, r24
     d82:	39 f4       	brne	.+14     	; 0xd92 <hkpd_getPressKey+0xd8>
	/**/
	u8_t au8_keyFlag = 0;
	/*resetting the key value holder variables*/
	*pu8_key = 0;
	/**/
	for(au8_colIterator= 0 ;au8_colIterator < HKPD_COLS ;au8_colIterator++ )
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	8f 5f       	subi	r24, 0xFF	; 255
     d88:	8a 83       	std	Y+2, r24	; 0x02
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <hkpd_getPressKey+0xd8>
     d90:	a5 cf       	rjmp	.-182    	; 0xcdc <hkpd_getPressKey+0x22>
			/*do nothing*/
		}
	}
	/*return from this fun*/
	return;
}
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <hlcd_sendData>:
/************************************************************************************************/
/*                                    Functions' definitions                                    */
/************************************************************************************************/

static void hlcd_sendData(u8_t au8_data)
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	89 8f       	std	Y+25, r24	; 0x19
	/*SETTING RS PIN TO HIGH FOR SENDING DATA*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_RS_PIN, HIGH);
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	41 e0       	ldi	r20, 0x01	; 1
     dbe:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	/*SETTING RW PIN TO LOW FOR WRITING DATA*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_RW_PIN, LOW);
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	62 e0       	ldi	r22, 0x02	; 2
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	/*PASSING DATA OVER DATA PINS*/
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D0_PIN, GET_BIT(au8_data, 0));
     dcc:	89 8d       	ldd	r24, Y+25	; 0x19
     dce:	98 2f       	mov	r25, r24
     dd0:	91 70       	andi	r25, 0x01	; 1
     dd2:	84 e0       	ldi	r24, 0x04	; 4
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	49 2f       	mov	r20, r25
     dd8:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D1_PIN, GET_BIT(au8_data, 1));
     ddc:	89 8d       	ldd	r24, Y+25	; 0x19
     dde:	86 95       	lsr	r24
     de0:	98 2f       	mov	r25, r24
     de2:	91 70       	andi	r25, 0x01	; 1
     de4:	84 e0       	ldi	r24, 0x04	; 4
     de6:	62 e0       	ldi	r22, 0x02	; 2
     de8:	49 2f       	mov	r20, r25
     dea:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D2_PIN, GET_BIT(au8_data, 2));
     dee:	89 8d       	ldd	r24, Y+25	; 0x19
     df0:	86 95       	lsr	r24
     df2:	86 95       	lsr	r24
     df4:	98 2f       	mov	r25, r24
     df6:	91 70       	andi	r25, 0x01	; 1
     df8:	84 e0       	ldi	r24, 0x04	; 4
     dfa:	64 e0       	ldi	r22, 0x04	; 4
     dfc:	49 2f       	mov	r20, r25
     dfe:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D3_PIN, GET_BIT(au8_data, 3));
     e02:	89 8d       	ldd	r24, Y+25	; 0x19
     e04:	86 95       	lsr	r24
     e06:	86 95       	lsr	r24
     e08:	86 95       	lsr	r24
     e0a:	98 2f       	mov	r25, r24
     e0c:	91 70       	andi	r25, 0x01	; 1
     e0e:	84 e0       	ldi	r24, 0x04	; 4
     e10:	68 e0       	ldi	r22, 0x08	; 8
     e12:	49 2f       	mov	r20, r25
     e14:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D4_PIN, GET_BIT(au8_data, 4));
     e18:	89 8d       	ldd	r24, Y+25	; 0x19
     e1a:	82 95       	swap	r24
     e1c:	8f 70       	andi	r24, 0x0F	; 15
     e1e:	98 2f       	mov	r25, r24
     e20:	91 70       	andi	r25, 0x01	; 1
     e22:	84 e0       	ldi	r24, 0x04	; 4
     e24:	60 e1       	ldi	r22, 0x10	; 16
     e26:	49 2f       	mov	r20, r25
     e28:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D5_PIN, GET_BIT(au8_data, 5));
     e2c:	89 8d       	ldd	r24, Y+25	; 0x19
     e2e:	82 95       	swap	r24
     e30:	86 95       	lsr	r24
     e32:	87 70       	andi	r24, 0x07	; 7
     e34:	98 2f       	mov	r25, r24
     e36:	91 70       	andi	r25, 0x01	; 1
     e38:	84 e0       	ldi	r24, 0x04	; 4
     e3a:	60 e2       	ldi	r22, 0x20	; 32
     e3c:	49 2f       	mov	r20, r25
     e3e:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D6_PIN, GET_BIT(au8_data, 6));
     e42:	89 8d       	ldd	r24, Y+25	; 0x19
     e44:	82 95       	swap	r24
     e46:	86 95       	lsr	r24
     e48:	86 95       	lsr	r24
     e4a:	83 70       	andi	r24, 0x03	; 3
     e4c:	98 2f       	mov	r25, r24
     e4e:	91 70       	andi	r25, 0x01	; 1
     e50:	84 e0       	ldi	r24, 0x04	; 4
     e52:	60 e4       	ldi	r22, 0x40	; 64
     e54:	49 2f       	mov	r20, r25
     e56:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D7_PIN, GET_BIT(au8_data, 7));
     e5a:	89 8d       	ldd	r24, Y+25	; 0x19
     e5c:	98 2f       	mov	r25, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	99 27       	eor	r25, r25
     e62:	99 1f       	adc	r25, r25
     e64:	84 e0       	ldi	r24, 0x04	; 4
     e66:	60 e8       	ldi	r22, 0x80	; 128
     e68:	49 2f       	mov	r20, r25
     e6a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	/*TRIGGERING DATA BY ENABLE SIGNAL*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_EN_PIN, LOW);
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	64 e0       	ldi	r22, 0x04	; 4
     e72:	40 e0       	ldi	r20, 0x00	; 0
     e74:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	a8 e4       	ldi	r26, 0x48	; 72
     e7e:	b2 e4       	ldi	r27, 0x42	; 66
     e80:	8d 8b       	std	Y+21, r24	; 0x15
     e82:	9e 8b       	std	Y+22, r25	; 0x16
     e84:	af 8b       	std	Y+23, r26	; 0x17
     e86:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e88:	6d 89       	ldd	r22, Y+21	; 0x15
     e8a:	7e 89       	ldd	r23, Y+22	; 0x16
     e8c:	8f 89       	ldd	r24, Y+23	; 0x17
     e8e:	98 8d       	ldd	r25, Y+24	; 0x18
     e90:	2b ea       	ldi	r18, 0xAB	; 171
     e92:	3a ea       	ldi	r19, 0xAA	; 170
     e94:	4a e2       	ldi	r20, 0x2A	; 42
     e96:	50 e4       	ldi	r21, 0x40	; 64
     e98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	89 8b       	std	Y+17, r24	; 0x11
     ea2:	9a 8b       	std	Y+18, r25	; 0x12
     ea4:	ab 8b       	std	Y+19, r26	; 0x13
     ea6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     ea8:	69 89       	ldd	r22, Y+17	; 0x11
     eaa:	7a 89       	ldd	r23, Y+18	; 0x12
     eac:	8b 89       	ldd	r24, Y+19	; 0x13
     eae:	9c 89       	ldd	r25, Y+20	; 0x14
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e8       	ldi	r20, 0x80	; 128
     eb6:	5f e3       	ldi	r21, 0x3F	; 63
     eb8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ebc:	88 23       	and	r24, r24
     ebe:	1c f4       	brge	.+6      	; 0xec6 <hlcd_sendData+0x124>
		__ticks = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	88 8b       	std	Y+16, r24	; 0x10
     ec4:	91 c0       	rjmp	.+290    	; 0xfe8 <hlcd_sendData+0x246>
	else if (__tmp > 255)
     ec6:	69 89       	ldd	r22, Y+17	; 0x11
     ec8:	7a 89       	ldd	r23, Y+18	; 0x12
     eca:	8b 89       	ldd	r24, Y+19	; 0x13
     ecc:	9c 89       	ldd	r25, Y+20	; 0x14
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	4f e7       	ldi	r20, 0x7F	; 127
     ed4:	53 e4       	ldi	r21, 0x43	; 67
     ed6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     eda:	18 16       	cp	r1, r24
     edc:	0c f0       	brlt	.+2      	; 0xee0 <hlcd_sendData+0x13e>
     ede:	7b c0       	rjmp	.+246    	; 0xfd6 <hlcd_sendData+0x234>
	{
		_delay_ms(__us / 1000.0);
     ee0:	6d 89       	ldd	r22, Y+21	; 0x15
     ee2:	7e 89       	ldd	r23, Y+22	; 0x16
     ee4:	8f 89       	ldd	r24, Y+23	; 0x17
     ee6:	98 8d       	ldd	r25, Y+24	; 0x18
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	4a e7       	ldi	r20, 0x7A	; 122
     eee:	54 e4       	ldi	r21, 0x44	; 68
     ef0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	8c 87       	std	Y+12, r24	; 0x0c
     efa:	9d 87       	std	Y+13, r25	; 0x0d
     efc:	ae 87       	std	Y+14, r26	; 0x0e
     efe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f00:	6c 85       	ldd	r22, Y+12	; 0x0c
     f02:	7d 85       	ldd	r23, Y+13	; 0x0d
     f04:	8e 85       	ldd	r24, Y+14	; 0x0e
     f06:	9f 85       	ldd	r25, Y+15	; 0x0f
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	4a ef       	ldi	r20, 0xFA	; 250
     f0e:	54 e4       	ldi	r21, 0x44	; 68
     f10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	88 87       	std	Y+8, r24	; 0x08
     f1a:	99 87       	std	Y+9, r25	; 0x09
     f1c:	aa 87       	std	Y+10, r26	; 0x0a
     f1e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     f20:	68 85       	ldd	r22, Y+8	; 0x08
     f22:	79 85       	ldd	r23, Y+9	; 0x09
     f24:	8a 85       	ldd	r24, Y+10	; 0x0a
     f26:	9b 85       	ldd	r25, Y+11	; 0x0b
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e8       	ldi	r20, 0x80	; 128
     f2e:	5f e3       	ldi	r21, 0x3F	; 63
     f30:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f34:	88 23       	and	r24, r24
     f36:	2c f4       	brge	.+10     	; 0xf42 <hlcd_sendData+0x1a0>
		__ticks = 1;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	9f 83       	std	Y+7, r25	; 0x07
     f3e:	8e 83       	std	Y+6, r24	; 0x06
     f40:	3f c0       	rjmp	.+126    	; 0xfc0 <hlcd_sendData+0x21e>
	else if (__tmp > 65535)
     f42:	68 85       	ldd	r22, Y+8	; 0x08
     f44:	79 85       	ldd	r23, Y+9	; 0x09
     f46:	8a 85       	ldd	r24, Y+10	; 0x0a
     f48:	9b 85       	ldd	r25, Y+11	; 0x0b
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	3f ef       	ldi	r19, 0xFF	; 255
     f4e:	4f e7       	ldi	r20, 0x7F	; 127
     f50:	57 e4       	ldi	r21, 0x47	; 71
     f52:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f56:	18 16       	cp	r1, r24
     f58:	4c f5       	brge	.+82     	; 0xfac <hlcd_sendData+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5a:	6c 85       	ldd	r22, Y+12	; 0x0c
     f5c:	7d 85       	ldd	r23, Y+13	; 0x0d
     f5e:	8e 85       	ldd	r24, Y+14	; 0x0e
     f60:	9f 85       	ldd	r25, Y+15	; 0x0f
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e2       	ldi	r20, 0x20	; 32
     f68:	51 e4       	ldi	r21, 0x41	; 65
     f6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	bc 01       	movw	r22, r24
     f74:	cd 01       	movw	r24, r26
     f76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	9f 83       	std	Y+7, r25	; 0x07
     f80:	8e 83       	std	Y+6, r24	; 0x06
     f82:	0f c0       	rjmp	.+30     	; 0xfa2 <hlcd_sendData+0x200>
     f84:	88 ec       	ldi	r24, 0xC8	; 200
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	9d 83       	std	Y+5, r25	; 0x05
     f8a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	9d 81       	ldd	r25, Y+5	; 0x05
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	f1 f7       	brne	.-4      	; 0xf90 <hlcd_sendData+0x1ee>
     f94:	9d 83       	std	Y+5, r25	; 0x05
     f96:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f98:	8e 81       	ldd	r24, Y+6	; 0x06
     f9a:	9f 81       	ldd	r25, Y+7	; 0x07
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	9f 83       	std	Y+7, r25	; 0x07
     fa0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa2:	8e 81       	ldd	r24, Y+6	; 0x06
     fa4:	9f 81       	ldd	r25, Y+7	; 0x07
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	69 f7       	brne	.-38     	; 0xf84 <hlcd_sendData+0x1e2>
     faa:	24 c0       	rjmp	.+72     	; 0xff4 <hlcd_sendData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fac:	68 85       	ldd	r22, Y+8	; 0x08
     fae:	79 85       	ldd	r23, Y+9	; 0x09
     fb0:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb2:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	9f 83       	std	Y+7, r25	; 0x07
     fbe:	8e 83       	std	Y+6, r24	; 0x06
     fc0:	8e 81       	ldd	r24, Y+6	; 0x06
     fc2:	9f 81       	ldd	r25, Y+7	; 0x07
     fc4:	9b 83       	std	Y+3, r25	; 0x03
     fc6:	8a 83       	std	Y+2, r24	; 0x02
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	f1 f7       	brne	.-4      	; 0xfcc <hlcd_sendData+0x22a>
     fd0:	9b 83       	std	Y+3, r25	; 0x03
     fd2:	8a 83       	std	Y+2, r24	; 0x02
     fd4:	0f c0       	rjmp	.+30     	; 0xff4 <hlcd_sendData+0x252>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fd6:	69 89       	ldd	r22, Y+17	; 0x11
     fd8:	7a 89       	ldd	r23, Y+18	; 0x12
     fda:	8b 89       	ldd	r24, Y+19	; 0x13
     fdc:	9c 89       	ldd	r25, Y+20	; 0x14
     fde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	88 8b       	std	Y+16, r24	; 0x10
     fe8:	88 89       	ldd	r24, Y+16	; 0x10
     fea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	8a 95       	dec	r24
     ff0:	f1 f7       	brne	.-4      	; 0xfee <hlcd_sendData+0x24c>
     ff2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_EN_PIN, HIGH);
     ff4:	82 e0       	ldi	r24, 0x02	; 2
     ff6:	64 e0       	ldi	r22, 0x04	; 4
     ff8:	41 e0       	ldi	r20, 0x01	; 1
     ffa:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	/*return from this function*/
	return;
}
     ffe:	69 96       	adiw	r28, 0x19	; 25
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <hlcd_sendCmd>:

static void hlcd_sendCmd(u8_t au8_cmd)
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	69 97       	sbiw	r28, 0x19	; 25
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	89 8f       	std	Y+25, r24	; 0x19
	/*SETTING RS PIN TO LOW FOR SENDING DATA*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_RS_PIN, LOW);
    1026:	82 e0       	ldi	r24, 0x02	; 2
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	/*SETTING RW PIN TO LOW FOR WRITING DATA/CMD*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_RW_PIN, LOW);
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	62 e0       	ldi	r22, 0x02	; 2
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	/*PASSING COMMEND OVER DATA PINS*/
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D0_PIN, GET_BIT(au8_cmd, 0));
    103a:	89 8d       	ldd	r24, Y+25	; 0x19
    103c:	98 2f       	mov	r25, r24
    103e:	91 70       	andi	r25, 0x01	; 1
    1040:	84 e0       	ldi	r24, 0x04	; 4
    1042:	61 e0       	ldi	r22, 0x01	; 1
    1044:	49 2f       	mov	r20, r25
    1046:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D1_PIN, GET_BIT(au8_cmd, 1));
    104a:	89 8d       	ldd	r24, Y+25	; 0x19
    104c:	86 95       	lsr	r24
    104e:	98 2f       	mov	r25, r24
    1050:	91 70       	andi	r25, 0x01	; 1
    1052:	84 e0       	ldi	r24, 0x04	; 4
    1054:	62 e0       	ldi	r22, 0x02	; 2
    1056:	49 2f       	mov	r20, r25
    1058:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D2_PIN, GET_BIT(au8_cmd, 2));
    105c:	89 8d       	ldd	r24, Y+25	; 0x19
    105e:	86 95       	lsr	r24
    1060:	86 95       	lsr	r24
    1062:	98 2f       	mov	r25, r24
    1064:	91 70       	andi	r25, 0x01	; 1
    1066:	84 e0       	ldi	r24, 0x04	; 4
    1068:	64 e0       	ldi	r22, 0x04	; 4
    106a:	49 2f       	mov	r20, r25
    106c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D3_PIN, GET_BIT(au8_cmd, 3));
    1070:	89 8d       	ldd	r24, Y+25	; 0x19
    1072:	86 95       	lsr	r24
    1074:	86 95       	lsr	r24
    1076:	86 95       	lsr	r24
    1078:	98 2f       	mov	r25, r24
    107a:	91 70       	andi	r25, 0x01	; 1
    107c:	84 e0       	ldi	r24, 0x04	; 4
    107e:	68 e0       	ldi	r22, 0x08	; 8
    1080:	49 2f       	mov	r20, r25
    1082:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D4_PIN, GET_BIT(au8_cmd, 4));
    1086:	89 8d       	ldd	r24, Y+25	; 0x19
    1088:	82 95       	swap	r24
    108a:	8f 70       	andi	r24, 0x0F	; 15
    108c:	98 2f       	mov	r25, r24
    108e:	91 70       	andi	r25, 0x01	; 1
    1090:	84 e0       	ldi	r24, 0x04	; 4
    1092:	60 e1       	ldi	r22, 0x10	; 16
    1094:	49 2f       	mov	r20, r25
    1096:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D5_PIN, GET_BIT(au8_cmd, 5));
    109a:	89 8d       	ldd	r24, Y+25	; 0x19
    109c:	82 95       	swap	r24
    109e:	86 95       	lsr	r24
    10a0:	87 70       	andi	r24, 0x07	; 7
    10a2:	98 2f       	mov	r25, r24
    10a4:	91 70       	andi	r25, 0x01	; 1
    10a6:	84 e0       	ldi	r24, 0x04	; 4
    10a8:	60 e2       	ldi	r22, 0x20	; 32
    10aa:	49 2f       	mov	r20, r25
    10ac:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D6_PIN, GET_BIT(au8_cmd, 6));
    10b0:	89 8d       	ldd	r24, Y+25	; 0x19
    10b2:	82 95       	swap	r24
    10b4:	86 95       	lsr	r24
    10b6:	86 95       	lsr	r24
    10b8:	83 70       	andi	r24, 0x03	; 3
    10ba:	98 2f       	mov	r25, r24
    10bc:	91 70       	andi	r25, 0x01	; 1
    10be:	84 e0       	ldi	r24, 0x04	; 4
    10c0:	60 e4       	ldi	r22, 0x40	; 64
    10c2:	49 2f       	mov	r20, r25
    10c4:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(HLCD_DATA_PORT, HLCD_D7_PIN, GET_BIT(au8_cmd, 7));
    10c8:	89 8d       	ldd	r24, Y+25	; 0x19
    10ca:	98 2f       	mov	r25, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	99 27       	eor	r25, r25
    10d0:	99 1f       	adc	r25, r25
    10d2:	84 e0       	ldi	r24, 0x04	; 4
    10d4:	60 e8       	ldi	r22, 0x80	; 128
    10d6:	49 2f       	mov	r20, r25
    10d8:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	/*TRIGGERING DATA BY ENABLE SIGNAL*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_EN_PIN, LOW);
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	64 e0       	ldi	r22, 0x04	; 4
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	a8 e4       	ldi	r26, 0x48	; 72
    10ec:	b2 e4       	ldi	r27, 0x42	; 66
    10ee:	8d 8b       	std	Y+21, r24	; 0x15
    10f0:	9e 8b       	std	Y+22, r25	; 0x16
    10f2:	af 8b       	std	Y+23, r26	; 0x17
    10f4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10f6:	6d 89       	ldd	r22, Y+21	; 0x15
    10f8:	7e 89       	ldd	r23, Y+22	; 0x16
    10fa:	8f 89       	ldd	r24, Y+23	; 0x17
    10fc:	98 8d       	ldd	r25, Y+24	; 0x18
    10fe:	2b ea       	ldi	r18, 0xAB	; 171
    1100:	3a ea       	ldi	r19, 0xAA	; 170
    1102:	4a e2       	ldi	r20, 0x2A	; 42
    1104:	50 e4       	ldi	r21, 0x40	; 64
    1106:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	89 8b       	std	Y+17, r24	; 0x11
    1110:	9a 8b       	std	Y+18, r25	; 0x12
    1112:	ab 8b       	std	Y+19, r26	; 0x13
    1114:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1116:	69 89       	ldd	r22, Y+17	; 0x11
    1118:	7a 89       	ldd	r23, Y+18	; 0x12
    111a:	8b 89       	ldd	r24, Y+19	; 0x13
    111c:	9c 89       	ldd	r25, Y+20	; 0x14
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e8       	ldi	r20, 0x80	; 128
    1124:	5f e3       	ldi	r21, 0x3F	; 63
    1126:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    112a:	88 23       	and	r24, r24
    112c:	1c f4       	brge	.+6      	; 0x1134 <hlcd_sendCmd+0x124>
		__ticks = 1;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	88 8b       	std	Y+16, r24	; 0x10
    1132:	91 c0       	rjmp	.+290    	; 0x1256 <hlcd_sendCmd+0x246>
	else if (__tmp > 255)
    1134:	69 89       	ldd	r22, Y+17	; 0x11
    1136:	7a 89       	ldd	r23, Y+18	; 0x12
    1138:	8b 89       	ldd	r24, Y+19	; 0x13
    113a:	9c 89       	ldd	r25, Y+20	; 0x14
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	4f e7       	ldi	r20, 0x7F	; 127
    1142:	53 e4       	ldi	r21, 0x43	; 67
    1144:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1148:	18 16       	cp	r1, r24
    114a:	0c f0       	brlt	.+2      	; 0x114e <hlcd_sendCmd+0x13e>
    114c:	7b c0       	rjmp	.+246    	; 0x1244 <hlcd_sendCmd+0x234>
	{
		_delay_ms(__us / 1000.0);
    114e:	6d 89       	ldd	r22, Y+21	; 0x15
    1150:	7e 89       	ldd	r23, Y+22	; 0x16
    1152:	8f 89       	ldd	r24, Y+23	; 0x17
    1154:	98 8d       	ldd	r25, Y+24	; 0x18
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	4a e7       	ldi	r20, 0x7A	; 122
    115c:	54 e4       	ldi	r21, 0x44	; 68
    115e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	8c 87       	std	Y+12, r24	; 0x0c
    1168:	9d 87       	std	Y+13, r25	; 0x0d
    116a:	ae 87       	std	Y+14, r26	; 0x0e
    116c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    116e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1170:	7d 85       	ldd	r23, Y+13	; 0x0d
    1172:	8e 85       	ldd	r24, Y+14	; 0x0e
    1174:	9f 85       	ldd	r25, Y+15	; 0x0f
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	4a ef       	ldi	r20, 0xFA	; 250
    117c:	54 e4       	ldi	r21, 0x44	; 68
    117e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	88 87       	std	Y+8, r24	; 0x08
    1188:	99 87       	std	Y+9, r25	; 0x09
    118a:	aa 87       	std	Y+10, r26	; 0x0a
    118c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    118e:	68 85       	ldd	r22, Y+8	; 0x08
    1190:	79 85       	ldd	r23, Y+9	; 0x09
    1192:	8a 85       	ldd	r24, Y+10	; 0x0a
    1194:	9b 85       	ldd	r25, Y+11	; 0x0b
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e8       	ldi	r20, 0x80	; 128
    119c:	5f e3       	ldi	r21, 0x3F	; 63
    119e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11a2:	88 23       	and	r24, r24
    11a4:	2c f4       	brge	.+10     	; 0x11b0 <hlcd_sendCmd+0x1a0>
		__ticks = 1;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	9f 83       	std	Y+7, r25	; 0x07
    11ac:	8e 83       	std	Y+6, r24	; 0x06
    11ae:	3f c0       	rjmp	.+126    	; 0x122e <hlcd_sendCmd+0x21e>
	else if (__tmp > 65535)
    11b0:	68 85       	ldd	r22, Y+8	; 0x08
    11b2:	79 85       	ldd	r23, Y+9	; 0x09
    11b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    11b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	3f ef       	ldi	r19, 0xFF	; 255
    11bc:	4f e7       	ldi	r20, 0x7F	; 127
    11be:	57 e4       	ldi	r21, 0x47	; 71
    11c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11c4:	18 16       	cp	r1, r24
    11c6:	4c f5       	brge	.+82     	; 0x121a <hlcd_sendCmd+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    11ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    11cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    11ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e2       	ldi	r20, 0x20	; 32
    11d6:	51 e4       	ldi	r21, 0x41	; 65
    11d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	9f 83       	std	Y+7, r25	; 0x07
    11ee:	8e 83       	std	Y+6, r24	; 0x06
    11f0:	0f c0       	rjmp	.+30     	; 0x1210 <hlcd_sendCmd+0x200>
    11f2:	88 ec       	ldi	r24, 0xC8	; 200
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	9d 83       	std	Y+5, r25	; 0x05
    11f8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	9d 81       	ldd	r25, Y+5	; 0x05
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <hlcd_sendCmd+0x1ee>
    1202:	9d 83       	std	Y+5, r25	; 0x05
    1204:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1206:	8e 81       	ldd	r24, Y+6	; 0x06
    1208:	9f 81       	ldd	r25, Y+7	; 0x07
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	9f 83       	std	Y+7, r25	; 0x07
    120e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1210:	8e 81       	ldd	r24, Y+6	; 0x06
    1212:	9f 81       	ldd	r25, Y+7	; 0x07
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	69 f7       	brne	.-38     	; 0x11f2 <hlcd_sendCmd+0x1e2>
    1218:	24 c0       	rjmp	.+72     	; 0x1262 <hlcd_sendCmd+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121a:	68 85       	ldd	r22, Y+8	; 0x08
    121c:	79 85       	ldd	r23, Y+9	; 0x09
    121e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1220:	9b 85       	ldd	r25, Y+11	; 0x0b
    1222:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	9f 83       	std	Y+7, r25	; 0x07
    122c:	8e 83       	std	Y+6, r24	; 0x06
    122e:	8e 81       	ldd	r24, Y+6	; 0x06
    1230:	9f 81       	ldd	r25, Y+7	; 0x07
    1232:	9b 83       	std	Y+3, r25	; 0x03
    1234:	8a 83       	std	Y+2, r24	; 0x02
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	9b 81       	ldd	r25, Y+3	; 0x03
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <hlcd_sendCmd+0x22a>
    123e:	9b 83       	std	Y+3, r25	; 0x03
    1240:	8a 83       	std	Y+2, r24	; 0x02
    1242:	0f c0       	rjmp	.+30     	; 0x1262 <hlcd_sendCmd+0x252>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1244:	69 89       	ldd	r22, Y+17	; 0x11
    1246:	7a 89       	ldd	r23, Y+18	; 0x12
    1248:	8b 89       	ldd	r24, Y+19	; 0x13
    124a:	9c 89       	ldd	r25, Y+20	; 0x14
    124c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	88 8b       	std	Y+16, r24	; 0x10
    1256:	88 89       	ldd	r24, Y+16	; 0x10
    1258:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	8a 95       	dec	r24
    125e:	f1 f7       	brne	.-4      	; 0x125c <hlcd_sendCmd+0x24c>
    1260:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_EN_PIN, HIGH);
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	64 e0       	ldi	r22, 0x04	; 4
    1266:	41 e0       	ldi	r20, 0x01	; 1
    1268:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>

	/*return from this function*/
	return;
}
    126c:	69 96       	adiw	r28, 0x19	; 25
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <hlcd_init>:



void hlcd_init(void)
{
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	c6 54       	subi	r28, 0x46	; 70
    128c:	d0 40       	sbci	r29, 0x00	; 0
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
	/*SETTING CONTROL PORT PINS TO OUTPUT*/
	mdio_setPinstatus(HLCD_CTRL_PORT, (HLCD_RS_PIN | HLCD_RW_PIN | HLCD_EN_PIN), OUTPUT);
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	67 e0       	ldi	r22, 0x07	; 7
    129c:	41 e0       	ldi	r20, 0x01	; 1
    129e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <mdio_setPinstatus>

	/*SETTING DATA PORT PINS TO OUTPUT*/
	mdio_setPinstatus(HLCD_DATA_PORT, (HLCD_D0_PIN | HLCD_D1_PIN | HLCD_D2_PIN | HLCD_D3_PIN |
    12a2:	84 e0       	ldi	r24, 0x04	; 4
    12a4:	6f ef       	ldi	r22, 0xFF	; 255
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <mdio_setPinstatus>
										HLCD_D4_PIN | HLCD_D5_PIN | HLCD_D6_PIN | HLCD_D7_PIN), OUTPUT);
	/*SETTING EN PIN TO HIGH TO READ*/
	mdio_setPinValue(HLCD_CTRL_PORT, HLCD_EN_PIN, HIGH);
    12ac:	82 e0       	ldi	r24, 0x02	; 2
    12ae:	64 e0       	ldi	r22, 0x04	; 4
    12b0:	41 e0       	ldi	r20, 0x01	; 1
    12b2:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
    12b6:	fe 01       	movw	r30, r28
    12b8:	ed 5b       	subi	r30, 0xBD	; 189
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	a8 e4       	ldi	r26, 0x48	; 72
    12c2:	b2 e4       	ldi	r27, 0x42	; 66
    12c4:	80 83       	st	Z, r24
    12c6:	91 83       	std	Z+1, r25	; 0x01
    12c8:	a2 83       	std	Z+2, r26	; 0x02
    12ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12cc:	8e 01       	movw	r16, r28
    12ce:	01 5c       	subi	r16, 0xC1	; 193
    12d0:	1f 4f       	sbci	r17, 0xFF	; 255
    12d2:	fe 01       	movw	r30, r28
    12d4:	ed 5b       	subi	r30, 0xBD	; 189
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	82 81       	ldd	r24, Z+2	; 0x02
    12de:	93 81       	ldd	r25, Z+3	; 0x03
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	4a ef       	ldi	r20, 0xFA	; 250
    12e6:	54 e4       	ldi	r21, 0x44	; 68
    12e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	f8 01       	movw	r30, r16
    12f2:	80 83       	st	Z, r24
    12f4:	91 83       	std	Z+1, r25	; 0x01
    12f6:	a2 83       	std	Z+2, r26	; 0x02
    12f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12fa:	fe 01       	movw	r30, r28
    12fc:	ff 96       	adiw	r30, 0x3f	; 63
    12fe:	60 81       	ld	r22, Z
    1300:	71 81       	ldd	r23, Z+1	; 0x01
    1302:	82 81       	ldd	r24, Z+2	; 0x02
    1304:	93 81       	ldd	r25, Z+3	; 0x03
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e8       	ldi	r20, 0x80	; 128
    130c:	5f e3       	ldi	r21, 0x3F	; 63
    130e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1312:	88 23       	and	r24, r24
    1314:	2c f4       	brge	.+10     	; 0x1320 <hlcd_init+0xa2>
		__ticks = 1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	9e af       	std	Y+62, r25	; 0x3e
    131c:	8d af       	std	Y+61, r24	; 0x3d
    131e:	46 c0       	rjmp	.+140    	; 0x13ac <hlcd_init+0x12e>
	else if (__tmp > 65535)
    1320:	fe 01       	movw	r30, r28
    1322:	ff 96       	adiw	r30, 0x3f	; 63
    1324:	60 81       	ld	r22, Z
    1326:	71 81       	ldd	r23, Z+1	; 0x01
    1328:	82 81       	ldd	r24, Z+2	; 0x02
    132a:	93 81       	ldd	r25, Z+3	; 0x03
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	3f ef       	ldi	r19, 0xFF	; 255
    1330:	4f e7       	ldi	r20, 0x7F	; 127
    1332:	57 e4       	ldi	r21, 0x47	; 71
    1334:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1338:	18 16       	cp	r1, r24
    133a:	64 f5       	brge	.+88     	; 0x1394 <hlcd_init+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133c:	fe 01       	movw	r30, r28
    133e:	ed 5b       	subi	r30, 0xBD	; 189
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	60 81       	ld	r22, Z
    1344:	71 81       	ldd	r23, Z+1	; 0x01
    1346:	82 81       	ldd	r24, Z+2	; 0x02
    1348:	93 81       	ldd	r25, Z+3	; 0x03
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e2       	ldi	r20, 0x20	; 32
    1350:	51 e4       	ldi	r21, 0x41	; 65
    1352:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	bc 01       	movw	r22, r24
    135c:	cd 01       	movw	r24, r26
    135e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	9e af       	std	Y+62, r25	; 0x3e
    1368:	8d af       	std	Y+61, r24	; 0x3d
    136a:	0f c0       	rjmp	.+30     	; 0x138a <hlcd_init+0x10c>
    136c:	88 ec       	ldi	r24, 0xC8	; 200
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	9c af       	std	Y+60, r25	; 0x3c
    1372:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1374:	8b ad       	ldd	r24, Y+59	; 0x3b
    1376:	9c ad       	ldd	r25, Y+60	; 0x3c
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <hlcd_init+0xfa>
    137c:	9c af       	std	Y+60, r25	; 0x3c
    137e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1380:	8d ad       	ldd	r24, Y+61	; 0x3d
    1382:	9e ad       	ldd	r25, Y+62	; 0x3e
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	9e af       	std	Y+62, r25	; 0x3e
    1388:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138a:	8d ad       	ldd	r24, Y+61	; 0x3d
    138c:	9e ad       	ldd	r25, Y+62	; 0x3e
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	69 f7       	brne	.-38     	; 0x136c <hlcd_init+0xee>
    1392:	16 c0       	rjmp	.+44     	; 0x13c0 <hlcd_init+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1394:	fe 01       	movw	r30, r28
    1396:	ff 96       	adiw	r30, 0x3f	; 63
    1398:	60 81       	ld	r22, Z
    139a:	71 81       	ldd	r23, Z+1	; 0x01
    139c:	82 81       	ldd	r24, Z+2	; 0x02
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	9e af       	std	Y+62, r25	; 0x3e
    13aa:	8d af       	std	Y+61, r24	; 0x3d
    13ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    13ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    13b0:	9a af       	std	Y+58, r25	; 0x3a
    13b2:	89 af       	std	Y+57, r24	; 0x39
    13b4:	89 ad       	ldd	r24, Y+57	; 0x39
    13b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <hlcd_init+0x13a>
    13bc:	9a af       	std	Y+58, r25	; 0x3a
    13be:	89 af       	std	Y+57, r24	; 0x39
	/*waiting for vdd to reach 4.5v*/
	_delay_ms(50);
	/*SENDING FUN SET COMNEND*/
	hlcd_sendCmd(0x3C);
    13c0:	8c e3       	ldi	r24, 0x3C	; 60
    13c2:	0e 94 08 08 	call	0x1010	; 0x1010 <hlcd_sendCmd>
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a0 e8       	ldi	r26, 0x80	; 128
    13cc:	bf e3       	ldi	r27, 0x3F	; 63
    13ce:	8d ab       	std	Y+53, r24	; 0x35
    13d0:	9e ab       	std	Y+54, r25	; 0x36
    13d2:	af ab       	std	Y+55, r26	; 0x37
    13d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d6:	6d a9       	ldd	r22, Y+53	; 0x35
    13d8:	7e a9       	ldd	r23, Y+54	; 0x36
    13da:	8f a9       	ldd	r24, Y+55	; 0x37
    13dc:	98 ad       	ldd	r25, Y+56	; 0x38
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	4a ef       	ldi	r20, 0xFA	; 250
    13e4:	54 e4       	ldi	r21, 0x44	; 68
    13e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	89 ab       	std	Y+49, r24	; 0x31
    13f0:	9a ab       	std	Y+50, r25	; 0x32
    13f2:	ab ab       	std	Y+51, r26	; 0x33
    13f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13f6:	69 a9       	ldd	r22, Y+49	; 0x31
    13f8:	7a a9       	ldd	r23, Y+50	; 0x32
    13fa:	8b a9       	ldd	r24, Y+51	; 0x33
    13fc:	9c a9       	ldd	r25, Y+52	; 0x34
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	40 e8       	ldi	r20, 0x80	; 128
    1404:	5f e3       	ldi	r21, 0x3F	; 63
    1406:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    140a:	88 23       	and	r24, r24
    140c:	2c f4       	brge	.+10     	; 0x1418 <hlcd_init+0x19a>
		__ticks = 1;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	98 ab       	std	Y+48, r25	; 0x30
    1414:	8f a7       	std	Y+47, r24	; 0x2f
    1416:	3f c0       	rjmp	.+126    	; 0x1496 <hlcd_init+0x218>
	else if (__tmp > 65535)
    1418:	69 a9       	ldd	r22, Y+49	; 0x31
    141a:	7a a9       	ldd	r23, Y+50	; 0x32
    141c:	8b a9       	ldd	r24, Y+51	; 0x33
    141e:	9c a9       	ldd	r25, Y+52	; 0x34
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	3f ef       	ldi	r19, 0xFF	; 255
    1424:	4f e7       	ldi	r20, 0x7F	; 127
    1426:	57 e4       	ldi	r21, 0x47	; 71
    1428:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    142c:	18 16       	cp	r1, r24
    142e:	4c f5       	brge	.+82     	; 0x1482 <hlcd_init+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1430:	6d a9       	ldd	r22, Y+53	; 0x35
    1432:	7e a9       	ldd	r23, Y+54	; 0x36
    1434:	8f a9       	ldd	r24, Y+55	; 0x37
    1436:	98 ad       	ldd	r25, Y+56	; 0x38
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e2       	ldi	r20, 0x20	; 32
    143e:	51 e4       	ldi	r21, 0x41	; 65
    1440:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	bc 01       	movw	r22, r24
    144a:	cd 01       	movw	r24, r26
    144c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	98 ab       	std	Y+48, r25	; 0x30
    1456:	8f a7       	std	Y+47, r24	; 0x2f
    1458:	0f c0       	rjmp	.+30     	; 0x1478 <hlcd_init+0x1fa>
    145a:	88 ec       	ldi	r24, 0xC8	; 200
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9e a7       	std	Y+46, r25	; 0x2e
    1460:	8d a7       	std	Y+45, r24	; 0x2d
    1462:	8d a5       	ldd	r24, Y+45	; 0x2d
    1464:	9e a5       	ldd	r25, Y+46	; 0x2e
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <hlcd_init+0x1e8>
    146a:	9e a7       	std	Y+46, r25	; 0x2e
    146c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1470:	98 a9       	ldd	r25, Y+48	; 0x30
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	98 ab       	std	Y+48, r25	; 0x30
    1476:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1478:	8f a5       	ldd	r24, Y+47	; 0x2f
    147a:	98 a9       	ldd	r25, Y+48	; 0x30
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	69 f7       	brne	.-38     	; 0x145a <hlcd_init+0x1dc>
    1480:	14 c0       	rjmp	.+40     	; 0x14aa <hlcd_init+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1482:	69 a9       	ldd	r22, Y+49	; 0x31
    1484:	7a a9       	ldd	r23, Y+50	; 0x32
    1486:	8b a9       	ldd	r24, Y+51	; 0x33
    1488:	9c a9       	ldd	r25, Y+52	; 0x34
    148a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	98 ab       	std	Y+48, r25	; 0x30
    1494:	8f a7       	std	Y+47, r24	; 0x2f
    1496:	8f a5       	ldd	r24, Y+47	; 0x2f
    1498:	98 a9       	ldd	r25, Y+48	; 0x30
    149a:	9c a7       	std	Y+44, r25	; 0x2c
    149c:	8b a7       	std	Y+43, r24	; 0x2b
    149e:	8b a5       	ldd	r24, Y+43	; 0x2b
    14a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <hlcd_init+0x224>
    14a6:	9c a7       	std	Y+44, r25	; 0x2c
    14a8:	8b a7       	std	Y+43, r24	; 0x2b
	/*DELAY FOR ONLY 1 ms*/
	_delay_ms(1);
	/*Sending display on/off command*/
	hlcd_sendCmd(0x0F);
    14aa:	8f e0       	ldi	r24, 0x0F	; 15
    14ac:	0e 94 08 08 	call	0x1010	; 0x1010 <hlcd_sendCmd>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a0 e8       	ldi	r26, 0x80	; 128
    14b6:	bf e3       	ldi	r27, 0x3F	; 63
    14b8:	8f a3       	std	Y+39, r24	; 0x27
    14ba:	98 a7       	std	Y+40, r25	; 0x28
    14bc:	a9 a7       	std	Y+41, r26	; 0x29
    14be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c0:	6f a1       	ldd	r22, Y+39	; 0x27
    14c2:	78 a5       	ldd	r23, Y+40	; 0x28
    14c4:	89 a5       	ldd	r24, Y+41	; 0x29
    14c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	4a ef       	ldi	r20, 0xFA	; 250
    14ce:	54 e4       	ldi	r21, 0x44	; 68
    14d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	8b a3       	std	Y+35, r24	; 0x23
    14da:	9c a3       	std	Y+36, r25	; 0x24
    14dc:	ad a3       	std	Y+37, r26	; 0x25
    14de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14e0:	6b a1       	ldd	r22, Y+35	; 0x23
    14e2:	7c a1       	ldd	r23, Y+36	; 0x24
    14e4:	8d a1       	ldd	r24, Y+37	; 0x25
    14e6:	9e a1       	ldd	r25, Y+38	; 0x26
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e8       	ldi	r20, 0x80	; 128
    14ee:	5f e3       	ldi	r21, 0x3F	; 63
    14f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14f4:	88 23       	and	r24, r24
    14f6:	2c f4       	brge	.+10     	; 0x1502 <hlcd_init+0x284>
		__ticks = 1;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	9a a3       	std	Y+34, r25	; 0x22
    14fe:	89 a3       	std	Y+33, r24	; 0x21
    1500:	3f c0       	rjmp	.+126    	; 0x1580 <hlcd_init+0x302>
	else if (__tmp > 65535)
    1502:	6b a1       	ldd	r22, Y+35	; 0x23
    1504:	7c a1       	ldd	r23, Y+36	; 0x24
    1506:	8d a1       	ldd	r24, Y+37	; 0x25
    1508:	9e a1       	ldd	r25, Y+38	; 0x26
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	4f e7       	ldi	r20, 0x7F	; 127
    1510:	57 e4       	ldi	r21, 0x47	; 71
    1512:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1516:	18 16       	cp	r1, r24
    1518:	4c f5       	brge	.+82     	; 0x156c <hlcd_init+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151a:	6f a1       	ldd	r22, Y+39	; 0x27
    151c:	78 a5       	ldd	r23, Y+40	; 0x28
    151e:	89 a5       	ldd	r24, Y+41	; 0x29
    1520:	9a a5       	ldd	r25, Y+42	; 0x2a
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e2       	ldi	r20, 0x20	; 32
    1528:	51 e4       	ldi	r21, 0x41	; 65
    152a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9a a3       	std	Y+34, r25	; 0x22
    1540:	89 a3       	std	Y+33, r24	; 0x21
    1542:	0f c0       	rjmp	.+30     	; 0x1562 <hlcd_init+0x2e4>
    1544:	88 ec       	ldi	r24, 0xC8	; 200
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	98 a3       	std	Y+32, r25	; 0x20
    154a:	8f 8f       	std	Y+31, r24	; 0x1f
    154c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    154e:	98 a1       	ldd	r25, Y+32	; 0x20
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <hlcd_init+0x2d2>
    1554:	98 a3       	std	Y+32, r25	; 0x20
    1556:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1558:	89 a1       	ldd	r24, Y+33	; 0x21
    155a:	9a a1       	ldd	r25, Y+34	; 0x22
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	9a a3       	std	Y+34, r25	; 0x22
    1560:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1562:	89 a1       	ldd	r24, Y+33	; 0x21
    1564:	9a a1       	ldd	r25, Y+34	; 0x22
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	69 f7       	brne	.-38     	; 0x1544 <hlcd_init+0x2c6>
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <hlcd_init+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156c:	6b a1       	ldd	r22, Y+35	; 0x23
    156e:	7c a1       	ldd	r23, Y+36	; 0x24
    1570:	8d a1       	ldd	r24, Y+37	; 0x25
    1572:	9e a1       	ldd	r25, Y+38	; 0x26
    1574:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	9a a3       	std	Y+34, r25	; 0x22
    157e:	89 a3       	std	Y+33, r24	; 0x21
    1580:	89 a1       	ldd	r24, Y+33	; 0x21
    1582:	9a a1       	ldd	r25, Y+34	; 0x22
    1584:	9e 8f       	std	Y+30, r25	; 0x1e
    1586:	8d 8f       	std	Y+29, r24	; 0x1d
    1588:	8d 8d       	ldd	r24, Y+29	; 0x1d
    158a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <hlcd_init+0x30e>
    1590:	9e 8f       	std	Y+30, r25	; 0x1e
    1592:	8d 8f       	std	Y+29, r24	; 0x1d

	/*Delaying for 1ms*/
	_delay_ms(1);

	/*Sending display clear command*/
	hlcd_sendCmd(0x01);
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	0e 94 08 08 	call	0x1010	; 0x1010 <hlcd_sendCmd>
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	a0 e0       	ldi	r26, 0x00	; 0
    15a0:	b0 e4       	ldi	r27, 0x40	; 64
    15a2:	89 8f       	std	Y+25, r24	; 0x19
    15a4:	9a 8f       	std	Y+26, r25	; 0x1a
    15a6:	ab 8f       	std	Y+27, r26	; 0x1b
    15a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15aa:	69 8d       	ldd	r22, Y+25	; 0x19
    15ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	4a ef       	ldi	r20, 0xFA	; 250
    15b8:	54 e4       	ldi	r21, 0x44	; 68
    15ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	8d 8b       	std	Y+21, r24	; 0x15
    15c4:	9e 8b       	std	Y+22, r25	; 0x16
    15c6:	af 8b       	std	Y+23, r26	; 0x17
    15c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15ca:	6d 89       	ldd	r22, Y+21	; 0x15
    15cc:	7e 89       	ldd	r23, Y+22	; 0x16
    15ce:	8f 89       	ldd	r24, Y+23	; 0x17
    15d0:	98 8d       	ldd	r25, Y+24	; 0x18
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e8       	ldi	r20, 0x80	; 128
    15d8:	5f e3       	ldi	r21, 0x3F	; 63
    15da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15de:	88 23       	and	r24, r24
    15e0:	2c f4       	brge	.+10     	; 0x15ec <hlcd_init+0x36e>
		__ticks = 1;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	9c 8b       	std	Y+20, r25	; 0x14
    15e8:	8b 8b       	std	Y+19, r24	; 0x13
    15ea:	3f c0       	rjmp	.+126    	; 0x166a <hlcd_init+0x3ec>
	else if (__tmp > 65535)
    15ec:	6d 89       	ldd	r22, Y+21	; 0x15
    15ee:	7e 89       	ldd	r23, Y+22	; 0x16
    15f0:	8f 89       	ldd	r24, Y+23	; 0x17
    15f2:	98 8d       	ldd	r25, Y+24	; 0x18
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	3f ef       	ldi	r19, 0xFF	; 255
    15f8:	4f e7       	ldi	r20, 0x7F	; 127
    15fa:	57 e4       	ldi	r21, 0x47	; 71
    15fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1600:	18 16       	cp	r1, r24
    1602:	4c f5       	brge	.+82     	; 0x1656 <hlcd_init+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1604:	69 8d       	ldd	r22, Y+25	; 0x19
    1606:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1608:	8b 8d       	ldd	r24, Y+27	; 0x1b
    160a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e2       	ldi	r20, 0x20	; 32
    1612:	51 e4       	ldi	r21, 0x41	; 65
    1614:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	bc 01       	movw	r22, r24
    161e:	cd 01       	movw	r24, r26
    1620:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	9c 8b       	std	Y+20, r25	; 0x14
    162a:	8b 8b       	std	Y+19, r24	; 0x13
    162c:	0f c0       	rjmp	.+30     	; 0x164c <hlcd_init+0x3ce>
    162e:	88 ec       	ldi	r24, 0xC8	; 200
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9a 8b       	std	Y+18, r25	; 0x12
    1634:	89 8b       	std	Y+17, r24	; 0x11
    1636:	89 89       	ldd	r24, Y+17	; 0x11
    1638:	9a 89       	ldd	r25, Y+18	; 0x12
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <hlcd_init+0x3bc>
    163e:	9a 8b       	std	Y+18, r25	; 0x12
    1640:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1642:	8b 89       	ldd	r24, Y+19	; 0x13
    1644:	9c 89       	ldd	r25, Y+20	; 0x14
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	9c 8b       	std	Y+20, r25	; 0x14
    164a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    164c:	8b 89       	ldd	r24, Y+19	; 0x13
    164e:	9c 89       	ldd	r25, Y+20	; 0x14
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	69 f7       	brne	.-38     	; 0x162e <hlcd_init+0x3b0>
    1654:	14 c0       	rjmp	.+40     	; 0x167e <hlcd_init+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1656:	6d 89       	ldd	r22, Y+21	; 0x15
    1658:	7e 89       	ldd	r23, Y+22	; 0x16
    165a:	8f 89       	ldd	r24, Y+23	; 0x17
    165c:	98 8d       	ldd	r25, Y+24	; 0x18
    165e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	9c 8b       	std	Y+20, r25	; 0x14
    1668:	8b 8b       	std	Y+19, r24	; 0x13
    166a:	8b 89       	ldd	r24, Y+19	; 0x13
    166c:	9c 89       	ldd	r25, Y+20	; 0x14
    166e:	98 8b       	std	Y+16, r25	; 0x10
    1670:	8f 87       	std	Y+15, r24	; 0x0f
    1672:	8f 85       	ldd	r24, Y+15	; 0x0f
    1674:	98 89       	ldd	r25, Y+16	; 0x10
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <hlcd_init+0x3f8>
    167a:	98 8b       	std	Y+16, r25	; 0x10
    167c:	8f 87       	std	Y+15, r24	; 0x0f

	/*Delaying for 2ms*/
	_delay_ms(2);

	/*Sending entry mode set command*/
	hlcd_sendCmd(0x06);
    167e:	86 e0       	ldi	r24, 0x06	; 6
    1680:	0e 94 08 08 	call	0x1010	; 0x1010 <hlcd_sendCmd>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	a0 e8       	ldi	r26, 0x80	; 128
    168a:	bf e3       	ldi	r27, 0x3F	; 63
    168c:	8b 87       	std	Y+11, r24	; 0x0b
    168e:	9c 87       	std	Y+12, r25	; 0x0c
    1690:	ad 87       	std	Y+13, r26	; 0x0d
    1692:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1694:	6b 85       	ldd	r22, Y+11	; 0x0b
    1696:	7c 85       	ldd	r23, Y+12	; 0x0c
    1698:	8d 85       	ldd	r24, Y+13	; 0x0d
    169a:	9e 85       	ldd	r25, Y+14	; 0x0e
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	4a ef       	ldi	r20, 0xFA	; 250
    16a2:	54 e4       	ldi	r21, 0x44	; 68
    16a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	8f 83       	std	Y+7, r24	; 0x07
    16ae:	98 87       	std	Y+8, r25	; 0x08
    16b0:	a9 87       	std	Y+9, r26	; 0x09
    16b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b4:	6f 81       	ldd	r22, Y+7	; 0x07
    16b6:	78 85       	ldd	r23, Y+8	; 0x08
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e8       	ldi	r20, 0x80	; 128
    16c2:	5f e3       	ldi	r21, 0x3F	; 63
    16c4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16c8:	88 23       	and	r24, r24
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <hlcd_init+0x458>
		__ticks = 1;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9e 83       	std	Y+6, r25	; 0x06
    16d2:	8d 83       	std	Y+5, r24	; 0x05
    16d4:	3f c0       	rjmp	.+126    	; 0x1754 <hlcd_init+0x4d6>
	else if (__tmp > 65535)
    16d6:	6f 81       	ldd	r22, Y+7	; 0x07
    16d8:	78 85       	ldd	r23, Y+8	; 0x08
    16da:	89 85       	ldd	r24, Y+9	; 0x09
    16dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	3f ef       	ldi	r19, 0xFF	; 255
    16e2:	4f e7       	ldi	r20, 0x7F	; 127
    16e4:	57 e4       	ldi	r21, 0x47	; 71
    16e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16ea:	18 16       	cp	r1, r24
    16ec:	4c f5       	brge	.+82     	; 0x1740 <hlcd_init+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e2       	ldi	r20, 0x20	; 32
    16fc:	51 e4       	ldi	r21, 0x41	; 65
    16fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	9e 83       	std	Y+6, r25	; 0x06
    1714:	8d 83       	std	Y+5, r24	; 0x05
    1716:	0f c0       	rjmp	.+30     	; 0x1736 <hlcd_init+0x4b8>
    1718:	88 ec       	ldi	r24, 0xC8	; 200
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	8b 83       	std	Y+3, r24	; 0x03
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <hlcd_init+0x4a6>
    1728:	9c 83       	std	Y+4, r25	; 0x04
    172a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	9e 81       	ldd	r25, Y+6	; 0x06
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	9e 81       	ldd	r25, Y+6	; 0x06
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	69 f7       	brne	.-38     	; 0x1718 <hlcd_init+0x49a>
    173e:	14 c0       	rjmp	.+40     	; 0x1768 <hlcd_init+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1740:	6f 81       	ldd	r22, Y+7	; 0x07
    1742:	78 85       	ldd	r23, Y+8	; 0x08
    1744:	89 85       	ldd	r24, Y+9	; 0x09
    1746:	9a 85       	ldd	r25, Y+10	; 0x0a
    1748:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	9e 83       	std	Y+6, r25	; 0x06
    1752:	8d 83       	std	Y+5, r24	; 0x05
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	9a 83       	std	Y+2, r25	; 0x02
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <hlcd_init+0x4e2>
    1764:	9a 83       	std	Y+2, r25	; 0x02
    1766:	89 83       	std	Y+1, r24	; 0x01

	/*Delaying for 1ms*/
	_delay_ms(1);
	/*return from this function*/
	return;
}
    1768:	ca 5b       	subi	r28, 0xBA	; 186
    176a:	df 4f       	sbci	r29, 0xFF	; 255
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	08 95       	ret

00001780 <hlcd_displayCharacter>:

void hlcd_displayCharacter(u8_t au8_charData)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	0f 92       	push	r0
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	89 83       	std	Y+1, r24	; 0x01
	/*Sending character data*/
		hlcd_sendData(au8_charData);
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
		while(au8_charData != 0)
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	88 23       	and	r24, r24
    1796:	e9 f7       	brne	.-6      	; 0x1792 <hlcd_displayCharacter+0x12>
		{
			/*do nothing*/
		}
	/*return from this function*/
	return;
}
    1798:	0f 90       	pop	r0
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <hlcd_displayString>:

void hlcd_displayString(u8_t* pu8_stringData)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <hlcd_displayString+0x6>
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	0a c0       	rjmp	.+20     	; 0x17c4 <hlcd_displayString+0x24>
	/*Looping over string characters*/
		while(*pu8_stringData != '\0')
		{
			/*Sending character data*/
			hlcd_sendData(*pu8_stringData);
    17b0:	e9 81       	ldd	r30, Y+1	; 0x01
    17b2:	fa 81       	ldd	r31, Y+2	; 0x02
    17b4:	80 81       	ld	r24, Z
    17b6:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>

			/*Incrementing pointer address*/
			pu8_stringData++;
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	9a 83       	std	Y+2, r25	; 0x02
    17c2:	89 83       	std	Y+1, r24	; 0x01
}

void hlcd_displayString(u8_t* pu8_stringData)
{
	/*Looping over string characters*/
		while(*pu8_stringData != '\0')
    17c4:	e9 81       	ldd	r30, Y+1	; 0x01
    17c6:	fa 81       	ldd	r31, Y+2	; 0x02
    17c8:	80 81       	ld	r24, Z
    17ca:	88 23       	and	r24, r24
    17cc:	89 f7       	brne	.-30     	; 0x17b0 <hlcd_displayString+0x10>
			/*Incrementing pointer address*/
			pu8_stringData++;
		}
	/*return from this function*/
	return;
}
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <hlcd_setCursor>:

void hlcd_setCursor(u8_t  au8_row, u8_t  au8_col)
{
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	00 d0       	rcall	.+0      	; 0x17de <hlcd_setCursor+0x6>
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <hlcd_setCursor+0x8>
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	6a 83       	std	Y+2, r22	; 0x02
	/*switching over LCD rows*/
	switch(au8_row)
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	3c 83       	std	Y+4, r19	; 0x04
    17f0:	2b 83       	std	Y+3, r18	; 0x03
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	31 f0       	breq	.+12     	; 0x1806 <hlcd_setCursor+0x2e>
    17fa:	2b 81       	ldd	r18, Y+3	; 0x03
    17fc:	3c 81       	ldd	r19, Y+4	; 0x04
    17fe:	21 30       	cpi	r18, 0x01	; 1
    1800:	31 05       	cpc	r19, r1
    1802:	31 f0       	breq	.+12     	; 0x1810 <hlcd_setCursor+0x38>
    1804:	09 c0       	rjmp	.+18     	; 0x1818 <hlcd_setCursor+0x40>
	{
	case ROW_0:
		hlcd_sendCmd(((0x80) | au8_col));
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	80 68       	ori	r24, 0x80	; 128
    180a:	0e 94 08 08 	call	0x1010	; 0x1010 <hlcd_sendCmd>
    180e:	04 c0       	rjmp	.+8      	; 0x1818 <hlcd_setCursor+0x40>
		break;
	case ROW_1:
		hlcd_sendCmd(((0xC0) | au8_col));
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	80 6c       	ori	r24, 0xC0	; 192
    1814:	0e 94 08 08 	call	0x1010	; 0x1010 <hlcd_sendCmd>
	default:
		break;
	}
	/*return from this function*/
	return;
}
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <hlcd_creatCustomChar>:

 void hlcd_creatCustomChar(void)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
	/*setting CGRAM Address*/
	hlcd_sendCmd((0x40));
    182e:	80 e4       	ldi	r24, 0x40	; 64
    1830:	0e 94 08 08 	call	0x1010	; 0x1010 <hlcd_sendCmd>
	/*Sending custom charachter to CGRAM*/
	hlcd_sendData((0x00));
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
	hlcd_sendData((0x0A));
    183a:	8a e0       	ldi	r24, 0x0A	; 10
    183c:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
	hlcd_sendData((0x1F));
    1840:	8f e1       	ldi	r24, 0x1F	; 31
    1842:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
	hlcd_sendData((0x1F));
    1846:	8f e1       	ldi	r24, 0x1F	; 31
    1848:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
	hlcd_sendData((0x1F));
    184c:	8f e1       	ldi	r24, 0x1F	; 31
    184e:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
	hlcd_sendData((0x07));
    1852:	87 e0       	ldi	r24, 0x07	; 7
    1854:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
	hlcd_sendData((0x04));
    1858:	84 e0       	ldi	r24, 0x04	; 4
    185a:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
	hlcd_sendData((0x00));
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
	/*setting DDRAM Address*/
	hlcd_sendCmd((0x80));
    1864:	80 e8       	ldi	r24, 0x80	; 128
    1866:	0e 94 08 08 	call	0x1010	; 0x1010 <hlcd_sendCmd>

	/*return from this fun*/
	return;
}
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <hlcd_displayCustomChar>:

void hlcd_displayCustomChar(void)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
	/*sending character data*/
	hlcd_sendData((0x00));
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
	/*return from this fun*/
	return;
}
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <hlcd_creatCustomChar1>:
void hlcd_creatCustomChar1(void)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
	/*setting CGRAM Address*/
		hlcd_sendCmd((0x48));
    188c:	88 e4       	ldi	r24, 0x48	; 72
    188e:	0e 94 08 08 	call	0x1010	; 0x1010 <hlcd_sendCmd>
		/*Sending custom charachter to CGRAM*/
		hlcd_sendData((0x04));
    1892:	84 e0       	ldi	r24, 0x04	; 4
    1894:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
		hlcd_sendData((0x0E));
    1898:	8e e0       	ldi	r24, 0x0E	; 14
    189a:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
		hlcd_sendData((0x0E));
    189e:	8e e0       	ldi	r24, 0x0E	; 14
    18a0:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
		hlcd_sendData((0x0E));
    18a4:	8e e0       	ldi	r24, 0x0E	; 14
    18a6:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
		hlcd_sendData((0x0E));
    18aa:	8e e0       	ldi	r24, 0x0E	; 14
    18ac:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
		hlcd_sendData((0x1F));
    18b0:	8f e1       	ldi	r24, 0x1F	; 31
    18b2:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
		hlcd_sendData((0x04));
    18b6:	84 e0       	ldi	r24, 0x04	; 4
    18b8:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
		hlcd_sendData((0x00));
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
		/*setting DDRAM Address*/
		hlcd_sendCmd((0xC0));
    18c2:	80 ec       	ldi	r24, 0xC0	; 192
    18c4:	0e 94 08 08 	call	0x1010	; 0x1010 <hlcd_sendCmd>
	/*return from this fun*/
	return;
}
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <hlcd_displayCustomChar1>:
void hlcd_displayCustomChar1(void)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
	/*sending character data*/
		hlcd_sendData((0x01));
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	0e 94 d1 06 	call	0xda2	; 0xda2 <hlcd_sendData>
	/*return from this fun*/
	return;
}
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <mdio_setPinstatus>:
#include "MDIO_interface.h"
/******************************************/
/*				FUNCTIONS DIFINITIONS		*/
/*******************************************/
void mdio_setPinstatus(u8_t au8_port, u8_t au8_pin, u8_t au8_status )
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	2d 97       	sbiw	r28, 0x0d	; 13
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	6a 83       	std	Y+2, r22	; 0x02
    18fa:	4b 83       	std	Y+3, r20	; 0x03
	/*switching over DIO port*/
	switch(au8_port)
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	3d 87       	std	Y+13, r19	; 0x0d
    1904:	2c 87       	std	Y+12, r18	; 0x0c
    1906:	8c 85       	ldd	r24, Y+12	; 0x0c
    1908:	9d 85       	ldd	r25, Y+13	; 0x0d
    190a:	82 30       	cpi	r24, 0x02	; 2
    190c:	91 05       	cpc	r25, r1
    190e:	09 f4       	brne	.+2      	; 0x1912 <mdio_setPinstatus+0x30>
    1910:	54 c0       	rjmp	.+168    	; 0x19ba <mdio_setPinstatus+0xd8>
    1912:	2c 85       	ldd	r18, Y+12	; 0x0c
    1914:	3d 85       	ldd	r19, Y+13	; 0x0d
    1916:	23 30       	cpi	r18, 0x03	; 3
    1918:	31 05       	cpc	r19, r1
    191a:	34 f4       	brge	.+12     	; 0x1928 <mdio_setPinstatus+0x46>
    191c:	8c 85       	ldd	r24, Y+12	; 0x0c
    191e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	91 05       	cpc	r25, r1
    1924:	71 f0       	breq	.+28     	; 0x1942 <mdio_setPinstatus+0x60>
    1926:	fb c0       	rjmp	.+502    	; 0x1b1e <mdio_setPinstatus+0x23c>
    1928:	2c 85       	ldd	r18, Y+12	; 0x0c
    192a:	3d 85       	ldd	r19, Y+13	; 0x0d
    192c:	23 30       	cpi	r18, 0x03	; 3
    192e:	31 05       	cpc	r19, r1
    1930:	09 f4       	brne	.+2      	; 0x1934 <mdio_setPinstatus+0x52>
    1932:	7f c0       	rjmp	.+254    	; 0x1a32 <mdio_setPinstatus+0x150>
    1934:	8c 85       	ldd	r24, Y+12	; 0x0c
    1936:	9d 85       	ldd	r25, Y+13	; 0x0d
    1938:	84 30       	cpi	r24, 0x04	; 4
    193a:	91 05       	cpc	r25, r1
    193c:	09 f4       	brne	.+2      	; 0x1940 <mdio_setPinstatus+0x5e>
    193e:	b5 c0       	rjmp	.+362    	; 0x1aaa <mdio_setPinstatus+0x1c8>
    1940:	ee c0       	rjmp	.+476    	; 0x1b1e <mdio_setPinstatus+0x23c>
	{
	/*IN case of choosing port A*/
	case PORTA:
			/*switching over pin status*/
			switch(au8_status)
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	3b 87       	std	Y+11, r19	; 0x0b
    194a:	2a 87       	std	Y+10, r18	; 0x0a
    194c:	8a 85       	ldd	r24, Y+10	; 0x0a
    194e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1950:	82 30       	cpi	r24, 0x02	; 2
    1952:	91 05       	cpc	r25, r1
    1954:	a1 f0       	breq	.+40     	; 0x197e <mdio_setPinstatus+0x9c>
    1956:	2a 85       	ldd	r18, Y+10	; 0x0a
    1958:	3b 85       	ldd	r19, Y+11	; 0x0b
    195a:	23 30       	cpi	r18, 0x03	; 3
    195c:	31 05       	cpc	r19, r1
    195e:	d1 f0       	breq	.+52     	; 0x1994 <mdio_setPinstatus+0xb2>
    1960:	8a 85       	ldd	r24, Y+10	; 0x0a
    1962:	9b 85       	ldd	r25, Y+11	; 0x0b
    1964:	81 30       	cpi	r24, 0x01	; 1
    1966:	91 05       	cpc	r25, r1
    1968:	09 f0       	breq	.+2      	; 0x196c <mdio_setPinstatus+0x8a>
    196a:	d9 c0       	rjmp	.+434    	; 0x1b1e <mdio_setPinstatus+0x23c>
			{
				/*In case of choosing output*/
				case OUTPUT:
					/*Setting specific DIO pins to output*/
					MDIO_DDRA |= au8_pin;
    196c:	aa e3       	ldi	r26, 0x3A	; 58
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ea e3       	ldi	r30, 0x3A	; 58
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	90 81       	ld	r25, Z
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	89 2b       	or	r24, r25
    197a:	8c 93       	st	X, r24
    197c:	d0 c0       	rjmp	.+416    	; 0x1b1e <mdio_setPinstatus+0x23c>
					/*Break from this case*/
					break;
				/*In case of choosing input floating*/
				case INPUT_FLOAT:
					/*Setting specific DIO pins to input floating*/
					MDIO_DDRA &= ~au8_pin;
    197e:	aa e3       	ldi	r26, 0x3A	; 58
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	ea e3       	ldi	r30, 0x3A	; 58
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	98 2f       	mov	r25, r24
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	80 95       	com	r24
    198e:	89 23       	and	r24, r25
    1990:	8c 93       	st	X, r24
    1992:	c5 c0       	rjmp	.+394    	; 0x1b1e <mdio_setPinstatus+0x23c>
					/*Break from this case*/
					break;
				/*In case of choosing input pull-up*/
				case INPUT_PULLUP:
					/*Setting specific DIO pins to input floating*/
					MDIO_DDRA &= ~au8_pin;
    1994:	aa e3       	ldi	r26, 0x3A	; 58
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	ea e3       	ldi	r30, 0x3A	; 58
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	98 2f       	mov	r25, r24
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	80 95       	com	r24
    19a4:	89 23       	and	r24, r25
    19a6:	8c 93       	st	X, r24
					/*Activating specific DIO input pins pull-up resistor*/
					MDIO_PORTA |= au8_pin;
    19a8:	ab e3       	ldi	r26, 0x3B	; 59
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	eb e3       	ldi	r30, 0x3B	; 59
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	90 81       	ld	r25, Z
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	89 2b       	or	r24, r25
    19b6:	8c 93       	st	X, r24
    19b8:	b2 c0       	rjmp	.+356    	; 0x1b1e <mdio_setPinstatus+0x23c>
		break;

	/*IN case of choosing port B*/
	case PORTB:
		/*switching over pin status*/
		switch(au8_status)
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	39 87       	std	Y+9, r19	; 0x09
    19c2:	28 87       	std	Y+8, r18	; 0x08
    19c4:	88 85       	ldd	r24, Y+8	; 0x08
    19c6:	99 85       	ldd	r25, Y+9	; 0x09
    19c8:	82 30       	cpi	r24, 0x02	; 2
    19ca:	91 05       	cpc	r25, r1
    19cc:	a1 f0       	breq	.+40     	; 0x19f6 <mdio_setPinstatus+0x114>
    19ce:	28 85       	ldd	r18, Y+8	; 0x08
    19d0:	39 85       	ldd	r19, Y+9	; 0x09
    19d2:	23 30       	cpi	r18, 0x03	; 3
    19d4:	31 05       	cpc	r19, r1
    19d6:	d1 f0       	breq	.+52     	; 0x1a0c <mdio_setPinstatus+0x12a>
    19d8:	88 85       	ldd	r24, Y+8	; 0x08
    19da:	99 85       	ldd	r25, Y+9	; 0x09
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	91 05       	cpc	r25, r1
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <mdio_setPinstatus+0x102>
    19e2:	9d c0       	rjmp	.+314    	; 0x1b1e <mdio_setPinstatus+0x23c>
		{
			/*In case of choosing output*/
			case OUTPUT:
				/*Setting specific DIO pins to output*/
				MDIO_DDRB |= au8_pin;
    19e4:	a7 e3       	ldi	r26, 0x37	; 55
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e7 e3       	ldi	r30, 0x37	; 55
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	90 81       	ld	r25, Z
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	89 2b       	or	r24, r25
    19f2:	8c 93       	st	X, r24
    19f4:	94 c0       	rjmp	.+296    	; 0x1b1e <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
			/*In case of choosing input floating*/
			case INPUT_FLOAT:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRB &= ~au8_pin;
    19f6:	a7 e3       	ldi	r26, 0x37	; 55
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e7 e3       	ldi	r30, 0x37	; 55
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	98 2f       	mov	r25, r24
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	80 95       	com	r24
    1a06:	89 23       	and	r24, r25
    1a08:	8c 93       	st	X, r24
    1a0a:	89 c0       	rjmp	.+274    	; 0x1b1e <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
			/*In case of choosing input pull-up*/
			case INPUT_PULLUP:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRB &= ~au8_pin;
    1a0c:	a7 e3       	ldi	r26, 0x37	; 55
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e7 e3       	ldi	r30, 0x37	; 55
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	98 2f       	mov	r25, r24
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	80 95       	com	r24
    1a1c:	89 23       	and	r24, r25
    1a1e:	8c 93       	st	X, r24
				/*Activating specific DIO input pins pull-up resistor*/
				MDIO_PORTB |= au8_pin;
    1a20:	a8 e3       	ldi	r26, 0x38	; 56
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e8 e3       	ldi	r30, 0x38	; 56
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	90 81       	ld	r25, Z
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	89 2b       	or	r24, r25
    1a2e:	8c 93       	st	X, r24
    1a30:	76 c0       	rjmp	.+236    	; 0x1b1e <mdio_setPinstatus+0x23c>
		break;

	/*IN case of choosing port C*/
	case PORTC:
		/*switching over pin status*/
		switch(au8_status)
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	3f 83       	std	Y+7, r19	; 0x07
    1a3a:	2e 83       	std	Y+6, r18	; 0x06
    1a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a40:	82 30       	cpi	r24, 0x02	; 2
    1a42:	91 05       	cpc	r25, r1
    1a44:	a1 f0       	breq	.+40     	; 0x1a6e <mdio_setPinstatus+0x18c>
    1a46:	2e 81       	ldd	r18, Y+6	; 0x06
    1a48:	3f 81       	ldd	r19, Y+7	; 0x07
    1a4a:	23 30       	cpi	r18, 0x03	; 3
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	d1 f0       	breq	.+52     	; 0x1a84 <mdio_setPinstatus+0x1a2>
    1a50:	8e 81       	ldd	r24, Y+6	; 0x06
    1a52:	9f 81       	ldd	r25, Y+7	; 0x07
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	91 05       	cpc	r25, r1
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <mdio_setPinstatus+0x17a>
    1a5a:	61 c0       	rjmp	.+194    	; 0x1b1e <mdio_setPinstatus+0x23c>
		{
			/*In case of choosing output*/
			case OUTPUT:
				/*Setting specific DIO pins to output*/
				MDIO_DDRC |= au8_pin;
    1a5c:	a4 e3       	ldi	r26, 0x34	; 52
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e4 e3       	ldi	r30, 0x34	; 52
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	90 81       	ld	r25, Z
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	89 2b       	or	r24, r25
    1a6a:	8c 93       	st	X, r24
    1a6c:	58 c0       	rjmp	.+176    	; 0x1b1e <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
			/*In case of choosing input floating*/
			case INPUT_FLOAT:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRC &= ~au8_pin;
    1a6e:	a4 e3       	ldi	r26, 0x34	; 52
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e4 e3       	ldi	r30, 0x34	; 52
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	98 2f       	mov	r25, r24
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	80 95       	com	r24
    1a7e:	89 23       	and	r24, r25
    1a80:	8c 93       	st	X, r24
    1a82:	4d c0       	rjmp	.+154    	; 0x1b1e <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
				/*In case of choosing input pull-up*/
			case INPUT_PULLUP:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRC &= ~au8_pin;
    1a84:	a4 e3       	ldi	r26, 0x34	; 52
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e4 e3       	ldi	r30, 0x34	; 52
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	98 2f       	mov	r25, r24
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	80 95       	com	r24
    1a94:	89 23       	and	r24, r25
    1a96:	8c 93       	st	X, r24
				/*Activating specific DIO input pins pull-up resistor*/
				MDIO_PORTC |= au8_pin;
    1a98:	a5 e3       	ldi	r26, 0x35	; 53
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e5 e3       	ldi	r30, 0x35	; 53
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	90 81       	ld	r25, Z
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	89 2b       	or	r24, r25
    1aa6:	8c 93       	st	X, r24
    1aa8:	3a c0       	rjmp	.+116    	; 0x1b1e <mdio_setPinstatus+0x23c>
		}
		break;
	/*IN case of choosing port D*/
	case PORTD:
		/*switching over pin status*/
		switch(au8_status)
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	3d 83       	std	Y+5, r19	; 0x05
    1ab2:	2c 83       	std	Y+4, r18	; 0x04
    1ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab8:	82 30       	cpi	r24, 0x02	; 2
    1aba:	91 05       	cpc	r25, r1
    1abc:	99 f0       	breq	.+38     	; 0x1ae4 <mdio_setPinstatus+0x202>
    1abe:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac2:	23 30       	cpi	r18, 0x03	; 3
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	c9 f0       	breq	.+50     	; 0x1afa <mdio_setPinstatus+0x218>
    1ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aca:	9d 81       	ldd	r25, Y+5	; 0x05
    1acc:	81 30       	cpi	r24, 0x01	; 1
    1ace:	91 05       	cpc	r25, r1
    1ad0:	31 f5       	brne	.+76     	; 0x1b1e <mdio_setPinstatus+0x23c>
		{
			/*In case of choosing output*/
			case OUTPUT:
				/*Setting specific DIO pins to output*/
				MDIO_DDRD |= au8_pin;
    1ad2:	a1 e3       	ldi	r26, 0x31	; 49
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e1 e3       	ldi	r30, 0x31	; 49
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	90 81       	ld	r25, Z
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	89 2b       	or	r24, r25
    1ae0:	8c 93       	st	X, r24
    1ae2:	1d c0       	rjmp	.+58     	; 0x1b1e <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
			/*In case of choosing input floating*/
			case INPUT_FLOAT:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRD &= ~au8_pin;
    1ae4:	a1 e3       	ldi	r26, 0x31	; 49
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e1 e3       	ldi	r30, 0x31	; 49
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	98 2f       	mov	r25, r24
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	80 95       	com	r24
    1af4:	89 23       	and	r24, r25
    1af6:	8c 93       	st	X, r24
    1af8:	12 c0       	rjmp	.+36     	; 0x1b1e <mdio_setPinstatus+0x23c>
				/*Break from this case*/
				break;
				/*In case of choosing input pull-up*/
			case INPUT_PULLUP:
				/*Setting specific DIO pins to input floating*/
				MDIO_DDRD &= ~au8_pin;
    1afa:	a1 e3       	ldi	r26, 0x31	; 49
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e1 e3       	ldi	r30, 0x31	; 49
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	98 2f       	mov	r25, r24
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	80 95       	com	r24
    1b0a:	89 23       	and	r24, r25
    1b0c:	8c 93       	st	X, r24
				/*Activating specific DIO input pins pull-up resistor*/
				MDIO_PORTD |= au8_pin;
    1b0e:	a2 e3       	ldi	r26, 0x32	; 50
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e2 e3       	ldi	r30, 0x32	; 50
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	90 81       	ld	r25, Z
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	89 2b       	or	r24, r25
    1b1c:	8c 93       	st	X, r24
		default:
			break;
	}
	/*Return from this function*/
	return;
}
    1b1e:	2d 96       	adiw	r28, 0x0d	; 13
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <mdio_setPinValue>:


void mdio_setPinValue(u8_t au8_port, u8_t au8_pin, u8_t au8_Value )
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	2d 97       	sbiw	r28, 0x0d	; 13
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	6a 83       	std	Y+2, r22	; 0x02
    1b48:	4b 83       	std	Y+3, r20	; 0x03
	/*switching over DIO Ports*/
	switch(au8_port)
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	3d 87       	std	Y+13, r19	; 0x0d
    1b52:	2c 87       	std	Y+12, r18	; 0x0c
    1b54:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b56:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b58:	82 30       	cpi	r24, 0x02	; 2
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	d9 f1       	breq	.+118    	; 0x1bd4 <mdio_setPinValue+0xa4>
    1b5e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b60:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b62:	23 30       	cpi	r18, 0x03	; 3
    1b64:	31 05       	cpc	r19, r1
    1b66:	34 f4       	brge	.+12     	; 0x1b74 <mdio_setPinValue+0x44>
    1b68:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	71 f0       	breq	.+28     	; 0x1b8e <mdio_setPinValue+0x5e>
    1b72:	96 c0       	rjmp	.+300    	; 0x1ca0 <mdio_setPinValue+0x170>
    1b74:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b76:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b78:	23 30       	cpi	r18, 0x03	; 3
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <mdio_setPinValue+0x50>
    1b7e:	4d c0       	rjmp	.+154    	; 0x1c1a <mdio_setPinValue+0xea>
    1b80:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b82:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b84:	84 30       	cpi	r24, 0x04	; 4
    1b86:	91 05       	cpc	r25, r1
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <mdio_setPinValue+0x5c>
    1b8a:	69 c0       	rjmp	.+210    	; 0x1c5e <mdio_setPinValue+0x12e>
    1b8c:	89 c0       	rjmp	.+274    	; 0x1ca0 <mdio_setPinValue+0x170>
	{
	/*IN CASE OF CHOOSING PORT A*/
	case PORTA:
		/*switching over pin value*/
		switch(au8_Value)
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	3b 87       	std	Y+11, r19	; 0x0b
    1b96:	2a 87       	std	Y+10, r18	; 0x0a
    1b98:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	79 f0       	breq	.+30     	; 0x1bbe <mdio_setPinValue+0x8e>
    1ba0:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ba2:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ba4:	21 30       	cpi	r18, 0x01	; 1
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	09 f0       	breq	.+2      	; 0x1bac <mdio_setPinValue+0x7c>
    1baa:	7a c0       	rjmp	.+244    	; 0x1ca0 <mdio_setPinValue+0x170>
		{
		/*in case of choosing high*/
		case HIGH:
			/*setting specific DIO Pins to high */
			MDIO_PORTA |= au8_pin;
    1bac:	ab e3       	ldi	r26, 0x3B	; 59
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	eb e3       	ldi	r30, 0x3B	; 59
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	90 81       	ld	r25, Z
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	89 2b       	or	r24, r25
    1bba:	8c 93       	st	X, r24
    1bbc:	71 c0       	rjmp	.+226    	; 0x1ca0 <mdio_setPinValue+0x170>
			/*break from this case*/
			break;
		/*in case of choosing low*/
		case LOW:
			/*setting specific DIO pin to low*/
			MDIO_PORTA &= ~ au8_pin;
    1bbe:	ab e3       	ldi	r26, 0x3B	; 59
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	eb e3       	ldi	r30, 0x3B	; 59
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	98 2f       	mov	r25, r24
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	80 95       	com	r24
    1bce:	89 23       	and	r24, r25
    1bd0:	8c 93       	st	X, r24
    1bd2:	66 c0       	rjmp	.+204    	; 0x1ca0 <mdio_setPinValue+0x170>
		/*break from this case*/
		break;
	/*IN CASE OF CHOOSING PORT B*/
	case PORTB:
		/*switching over pin value*/
		switch(au8_Value)
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	39 87       	std	Y+9, r19	; 0x09
    1bdc:	28 87       	std	Y+8, r18	; 0x08
    1bde:	88 85       	ldd	r24, Y+8	; 0x08
    1be0:	99 85       	ldd	r25, Y+9	; 0x09
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	79 f0       	breq	.+30     	; 0x1c04 <mdio_setPinValue+0xd4>
    1be6:	28 85       	ldd	r18, Y+8	; 0x08
    1be8:	39 85       	ldd	r19, Y+9	; 0x09
    1bea:	21 30       	cpi	r18, 0x01	; 1
    1bec:	31 05       	cpc	r19, r1
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <mdio_setPinValue+0xc2>
    1bf0:	57 c0       	rjmp	.+174    	; 0x1ca0 <mdio_setPinValue+0x170>
		{
		/*in case of choosing high*/
		case HIGH:
			/*setting specific DIO Pins to high */
			MDIO_PORTB |= au8_pin;
    1bf2:	a8 e3       	ldi	r26, 0x38	; 56
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e8 e3       	ldi	r30, 0x38	; 56
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	90 81       	ld	r25, Z
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	89 2b       	or	r24, r25
    1c00:	8c 93       	st	X, r24
    1c02:	4e c0       	rjmp	.+156    	; 0x1ca0 <mdio_setPinValue+0x170>
			/*break from this case*/
			break;
		/*in case of choosing low*/
		case LOW:
			/*setting specific DIO pin to low*/
			MDIO_PORTB &= ~ au8_pin;
    1c04:	a8 e3       	ldi	r26, 0x38	; 56
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e8 e3       	ldi	r30, 0x38	; 56
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	98 2f       	mov	r25, r24
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	80 95       	com	r24
    1c14:	89 23       	and	r24, r25
    1c16:	8c 93       	st	X, r24
    1c18:	43 c0       	rjmp	.+134    	; 0x1ca0 <mdio_setPinValue+0x170>
		/*break from this case*/
		break;
	/*IN CASE OF CHOOSING PORT C*/
	case PORTC:
		/*switching over pin value*/
		switch(au8_Value)
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	3f 83       	std	Y+7, r19	; 0x07
    1c22:	2e 83       	std	Y+6, r18	; 0x06
    1c24:	8e 81       	ldd	r24, Y+6	; 0x06
    1c26:	9f 81       	ldd	r25, Y+7	; 0x07
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	71 f0       	breq	.+28     	; 0x1c48 <mdio_setPinValue+0x118>
    1c2c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c2e:	3f 81       	ldd	r19, Y+7	; 0x07
    1c30:	21 30       	cpi	r18, 0x01	; 1
    1c32:	31 05       	cpc	r19, r1
    1c34:	a9 f5       	brne	.+106    	; 0x1ca0 <mdio_setPinValue+0x170>
		{
		/*in case of choosing high*/
		case HIGH:
			/*setting specific DIO Pins to high */
			MDIO_PORTC |= au8_pin;
    1c36:	a5 e3       	ldi	r26, 0x35	; 53
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e5 e3       	ldi	r30, 0x35	; 53
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	90 81       	ld	r25, Z
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	89 2b       	or	r24, r25
    1c44:	8c 93       	st	X, r24
    1c46:	2c c0       	rjmp	.+88     	; 0x1ca0 <mdio_setPinValue+0x170>
			/*break from this case*/
			break;
		/*in case of choosing low*/
		case LOW:
			/*setting specific DIO pin to low*/
			MDIO_PORTC &= ~ au8_pin;
    1c48:	a5 e3       	ldi	r26, 0x35	; 53
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e5 e3       	ldi	r30, 0x35	; 53
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	98 2f       	mov	r25, r24
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	80 95       	com	r24
    1c58:	89 23       	and	r24, r25
    1c5a:	8c 93       	st	X, r24
    1c5c:	21 c0       	rjmp	.+66     	; 0x1ca0 <mdio_setPinValue+0x170>
		/*break from this case*/
		break;
	/*IN CASE OF CHOOSING PORT D*/
	case PORTD:
		/*switching over pin value*/
		switch(au8_Value)
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	3d 83       	std	Y+5, r19	; 0x05
    1c66:	2c 83       	std	Y+4, r18	; 0x04
    1c68:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	71 f0       	breq	.+28     	; 0x1c8c <mdio_setPinValue+0x15c>
    1c70:	2c 81       	ldd	r18, Y+4	; 0x04
    1c72:	3d 81       	ldd	r19, Y+5	; 0x05
    1c74:	21 30       	cpi	r18, 0x01	; 1
    1c76:	31 05       	cpc	r19, r1
    1c78:	99 f4       	brne	.+38     	; 0x1ca0 <mdio_setPinValue+0x170>
		{
		/*in case of choosing high*/
		case HIGH:
			/*setting specific DIO Pins to high */
			MDIO_PORTD |= au8_pin;
    1c7a:	a2 e3       	ldi	r26, 0x32	; 50
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e2 e3       	ldi	r30, 0x32	; 50
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	90 81       	ld	r25, Z
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	89 2b       	or	r24, r25
    1c88:	8c 93       	st	X, r24
    1c8a:	0a c0       	rjmp	.+20     	; 0x1ca0 <mdio_setPinValue+0x170>
			/*break from this case*/
			break;
		/*in case of choosing low*/
		case LOW:
			/*setting specific DIO pin to low*/
			MDIO_PORTD &= ~ au8_pin;
    1c8c:	a2 e3       	ldi	r26, 0x32	; 50
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e2 e3       	ldi	r30, 0x32	; 50
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	98 2f       	mov	r25, r24
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	80 95       	com	r24
    1c9c:	89 23       	and	r24, r25
    1c9e:	8c 93       	st	X, r24
		/*break from this case*/
		break;
	}
	/*Return from this function*/
	return;
}
    1ca0:	2d 96       	adiw	r28, 0x0d	; 13
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <mdio_togglePinValue>:


void mdio_togglePinValue(u8_t au8_port, u8_t au8_pin )
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <mdio_togglePinValue+0x6>
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <mdio_togglePinValue+0x8>
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	6a 83       	std	Y+2, r22	; 0x02
	/*switching over DIO PORTS*/
	switch(au8_port)
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	3c 83       	std	Y+4, r19	; 0x04
    1cca:	2b 83       	std	Y+3, r18	; 0x03
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	82 30       	cpi	r24, 0x02	; 2
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	f9 f0       	breq	.+62     	; 0x1d14 <mdio_togglePinValue+0x62>
    1cd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cda:	23 30       	cpi	r18, 0x03	; 3
    1cdc:	31 05       	cpc	r19, r1
    1cde:	34 f4       	brge	.+12     	; 0x1cec <mdio_togglePinValue+0x3a>
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	61 f0       	breq	.+24     	; 0x1d02 <mdio_togglePinValue+0x50>
    1cea:	2e c0       	rjmp	.+92     	; 0x1d48 <mdio_togglePinValue+0x96>
    1cec:	2b 81       	ldd	r18, Y+3	; 0x03
    1cee:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf0:	23 30       	cpi	r18, 0x03	; 3
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	c1 f0       	breq	.+48     	; 0x1d26 <mdio_togglePinValue+0x74>
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	84 30       	cpi	r24, 0x04	; 4
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	e1 f0       	breq	.+56     	; 0x1d38 <mdio_togglePinValue+0x86>
    1d00:	23 c0       	rjmp	.+70     	; 0x1d48 <mdio_togglePinValue+0x96>
	{
	/*in case of choosing PORTA*/
	case PORTA:
		/*toggling specific DIO pin*/
		MDIO_PORTA |= au8_pin;
    1d02:	ab e3       	ldi	r26, 0x3B	; 59
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	eb e3       	ldi	r30, 0x3B	; 59
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	90 81       	ld	r25, Z
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	89 2b       	or	r24, r25
    1d10:	8c 93       	st	X, r24
    1d12:	1a c0       	rjmp	.+52     	; 0x1d48 <mdio_togglePinValue+0x96>
		/*break from this case*/
		break;
	/*in case of choosing PORTB*/
	case PORTB:
		/*toggling specific DIO pin*/
		MDIO_PORTB |= au8_pin;
    1d14:	a8 e3       	ldi	r26, 0x38	; 56
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e8 e3       	ldi	r30, 0x38	; 56
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	90 81       	ld	r25, Z
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	89 2b       	or	r24, r25
    1d22:	8c 93       	st	X, r24
    1d24:	11 c0       	rjmp	.+34     	; 0x1d48 <mdio_togglePinValue+0x96>
		/*break from this case*/
		break;
	/*in case of choosing PORTB*/
	case PORTC:
		/*toggling specific DIO pin*/
		MDIO_PORTC |= au8_pin;
    1d26:	a5 e3       	ldi	r26, 0x35	; 53
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e5 e3       	ldi	r30, 0x35	; 53
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	90 81       	ld	r25, Z
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	89 2b       	or	r24, r25
    1d34:	8c 93       	st	X, r24
    1d36:	08 c0       	rjmp	.+16     	; 0x1d48 <mdio_togglePinValue+0x96>
		/*break from this case*/
		break;
	/*in case of choosing PORTB*/
	case PORTD:
		/*toggling specific DIO pin*/
		MDIO_PORTD |= au8_pin;
    1d38:	a2 e3       	ldi	r26, 0x32	; 50
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e2 e3       	ldi	r30, 0x32	; 50
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	90 81       	ld	r25, Z
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	89 2b       	or	r24, r25
    1d46:	8c 93       	st	X, r24
		/*break from default*/
		break;
	}
	/*Return from this function*/
	return;
}
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <mdio_getPinValue>:


u8_t mdio_getPinValue(u8_t au8_port, u8_t au8_pin )
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <mdio_getPinValue+0x6>
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <mdio_getPinValue+0x8>
    1d5e:	0f 92       	push	r0
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	8a 83       	std	Y+2, r24	; 0x02
    1d66:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable used to get a specific pin value*/
	u8_t au8_pinValue = 0;
    1d68:	19 82       	std	Y+1, r1	; 0x01
	/*switching over DIO ports*/
	switch(au8_port)
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	3d 83       	std	Y+5, r19	; 0x05
    1d72:	2c 83       	std	Y+4, r18	; 0x04
    1d74:	8c 81       	ldd	r24, Y+4	; 0x04
    1d76:	9d 81       	ldd	r25, Y+5	; 0x05
    1d78:	82 30       	cpi	r24, 0x02	; 2
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	11 f1       	breq	.+68     	; 0x1dc2 <mdio_getPinValue+0x6c>
    1d7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d80:	3d 81       	ldd	r19, Y+5	; 0x05
    1d82:	23 30       	cpi	r18, 0x03	; 3
    1d84:	31 05       	cpc	r19, r1
    1d86:	34 f4       	brge	.+12     	; 0x1d94 <mdio_getPinValue+0x3e>
    1d88:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	91 05       	cpc	r25, r1
    1d90:	61 f0       	breq	.+24     	; 0x1daa <mdio_getPinValue+0x54>
    1d92:	3a c0       	rjmp	.+116    	; 0x1e08 <mdio_getPinValue+0xb2>
    1d94:	2c 81       	ldd	r18, Y+4	; 0x04
    1d96:	3d 81       	ldd	r19, Y+5	; 0x05
    1d98:	23 30       	cpi	r18, 0x03	; 3
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	f1 f0       	breq	.+60     	; 0x1dda <mdio_getPinValue+0x84>
    1d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1da0:	9d 81       	ldd	r25, Y+5	; 0x05
    1da2:	84 30       	cpi	r24, 0x04	; 4
    1da4:	91 05       	cpc	r25, r1
    1da6:	29 f1       	breq	.+74     	; 0x1df2 <mdio_getPinValue+0x9c>
    1da8:	2f c0       	rjmp	.+94     	; 0x1e08 <mdio_getPinValue+0xb2>
	{
	/*in case of choosing PORTA*/
	case PORTA:
		/*checking a specific pin value*/
		if(MDIO_PINA & au8_pin)
    1daa:	e9 e3       	ldi	r30, 0x39	; 57
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	90 81       	ld	r25, Z
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	89 23       	and	r24, r25
    1db4:	88 23       	and	r24, r24
    1db6:	19 f0       	breq	.+6      	; 0x1dbe <mdio_getPinValue+0x68>
		{
			/*setting the pin value to high*/
			au8_pinValue = HIGH;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	25 c0       	rjmp	.+74     	; 0x1e08 <mdio_getPinValue+0xb2>
		}
		else
		{
			/*setting the pin value to low*/
			au8_pinValue = LOW;
    1dbe:	19 82       	std	Y+1, r1	; 0x01
    1dc0:	23 c0       	rjmp	.+70     	; 0x1e08 <mdio_getPinValue+0xb2>
		/*break from this case*/
		break;
	/*in case of choosing PORTB*/
	case PORTB:
		/*checking a specific pin value*/
		if(MDIO_PINB & au8_pin)
    1dc2:	e6 e3       	ldi	r30, 0x36	; 54
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	90 81       	ld	r25, Z
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	89 23       	and	r24, r25
    1dcc:	88 23       	and	r24, r24
    1dce:	19 f0       	breq	.+6      	; 0x1dd6 <mdio_getPinValue+0x80>
		{
			/*setting the pin value to high*/
			au8_pinValue = HIGH;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	19 c0       	rjmp	.+50     	; 0x1e08 <mdio_getPinValue+0xb2>
		}
		else
		{
			/*setting the pin value to low*/
			au8_pinValue = LOW;
    1dd6:	19 82       	std	Y+1, r1	; 0x01
    1dd8:	17 c0       	rjmp	.+46     	; 0x1e08 <mdio_getPinValue+0xb2>
		/*break from this case*/
		break;
	/*in case of choosing PORTC*/
	case PORTC:
		/*checking a specific pin value*/
		if(MDIO_PINC & au8_pin)
    1dda:	e3 e3       	ldi	r30, 0x33	; 51
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	90 81       	ld	r25, Z
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	89 23       	and	r24, r25
    1de4:	88 23       	and	r24, r24
    1de6:	19 f0       	breq	.+6      	; 0x1dee <mdio_getPinValue+0x98>
		{
			/*setting the pin value to high*/
			au8_pinValue = HIGH;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	0d c0       	rjmp	.+26     	; 0x1e08 <mdio_getPinValue+0xb2>
		}
		else
		{
			/*setting the pin value to low*/
			au8_pinValue = LOW;
    1dee:	19 82       	std	Y+1, r1	; 0x01
    1df0:	0b c0       	rjmp	.+22     	; 0x1e08 <mdio_getPinValue+0xb2>
		/*break from this case*/
		break;
	/*in case of choosing PORTD*/
	case PORTD:
		/*checking a specific pin value*/
		if(MDIO_PIND & au8_pin)
    1df2:	e0 e3       	ldi	r30, 0x30	; 48
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	90 81       	ld	r25, Z
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	89 23       	and	r24, r25
    1dfc:	88 23       	and	r24, r24
    1dfe:	19 f0       	breq	.+6      	; 0x1e06 <mdio_getPinValue+0xb0>
		{
			/*setting the pin value to high*/
			au8_pinValue = HIGH;
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	01 c0       	rjmp	.+2      	; 0x1e08 <mdio_getPinValue+0xb2>
		}
		else
		{
			/*setting the pin value to low*/
			au8_pinValue = LOW;
    1e06:	19 82       	std	Y+1, r1	; 0x01
	default:
		/*break from default*/
		break;
	}
	/*Return from this function*/
	return au8_pinValue ;
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <main>:

/************************************************************************************************/
/*                                           mian programe                                           */
/************************************************************************************************/
int main(void)
{
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <main+0x6>
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <main+0x8>
    1e22:	0f 92       	push	r0
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
	u8_t x =0;
    1e28:	1a 82       	std	Y+2, r1	; 0x02
	u8_t au8_numStep = 0;
    1e2a:	19 82       	std	Y+1, r1	; 0x01
	u8_t z = 0;
    1e2c:	1b 82       	std	Y+3, r1	; 0x03

	init();
    1e2e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <init>
	hlcd_init();
    1e32:	0e 94 3f 09 	call	0x127e	; 0x127e <hlcd_init>
	hkpd_init();
    1e36:	0e 94 47 06 	call	0xc8e	; 0xc8e <hkpd_init>

	hlcd_setCursor(ROW_0 , COL_0);
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <hlcd_setCursor>
	hlcd_displayString("ENTER NUM");
    1e42:	80 e6       	ldi	r24, 0x60	; 96
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <hlcd_displayString>

	hlcd_setCursor(ROW_1 , COL_0);
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <hlcd_setCursor>
	while(1)
	{
		hkpd_getPressKey(&z);
    1e52:	ce 01       	movw	r24, r28
    1e54:	03 96       	adiw	r24, 0x03	; 3
    1e56:	0e 94 5d 06 	call	0xcba	; 0xcba <hkpd_getPressKey>
		switch(z)
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	3d 83       	std	Y+5, r19	; 0x05
    1e62:	2c 83       	std	Y+4, r18	; 0x04
    1e64:	8c 81       	ldd	r24, Y+4	; 0x04
    1e66:	9d 81       	ldd	r25, Y+5	; 0x05
    1e68:	83 32       	cpi	r24, 0x23	; 35
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	d1 f0       	breq	.+52     	; 0x1ea2 <main+0x88>
    1e6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e70:	3d 81       	ldd	r19, Y+5	; 0x05
    1e72:	2a 32       	cpi	r18, 0x2A	; 42
    1e74:	31 05       	cpc	r19, r1
    1e76:	29 f0       	breq	.+10     	; 0x1e82 <main+0x68>
    1e78:	ec cf       	rjmp	.-40     	; 0x1e52 <main+0x38>
		case '*':

			/*looping to stop keypad looping*/
			while(!x)
			{
				hkpd_getPressKey(&x);
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	02 96       	adiw	r24, 0x02	; 2
    1e7e:	0e 94 5d 06 	call	0xcba	; 0xcba <hkpd_getPressKey>
		switch(z)
		{
		case '*':

			/*looping to stop keypad looping*/
			while(!x)
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	88 23       	and	r24, r24
    1e86:	c9 f3       	breq	.-14     	; 0x1e7a <main+0x60>
			{
				hkpd_getPressKey(&x);
			}
			/*start routating x times  in forward diraction */
			on_forward(x - 48);
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	80 53       	subi	r24, 0x30	; 48
    1e8c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <on_forward>
			/*display num of routating*/
			hlcd_displayCharacter(x);
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	0e 94 c0 0b 	call	0x1780	; 0x1780 <hlcd_displayCharacter>
			/*back x to 0 to start again*/
			x = 0;
    1e96:	1a 82       	std	Y+2, r1	; 0x02
    1e98:	dc cf       	rjmp	.-72     	; 0x1e52 <main+0x38>
		case '#':

			/*looping to stop keypad looping*/
			while(!x)
			{
				hkpd_getPressKey(&x);
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	02 96       	adiw	r24, 0x02	; 2
    1e9e:	0e 94 5d 06 	call	0xcba	; 0xcba <hkpd_getPressKey>
			x = 0;
			break;
		case '#':

			/*looping to stop keypad looping*/
			while(!x)
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	88 23       	and	r24, r24
    1ea6:	c9 f3       	breq	.-14     	; 0x1e9a <main+0x80>
			{
				hkpd_getPressKey(&x);
			}
			/*start routating x times  in forward diraction */
			ON_BACKWARD(x - 48);
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	80 53       	subi	r24, 0x30	; 48
    1eac:	0e 94 a0 11 	call	0x2340	; 0x2340 <ON_BACKWARD>
			/*display num of routating*/
			hlcd_displayCharacter(x);
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	0e 94 c0 0b 	call	0x1780	; 0x1780 <hlcd_displayCharacter>
			/*back x to 0 to start again*/
			x = 0;
    1eb6:	1a 82       	std	Y+2, r1	; 0x02
    1eb8:	cc cf       	rjmp	.-104    	; 0x1e52 <main+0x38>

00001eba <init>:
}
/************************************************************************************************/
/*                                           fun difintions                                           */
/************************************************************************************************/
void init(void)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
	mdio_setPinstatus(PORTC, (PIN0 | PIN1 | PIN2 | PIN3), OUTPUT);
    1ec2:	83 e0       	ldi	r24, 0x03	; 3
    1ec4:	6f e0       	ldi	r22, 0x0F	; 15
    1ec6:	41 e0       	ldi	r20, 0x01	; 1
    1ec8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <mdio_setPinstatus>

	return;
}
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <on_forward>:

void on_forward(u8_t au8_num)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	ea 97       	sbiw	r28, 0x3a	; 58
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	8a af       	std	Y+58, r24	; 0x3a
	u8_t x = 0;
    1ee8:	19 ae       	std	Y+57, r1	; 0x39

	for(x=0; x < au8_num; x++)
    1eea:	19 ae       	std	Y+57, r1	; 0x39
    1eec:	1b c2       	rjmp	.+1078   	; 0x2324 <on_forward+0x452>
	{
	mdio_setPinValue(PORTC,PIN0,HIGH);
    1eee:	83 e0       	ldi	r24, 0x03	; 3
    1ef0:	61 e0       	ldi	r22, 0x01	; 1
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN1,LOW);
    1ef8:	83 e0       	ldi	r24, 0x03	; 3
    1efa:	62 e0       	ldi	r22, 0x02	; 2
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN2,LOW);
    1f02:	83 e0       	ldi	r24, 0x03	; 3
    1f04:	64 e0       	ldi	r22, 0x04	; 4
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN3,LOW);
    1f0c:	83 e0       	ldi	r24, 0x03	; 3
    1f0e:	68 e0       	ldi	r22, 0x08	; 8
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	a8 e4       	ldi	r26, 0x48	; 72
    1f1c:	b3 e4       	ldi	r27, 0x43	; 67
    1f1e:	8d ab       	std	Y+53, r24	; 0x35
    1f20:	9e ab       	std	Y+54, r25	; 0x36
    1f22:	af ab       	std	Y+55, r26	; 0x37
    1f24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f26:	6d a9       	ldd	r22, Y+53	; 0x35
    1f28:	7e a9       	ldd	r23, Y+54	; 0x36
    1f2a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f2c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	4a ef       	ldi	r20, 0xFA	; 250
    1f34:	54 e4       	ldi	r21, 0x44	; 68
    1f36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	89 ab       	std	Y+49, r24	; 0x31
    1f40:	9a ab       	std	Y+50, r25	; 0x32
    1f42:	ab ab       	std	Y+51, r26	; 0x33
    1f44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f46:	69 a9       	ldd	r22, Y+49	; 0x31
    1f48:	7a a9       	ldd	r23, Y+50	; 0x32
    1f4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e8       	ldi	r20, 0x80	; 128
    1f54:	5f e3       	ldi	r21, 0x3F	; 63
    1f56:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f5a:	88 23       	and	r24, r24
    1f5c:	2c f4       	brge	.+10     	; 0x1f68 <on_forward+0x96>
		__ticks = 1;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	98 ab       	std	Y+48, r25	; 0x30
    1f64:	8f a7       	std	Y+47, r24	; 0x2f
    1f66:	3f c0       	rjmp	.+126    	; 0x1fe6 <on_forward+0x114>
	else if (__tmp > 65535)
    1f68:	69 a9       	ldd	r22, Y+49	; 0x31
    1f6a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f6c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f6e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	3f ef       	ldi	r19, 0xFF	; 255
    1f74:	4f e7       	ldi	r20, 0x7F	; 127
    1f76:	57 e4       	ldi	r21, 0x47	; 71
    1f78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f7c:	18 16       	cp	r1, r24
    1f7e:	4c f5       	brge	.+82     	; 0x1fd2 <on_forward+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f80:	6d a9       	ldd	r22, Y+53	; 0x35
    1f82:	7e a9       	ldd	r23, Y+54	; 0x36
    1f84:	8f a9       	ldd	r24, Y+55	; 0x37
    1f86:	98 ad       	ldd	r25, Y+56	; 0x38
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e2       	ldi	r20, 0x20	; 32
    1f8e:	51 e4       	ldi	r21, 0x41	; 65
    1f90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	98 ab       	std	Y+48, r25	; 0x30
    1fa6:	8f a7       	std	Y+47, r24	; 0x2f
    1fa8:	0f c0       	rjmp	.+30     	; 0x1fc8 <on_forward+0xf6>
    1faa:	88 ec       	ldi	r24, 0xC8	; 200
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9e a7       	std	Y+46, r25	; 0x2e
    1fb0:	8d a7       	std	Y+45, r24	; 0x2d
    1fb2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fb4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <on_forward+0xe4>
    1fba:	9e a7       	std	Y+46, r25	; 0x2e
    1fbc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	98 ab       	std	Y+48, r25	; 0x30
    1fc6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fca:	98 a9       	ldd	r25, Y+48	; 0x30
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	69 f7       	brne	.-38     	; 0x1faa <on_forward+0xd8>
    1fd0:	14 c0       	rjmp	.+40     	; 0x1ffa <on_forward+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fd4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fd6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd8:	9c a9       	ldd	r25, Y+52	; 0x34
    1fda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	98 ab       	std	Y+48, r25	; 0x30
    1fe4:	8f a7       	std	Y+47, r24	; 0x2f
    1fe6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fea:	9c a7       	std	Y+44, r25	; 0x2c
    1fec:	8b a7       	std	Y+43, r24	; 0x2b
    1fee:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ff0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <on_forward+0x120>
    1ff6:	9c a7       	std	Y+44, r25	; 0x2c
    1ff8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);
	mdio_setPinValue(PORTC,PIN0,LOW);
    1ffa:	83 e0       	ldi	r24, 0x03	; 3
    1ffc:	61 e0       	ldi	r22, 0x01	; 1
    1ffe:	40 e0       	ldi	r20, 0x00	; 0
    2000:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN1,HIGH);
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	62 e0       	ldi	r22, 0x02	; 2
    2008:	41 e0       	ldi	r20, 0x01	; 1
    200a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN2,LOW);
    200e:	83 e0       	ldi	r24, 0x03	; 3
    2010:	64 e0       	ldi	r22, 0x04	; 4
    2012:	40 e0       	ldi	r20, 0x00	; 0
    2014:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN3,LOW);
    2018:	83 e0       	ldi	r24, 0x03	; 3
    201a:	68 e0       	ldi	r22, 0x08	; 8
    201c:	40 e0       	ldi	r20, 0x00	; 0
    201e:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a8 e4       	ldi	r26, 0x48	; 72
    2028:	b3 e4       	ldi	r27, 0x43	; 67
    202a:	8f a3       	std	Y+39, r24	; 0x27
    202c:	98 a7       	std	Y+40, r25	; 0x28
    202e:	a9 a7       	std	Y+41, r26	; 0x29
    2030:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2032:	6f a1       	ldd	r22, Y+39	; 0x27
    2034:	78 a5       	ldd	r23, Y+40	; 0x28
    2036:	89 a5       	ldd	r24, Y+41	; 0x29
    2038:	9a a5       	ldd	r25, Y+42	; 0x2a
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4a ef       	ldi	r20, 0xFA	; 250
    2040:	54 e4       	ldi	r21, 0x44	; 68
    2042:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	8b a3       	std	Y+35, r24	; 0x23
    204c:	9c a3       	std	Y+36, r25	; 0x24
    204e:	ad a3       	std	Y+37, r26	; 0x25
    2050:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2052:	6b a1       	ldd	r22, Y+35	; 0x23
    2054:	7c a1       	ldd	r23, Y+36	; 0x24
    2056:	8d a1       	ldd	r24, Y+37	; 0x25
    2058:	9e a1       	ldd	r25, Y+38	; 0x26
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e8       	ldi	r20, 0x80	; 128
    2060:	5f e3       	ldi	r21, 0x3F	; 63
    2062:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2066:	88 23       	and	r24, r24
    2068:	2c f4       	brge	.+10     	; 0x2074 <on_forward+0x1a2>
		__ticks = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9a a3       	std	Y+34, r25	; 0x22
    2070:	89 a3       	std	Y+33, r24	; 0x21
    2072:	3f c0       	rjmp	.+126    	; 0x20f2 <on_forward+0x220>
	else if (__tmp > 65535)
    2074:	6b a1       	ldd	r22, Y+35	; 0x23
    2076:	7c a1       	ldd	r23, Y+36	; 0x24
    2078:	8d a1       	ldd	r24, Y+37	; 0x25
    207a:	9e a1       	ldd	r25, Y+38	; 0x26
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	3f ef       	ldi	r19, 0xFF	; 255
    2080:	4f e7       	ldi	r20, 0x7F	; 127
    2082:	57 e4       	ldi	r21, 0x47	; 71
    2084:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2088:	18 16       	cp	r1, r24
    208a:	4c f5       	brge	.+82     	; 0x20de <on_forward+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208c:	6f a1       	ldd	r22, Y+39	; 0x27
    208e:	78 a5       	ldd	r23, Y+40	; 0x28
    2090:	89 a5       	ldd	r24, Y+41	; 0x29
    2092:	9a a5       	ldd	r25, Y+42	; 0x2a
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e2       	ldi	r20, 0x20	; 32
    209a:	51 e4       	ldi	r21, 0x41	; 65
    209c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9a a3       	std	Y+34, r25	; 0x22
    20b2:	89 a3       	std	Y+33, r24	; 0x21
    20b4:	0f c0       	rjmp	.+30     	; 0x20d4 <on_forward+0x202>
    20b6:	88 ec       	ldi	r24, 0xC8	; 200
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	98 a3       	std	Y+32, r25	; 0x20
    20bc:	8f 8f       	std	Y+31, r24	; 0x1f
    20be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20c0:	98 a1       	ldd	r25, Y+32	; 0x20
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <on_forward+0x1f0>
    20c6:	98 a3       	std	Y+32, r25	; 0x20
    20c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ca:	89 a1       	ldd	r24, Y+33	; 0x21
    20cc:	9a a1       	ldd	r25, Y+34	; 0x22
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	9a a3       	std	Y+34, r25	; 0x22
    20d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	89 a1       	ldd	r24, Y+33	; 0x21
    20d6:	9a a1       	ldd	r25, Y+34	; 0x22
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	69 f7       	brne	.-38     	; 0x20b6 <on_forward+0x1e4>
    20dc:	14 c0       	rjmp	.+40     	; 0x2106 <on_forward+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20de:	6b a1       	ldd	r22, Y+35	; 0x23
    20e0:	7c a1       	ldd	r23, Y+36	; 0x24
    20e2:	8d a1       	ldd	r24, Y+37	; 0x25
    20e4:	9e a1       	ldd	r25, Y+38	; 0x26
    20e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9a a3       	std	Y+34, r25	; 0x22
    20f0:	89 a3       	std	Y+33, r24	; 0x21
    20f2:	89 a1       	ldd	r24, Y+33	; 0x21
    20f4:	9a a1       	ldd	r25, Y+34	; 0x22
    20f6:	9e 8f       	std	Y+30, r25	; 0x1e
    20f8:	8d 8f       	std	Y+29, r24	; 0x1d
    20fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <on_forward+0x22c>
    2102:	9e 8f       	std	Y+30, r25	; 0x1e
    2104:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	mdio_setPinValue(PORTC,PIN0,LOW);
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	61 e0       	ldi	r22, 0x01	; 1
    210a:	40 e0       	ldi	r20, 0x00	; 0
    210c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN1,LOW);
    2110:	83 e0       	ldi	r24, 0x03	; 3
    2112:	62 e0       	ldi	r22, 0x02	; 2
    2114:	40 e0       	ldi	r20, 0x00	; 0
    2116:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN2,HIGH);
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	64 e0       	ldi	r22, 0x04	; 4
    211e:	41 e0       	ldi	r20, 0x01	; 1
    2120:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN3,LOW);
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	68 e0       	ldi	r22, 0x08	; 8
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a8 e4       	ldi	r26, 0x48	; 72
    2134:	b3 e4       	ldi	r27, 0x43	; 67
    2136:	89 8f       	std	Y+25, r24	; 0x19
    2138:	9a 8f       	std	Y+26, r25	; 0x1a
    213a:	ab 8f       	std	Y+27, r26	; 0x1b
    213c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	69 8d       	ldd	r22, Y+25	; 0x19
    2140:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2142:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2144:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a ef       	ldi	r20, 0xFA	; 250
    214c:	54 e4       	ldi	r21, 0x44	; 68
    214e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	8d 8b       	std	Y+21, r24	; 0x15
    2158:	9e 8b       	std	Y+22, r25	; 0x16
    215a:	af 8b       	std	Y+23, r26	; 0x17
    215c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    215e:	6d 89       	ldd	r22, Y+21	; 0x15
    2160:	7e 89       	ldd	r23, Y+22	; 0x16
    2162:	8f 89       	ldd	r24, Y+23	; 0x17
    2164:	98 8d       	ldd	r25, Y+24	; 0x18
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2172:	88 23       	and	r24, r24
    2174:	2c f4       	brge	.+10     	; 0x2180 <on_forward+0x2ae>
		__ticks = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9c 8b       	std	Y+20, r25	; 0x14
    217c:	8b 8b       	std	Y+19, r24	; 0x13
    217e:	3f c0       	rjmp	.+126    	; 0x21fe <on_forward+0x32c>
	else if (__tmp > 65535)
    2180:	6d 89       	ldd	r22, Y+21	; 0x15
    2182:	7e 89       	ldd	r23, Y+22	; 0x16
    2184:	8f 89       	ldd	r24, Y+23	; 0x17
    2186:	98 8d       	ldd	r25, Y+24	; 0x18
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	4c f5       	brge	.+82     	; 0x21ea <on_forward+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	69 8d       	ldd	r22, Y+25	; 0x19
    219a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9c 8b       	std	Y+20, r25	; 0x14
    21be:	8b 8b       	std	Y+19, r24	; 0x13
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <on_forward+0x30e>
    21c2:	88 ec       	ldi	r24, 0xC8	; 200
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9a 8b       	std	Y+18, r25	; 0x12
    21c8:	89 8b       	std	Y+17, r24	; 0x11
    21ca:	89 89       	ldd	r24, Y+17	; 0x11
    21cc:	9a 89       	ldd	r25, Y+18	; 0x12
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <on_forward+0x2fc>
    21d2:	9a 8b       	std	Y+18, r25	; 0x12
    21d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8b 89       	ldd	r24, Y+19	; 0x13
    21d8:	9c 89       	ldd	r25, Y+20	; 0x14
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	9c 8b       	std	Y+20, r25	; 0x14
    21de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8b 89       	ldd	r24, Y+19	; 0x13
    21e2:	9c 89       	ldd	r25, Y+20	; 0x14
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f7       	brne	.-38     	; 0x21c2 <on_forward+0x2f0>
    21e8:	14 c0       	rjmp	.+40     	; 0x2212 <on_forward+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	6d 89       	ldd	r22, Y+21	; 0x15
    21ec:	7e 89       	ldd	r23, Y+22	; 0x16
    21ee:	8f 89       	ldd	r24, Y+23	; 0x17
    21f0:	98 8d       	ldd	r25, Y+24	; 0x18
    21f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9c 8b       	std	Y+20, r25	; 0x14
    21fc:	8b 8b       	std	Y+19, r24	; 0x13
    21fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2200:	9c 89       	ldd	r25, Y+20	; 0x14
    2202:	98 8b       	std	Y+16, r25	; 0x10
    2204:	8f 87       	std	Y+15, r24	; 0x0f
    2206:	8f 85       	ldd	r24, Y+15	; 0x0f
    2208:	98 89       	ldd	r25, Y+16	; 0x10
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <on_forward+0x338>
    220e:	98 8b       	std	Y+16, r25	; 0x10
    2210:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	mdio_setPinValue(PORTC,PIN0,LOW);
    2212:	83 e0       	ldi	r24, 0x03	; 3
    2214:	61 e0       	ldi	r22, 0x01	; 1
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN1,LOW);
    221c:	83 e0       	ldi	r24, 0x03	; 3
    221e:	62 e0       	ldi	r22, 0x02	; 2
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN2,LOW);
    2226:	83 e0       	ldi	r24, 0x03	; 3
    2228:	64 e0       	ldi	r22, 0x04	; 4
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN3,HIGH);
    2230:	83 e0       	ldi	r24, 0x03	; 3
    2232:	68 e0       	ldi	r22, 0x08	; 8
    2234:	41 e0       	ldi	r20, 0x01	; 1
    2236:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	a8 e4       	ldi	r26, 0x48	; 72
    2240:	b3 e4       	ldi	r27, 0x43	; 67
    2242:	8b 87       	std	Y+11, r24	; 0x0b
    2244:	9c 87       	std	Y+12, r25	; 0x0c
    2246:	ad 87       	std	Y+13, r26	; 0x0d
    2248:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224a:	6b 85       	ldd	r22, Y+11	; 0x0b
    224c:	7c 85       	ldd	r23, Y+12	; 0x0c
    224e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2250:	9e 85       	ldd	r25, Y+14	; 0x0e
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	4a ef       	ldi	r20, 0xFA	; 250
    2258:	54 e4       	ldi	r21, 0x44	; 68
    225a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	8f 83       	std	Y+7, r24	; 0x07
    2264:	98 87       	std	Y+8, r25	; 0x08
    2266:	a9 87       	std	Y+9, r26	; 0x09
    2268:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    226a:	6f 81       	ldd	r22, Y+7	; 0x07
    226c:	78 85       	ldd	r23, Y+8	; 0x08
    226e:	89 85       	ldd	r24, Y+9	; 0x09
    2270:	9a 85       	ldd	r25, Y+10	; 0x0a
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e8       	ldi	r20, 0x80	; 128
    2278:	5f e3       	ldi	r21, 0x3F	; 63
    227a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    227e:	88 23       	and	r24, r24
    2280:	2c f4       	brge	.+10     	; 0x228c <on_forward+0x3ba>
		__ticks = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9e 83       	std	Y+6, r25	; 0x06
    2288:	8d 83       	std	Y+5, r24	; 0x05
    228a:	3f c0       	rjmp	.+126    	; 0x230a <on_forward+0x438>
	else if (__tmp > 65535)
    228c:	6f 81       	ldd	r22, Y+7	; 0x07
    228e:	78 85       	ldd	r23, Y+8	; 0x08
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	9a 85       	ldd	r25, Y+10	; 0x0a
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	3f ef       	ldi	r19, 0xFF	; 255
    2298:	4f e7       	ldi	r20, 0x7F	; 127
    229a:	57 e4       	ldi	r21, 0x47	; 71
    229c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22a0:	18 16       	cp	r1, r24
    22a2:	4c f5       	brge	.+82     	; 0x22f6 <on_forward+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e2       	ldi	r20, 0x20	; 32
    22b2:	51 e4       	ldi	r21, 0x41	; 65
    22b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	bc 01       	movw	r22, r24
    22be:	cd 01       	movw	r24, r26
    22c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	9e 83       	std	Y+6, r25	; 0x06
    22ca:	8d 83       	std	Y+5, r24	; 0x05
    22cc:	0f c0       	rjmp	.+30     	; 0x22ec <on_forward+0x41a>
    22ce:	88 ec       	ldi	r24, 0xC8	; 200
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9c 83       	std	Y+4, r25	; 0x04
    22d4:	8b 83       	std	Y+3, r24	; 0x03
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	9c 81       	ldd	r25, Y+4	; 0x04
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <on_forward+0x408>
    22de:	9c 83       	std	Y+4, r25	; 0x04
    22e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	9e 81       	ldd	r25, Y+6	; 0x06
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	69 f7       	brne	.-38     	; 0x22ce <on_forward+0x3fc>
    22f4:	14 c0       	rjmp	.+40     	; 0x231e <on_forward+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f6:	6f 81       	ldd	r22, Y+7	; 0x07
    22f8:	78 85       	ldd	r23, Y+8	; 0x08
    22fa:	89 85       	ldd	r24, Y+9	; 0x09
    22fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9e 83       	std	Y+6, r25	; 0x06
    2308:	8d 83       	std	Y+5, r24	; 0x05
    230a:	8d 81       	ldd	r24, Y+5	; 0x05
    230c:	9e 81       	ldd	r25, Y+6	; 0x06
    230e:	9a 83       	std	Y+2, r25	; 0x02
    2310:	89 83       	std	Y+1, r24	; 0x01
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <on_forward+0x444>
    231a:	9a 83       	std	Y+2, r25	; 0x02
    231c:	89 83       	std	Y+1, r24	; 0x01

void on_forward(u8_t au8_num)
{
	u8_t x = 0;

	for(x=0; x < au8_num; x++)
    231e:	89 ad       	ldd	r24, Y+57	; 0x39
    2320:	8f 5f       	subi	r24, 0xFF	; 255
    2322:	89 af       	std	Y+57, r24	; 0x39
    2324:	99 ad       	ldd	r25, Y+57	; 0x39
    2326:	8a ad       	ldd	r24, Y+58	; 0x3a
    2328:	98 17       	cp	r25, r24
    232a:	08 f4       	brcc	.+2      	; 0x232e <on_forward+0x45c>
    232c:	e0 cd       	rjmp	.-1088   	; 0x1eee <on_forward+0x1c>
	_delay_ms(200);


	}
	return;
}
    232e:	ea 96       	adiw	r28, 0x3a	; 58
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <ON_BACKWARD>:

void ON_BACKWARD(u8_t au8_num1)
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	ea 97       	sbiw	r28, 0x3a	; 58
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	8a af       	std	Y+58, r24	; 0x3a
	u8_t x = 0;
    2356:	19 ae       	std	Y+57, r1	; 0x39

	for(x=0; x < au8_num1; x++)
    2358:	19 ae       	std	Y+57, r1	; 0x39
    235a:	1b c2       	rjmp	.+1078   	; 0x2792 <ON_BACKWARD+0x452>
	{
	mdio_setPinValue(PORTC,PIN0,LOW);
    235c:	83 e0       	ldi	r24, 0x03	; 3
    235e:	61 e0       	ldi	r22, 0x01	; 1
    2360:	40 e0       	ldi	r20, 0x00	; 0
    2362:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN1,LOW);
    2366:	83 e0       	ldi	r24, 0x03	; 3
    2368:	62 e0       	ldi	r22, 0x02	; 2
    236a:	40 e0       	ldi	r20, 0x00	; 0
    236c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN2,LOW);
    2370:	83 e0       	ldi	r24, 0x03	; 3
    2372:	64 e0       	ldi	r22, 0x04	; 4
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN3,HIGH);
    237a:	83 e0       	ldi	r24, 0x03	; 3
    237c:	68 e0       	ldi	r22, 0x08	; 8
    237e:	41 e0       	ldi	r20, 0x01	; 1
    2380:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	a8 e4       	ldi	r26, 0x48	; 72
    238a:	b3 e4       	ldi	r27, 0x43	; 67
    238c:	8d ab       	std	Y+53, r24	; 0x35
    238e:	9e ab       	std	Y+54, r25	; 0x36
    2390:	af ab       	std	Y+55, r26	; 0x37
    2392:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2394:	6d a9       	ldd	r22, Y+53	; 0x35
    2396:	7e a9       	ldd	r23, Y+54	; 0x36
    2398:	8f a9       	ldd	r24, Y+55	; 0x37
    239a:	98 ad       	ldd	r25, Y+56	; 0x38
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	4a ef       	ldi	r20, 0xFA	; 250
    23a2:	54 e4       	ldi	r21, 0x44	; 68
    23a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	89 ab       	std	Y+49, r24	; 0x31
    23ae:	9a ab       	std	Y+50, r25	; 0x32
    23b0:	ab ab       	std	Y+51, r26	; 0x33
    23b2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23b4:	69 a9       	ldd	r22, Y+49	; 0x31
    23b6:	7a a9       	ldd	r23, Y+50	; 0x32
    23b8:	8b a9       	ldd	r24, Y+51	; 0x33
    23ba:	9c a9       	ldd	r25, Y+52	; 0x34
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	2c f4       	brge	.+10     	; 0x23d6 <ON_BACKWARD+0x96>
		__ticks = 1;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	98 ab       	std	Y+48, r25	; 0x30
    23d2:	8f a7       	std	Y+47, r24	; 0x2f
    23d4:	3f c0       	rjmp	.+126    	; 0x2454 <ON_BACKWARD+0x114>
	else if (__tmp > 65535)
    23d6:	69 a9       	ldd	r22, Y+49	; 0x31
    23d8:	7a a9       	ldd	r23, Y+50	; 0x32
    23da:	8b a9       	ldd	r24, Y+51	; 0x33
    23dc:	9c a9       	ldd	r25, Y+52	; 0x34
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	3f ef       	ldi	r19, 0xFF	; 255
    23e2:	4f e7       	ldi	r20, 0x7F	; 127
    23e4:	57 e4       	ldi	r21, 0x47	; 71
    23e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23ea:	18 16       	cp	r1, r24
    23ec:	4c f5       	brge	.+82     	; 0x2440 <ON_BACKWARD+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ee:	6d a9       	ldd	r22, Y+53	; 0x35
    23f0:	7e a9       	ldd	r23, Y+54	; 0x36
    23f2:	8f a9       	ldd	r24, Y+55	; 0x37
    23f4:	98 ad       	ldd	r25, Y+56	; 0x38
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e2       	ldi	r20, 0x20	; 32
    23fc:	51 e4       	ldi	r21, 0x41	; 65
    23fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	98 ab       	std	Y+48, r25	; 0x30
    2414:	8f a7       	std	Y+47, r24	; 0x2f
    2416:	0f c0       	rjmp	.+30     	; 0x2436 <ON_BACKWARD+0xf6>
    2418:	88 ec       	ldi	r24, 0xC8	; 200
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9e a7       	std	Y+46, r25	; 0x2e
    241e:	8d a7       	std	Y+45, r24	; 0x2d
    2420:	8d a5       	ldd	r24, Y+45	; 0x2d
    2422:	9e a5       	ldd	r25, Y+46	; 0x2e
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <ON_BACKWARD+0xe4>
    2428:	9e a7       	std	Y+46, r25	; 0x2e
    242a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242c:	8f a5       	ldd	r24, Y+47	; 0x2f
    242e:	98 a9       	ldd	r25, Y+48	; 0x30
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	98 ab       	std	Y+48, r25	; 0x30
    2434:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2436:	8f a5       	ldd	r24, Y+47	; 0x2f
    2438:	98 a9       	ldd	r25, Y+48	; 0x30
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	69 f7       	brne	.-38     	; 0x2418 <ON_BACKWARD+0xd8>
    243e:	14 c0       	rjmp	.+40     	; 0x2468 <ON_BACKWARD+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2440:	69 a9       	ldd	r22, Y+49	; 0x31
    2442:	7a a9       	ldd	r23, Y+50	; 0x32
    2444:	8b a9       	ldd	r24, Y+51	; 0x33
    2446:	9c a9       	ldd	r25, Y+52	; 0x34
    2448:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	98 ab       	std	Y+48, r25	; 0x30
    2452:	8f a7       	std	Y+47, r24	; 0x2f
    2454:	8f a5       	ldd	r24, Y+47	; 0x2f
    2456:	98 a9       	ldd	r25, Y+48	; 0x30
    2458:	9c a7       	std	Y+44, r25	; 0x2c
    245a:	8b a7       	std	Y+43, r24	; 0x2b
    245c:	8b a5       	ldd	r24, Y+43	; 0x2b
    245e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <ON_BACKWARD+0x120>
    2464:	9c a7       	std	Y+44, r25	; 0x2c
    2466:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);
	mdio_setPinValue(PORTC,PIN0,LOW);
    2468:	83 e0       	ldi	r24, 0x03	; 3
    246a:	61 e0       	ldi	r22, 0x01	; 1
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN1,LOW);
    2472:	83 e0       	ldi	r24, 0x03	; 3
    2474:	62 e0       	ldi	r22, 0x02	; 2
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN2,HIGH);
    247c:	83 e0       	ldi	r24, 0x03	; 3
    247e:	64 e0       	ldi	r22, 0x04	; 4
    2480:	41 e0       	ldi	r20, 0x01	; 1
    2482:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN3,LOW);
    2486:	83 e0       	ldi	r24, 0x03	; 3
    2488:	68 e0       	ldi	r22, 0x08	; 8
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a8 e4       	ldi	r26, 0x48	; 72
    2496:	b3 e4       	ldi	r27, 0x43	; 67
    2498:	8f a3       	std	Y+39, r24	; 0x27
    249a:	98 a7       	std	Y+40, r25	; 0x28
    249c:	a9 a7       	std	Y+41, r26	; 0x29
    249e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	6f a1       	ldd	r22, Y+39	; 0x27
    24a2:	78 a5       	ldd	r23, Y+40	; 0x28
    24a4:	89 a5       	ldd	r24, Y+41	; 0x29
    24a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	4a ef       	ldi	r20, 0xFA	; 250
    24ae:	54 e4       	ldi	r21, 0x44	; 68
    24b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	8b a3       	std	Y+35, r24	; 0x23
    24ba:	9c a3       	std	Y+36, r25	; 0x24
    24bc:	ad a3       	std	Y+37, r26	; 0x25
    24be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24c0:	6b a1       	ldd	r22, Y+35	; 0x23
    24c2:	7c a1       	ldd	r23, Y+36	; 0x24
    24c4:	8d a1       	ldd	r24, Y+37	; 0x25
    24c6:	9e a1       	ldd	r25, Y+38	; 0x26
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e8       	ldi	r20, 0x80	; 128
    24ce:	5f e3       	ldi	r21, 0x3F	; 63
    24d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <ON_BACKWARD+0x1a2>
		__ticks = 1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9a a3       	std	Y+34, r25	; 0x22
    24de:	89 a3       	std	Y+33, r24	; 0x21
    24e0:	3f c0       	rjmp	.+126    	; 0x2560 <ON_BACKWARD+0x220>
	else if (__tmp > 65535)
    24e2:	6b a1       	ldd	r22, Y+35	; 0x23
    24e4:	7c a1       	ldd	r23, Y+36	; 0x24
    24e6:	8d a1       	ldd	r24, Y+37	; 0x25
    24e8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	4c f5       	brge	.+82     	; 0x254c <ON_BACKWARD+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fa:	6f a1       	ldd	r22, Y+39	; 0x27
    24fc:	78 a5       	ldd	r23, Y+40	; 0x28
    24fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2500:	9a a5       	ldd	r25, Y+42	; 0x2a
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e2       	ldi	r20, 0x20	; 32
    2508:	51 e4       	ldi	r21, 0x41	; 65
    250a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9a a3       	std	Y+34, r25	; 0x22
    2520:	89 a3       	std	Y+33, r24	; 0x21
    2522:	0f c0       	rjmp	.+30     	; 0x2542 <ON_BACKWARD+0x202>
    2524:	88 ec       	ldi	r24, 0xC8	; 200
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	98 a3       	std	Y+32, r25	; 0x20
    252a:	8f 8f       	std	Y+31, r24	; 0x1f
    252c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    252e:	98 a1       	ldd	r25, Y+32	; 0x20
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <ON_BACKWARD+0x1f0>
    2534:	98 a3       	std	Y+32, r25	; 0x20
    2536:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2538:	89 a1       	ldd	r24, Y+33	; 0x21
    253a:	9a a1       	ldd	r25, Y+34	; 0x22
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	9a a3       	std	Y+34, r25	; 0x22
    2540:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	89 a1       	ldd	r24, Y+33	; 0x21
    2544:	9a a1       	ldd	r25, Y+34	; 0x22
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	69 f7       	brne	.-38     	; 0x2524 <ON_BACKWARD+0x1e4>
    254a:	14 c0       	rjmp	.+40     	; 0x2574 <ON_BACKWARD+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254c:	6b a1       	ldd	r22, Y+35	; 0x23
    254e:	7c a1       	ldd	r23, Y+36	; 0x24
    2550:	8d a1       	ldd	r24, Y+37	; 0x25
    2552:	9e a1       	ldd	r25, Y+38	; 0x26
    2554:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9a a3       	std	Y+34, r25	; 0x22
    255e:	89 a3       	std	Y+33, r24	; 0x21
    2560:	89 a1       	ldd	r24, Y+33	; 0x21
    2562:	9a a1       	ldd	r25, Y+34	; 0x22
    2564:	9e 8f       	std	Y+30, r25	; 0x1e
    2566:	8d 8f       	std	Y+29, r24	; 0x1d
    2568:	8d 8d       	ldd	r24, Y+29	; 0x1d
    256a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <ON_BACKWARD+0x22c>
    2570:	9e 8f       	std	Y+30, r25	; 0x1e
    2572:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	mdio_setPinValue(PORTC,PIN0,LOW);
    2574:	83 e0       	ldi	r24, 0x03	; 3
    2576:	61 e0       	ldi	r22, 0x01	; 1
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN1,HIGH);
    257e:	83 e0       	ldi	r24, 0x03	; 3
    2580:	62 e0       	ldi	r22, 0x02	; 2
    2582:	41 e0       	ldi	r20, 0x01	; 1
    2584:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN2,LOW);
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	64 e0       	ldi	r22, 0x04	; 4
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN3,LOW);
    2592:	83 e0       	ldi	r24, 0x03	; 3
    2594:	68 e0       	ldi	r22, 0x08	; 8
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	a8 e4       	ldi	r26, 0x48	; 72
    25a2:	b3 e4       	ldi	r27, 0x43	; 67
    25a4:	89 8f       	std	Y+25, r24	; 0x19
    25a6:	9a 8f       	std	Y+26, r25	; 0x1a
    25a8:	ab 8f       	std	Y+27, r26	; 0x1b
    25aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ac:	69 8d       	ldd	r22, Y+25	; 0x19
    25ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	4a ef       	ldi	r20, 0xFA	; 250
    25ba:	54 e4       	ldi	r21, 0x44	; 68
    25bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	8d 8b       	std	Y+21, r24	; 0x15
    25c6:	9e 8b       	std	Y+22, r25	; 0x16
    25c8:	af 8b       	std	Y+23, r26	; 0x17
    25ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25cc:	6d 89       	ldd	r22, Y+21	; 0x15
    25ce:	7e 89       	ldd	r23, Y+22	; 0x16
    25d0:	8f 89       	ldd	r24, Y+23	; 0x17
    25d2:	98 8d       	ldd	r25, Y+24	; 0x18
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e8       	ldi	r20, 0x80	; 128
    25da:	5f e3       	ldi	r21, 0x3F	; 63
    25dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25e0:	88 23       	and	r24, r24
    25e2:	2c f4       	brge	.+10     	; 0x25ee <ON_BACKWARD+0x2ae>
		__ticks = 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	9c 8b       	std	Y+20, r25	; 0x14
    25ea:	8b 8b       	std	Y+19, r24	; 0x13
    25ec:	3f c0       	rjmp	.+126    	; 0x266c <ON_BACKWARD+0x32c>
	else if (__tmp > 65535)
    25ee:	6d 89       	ldd	r22, Y+21	; 0x15
    25f0:	7e 89       	ldd	r23, Y+22	; 0x16
    25f2:	8f 89       	ldd	r24, Y+23	; 0x17
    25f4:	98 8d       	ldd	r25, Y+24	; 0x18
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	3f ef       	ldi	r19, 0xFF	; 255
    25fa:	4f e7       	ldi	r20, 0x7F	; 127
    25fc:	57 e4       	ldi	r21, 0x47	; 71
    25fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2602:	18 16       	cp	r1, r24
    2604:	4c f5       	brge	.+82     	; 0x2658 <ON_BACKWARD+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2606:	69 8d       	ldd	r22, Y+25	; 0x19
    2608:	7a 8d       	ldd	r23, Y+26	; 0x1a
    260a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    260c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e2       	ldi	r20, 0x20	; 32
    2614:	51 e4       	ldi	r21, 0x41	; 65
    2616:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	9c 8b       	std	Y+20, r25	; 0x14
    262c:	8b 8b       	std	Y+19, r24	; 0x13
    262e:	0f c0       	rjmp	.+30     	; 0x264e <ON_BACKWARD+0x30e>
    2630:	88 ec       	ldi	r24, 0xC8	; 200
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	9a 8b       	std	Y+18, r25	; 0x12
    2636:	89 8b       	std	Y+17, r24	; 0x11
    2638:	89 89       	ldd	r24, Y+17	; 0x11
    263a:	9a 89       	ldd	r25, Y+18	; 0x12
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <ON_BACKWARD+0x2fc>
    2640:	9a 8b       	std	Y+18, r25	; 0x12
    2642:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2644:	8b 89       	ldd	r24, Y+19	; 0x13
    2646:	9c 89       	ldd	r25, Y+20	; 0x14
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	9c 8b       	std	Y+20, r25	; 0x14
    264c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264e:	8b 89       	ldd	r24, Y+19	; 0x13
    2650:	9c 89       	ldd	r25, Y+20	; 0x14
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	69 f7       	brne	.-38     	; 0x2630 <ON_BACKWARD+0x2f0>
    2656:	14 c0       	rjmp	.+40     	; 0x2680 <ON_BACKWARD+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2658:	6d 89       	ldd	r22, Y+21	; 0x15
    265a:	7e 89       	ldd	r23, Y+22	; 0x16
    265c:	8f 89       	ldd	r24, Y+23	; 0x17
    265e:	98 8d       	ldd	r25, Y+24	; 0x18
    2660:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	9c 8b       	std	Y+20, r25	; 0x14
    266a:	8b 8b       	std	Y+19, r24	; 0x13
    266c:	8b 89       	ldd	r24, Y+19	; 0x13
    266e:	9c 89       	ldd	r25, Y+20	; 0x14
    2670:	98 8b       	std	Y+16, r25	; 0x10
    2672:	8f 87       	std	Y+15, r24	; 0x0f
    2674:	8f 85       	ldd	r24, Y+15	; 0x0f
    2676:	98 89       	ldd	r25, Y+16	; 0x10
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <ON_BACKWARD+0x338>
    267c:	98 8b       	std	Y+16, r25	; 0x10
    267e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	mdio_setPinValue(PORTC,PIN0,HIGH);
    2680:	83 e0       	ldi	r24, 0x03	; 3
    2682:	61 e0       	ldi	r22, 0x01	; 1
    2684:	41 e0       	ldi	r20, 0x01	; 1
    2686:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN1,LOW);
    268a:	83 e0       	ldi	r24, 0x03	; 3
    268c:	62 e0       	ldi	r22, 0x02	; 2
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN2,LOW);
    2694:	83 e0       	ldi	r24, 0x03	; 3
    2696:	64 e0       	ldi	r22, 0x04	; 4
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
	mdio_setPinValue(PORTC,PIN3,LOW);
    269e:	83 e0       	ldi	r24, 0x03	; 3
    26a0:	68 e0       	ldi	r22, 0x08	; 8
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <mdio_setPinValue>
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	a8 e4       	ldi	r26, 0x48	; 72
    26ae:	b3 e4       	ldi	r27, 0x43	; 67
    26b0:	8b 87       	std	Y+11, r24	; 0x0b
    26b2:	9c 87       	std	Y+12, r25	; 0x0c
    26b4:	ad 87       	std	Y+13, r26	; 0x0d
    26b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    26bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26be:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	4a ef       	ldi	r20, 0xFA	; 250
    26c6:	54 e4       	ldi	r21, 0x44	; 68
    26c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	8f 83       	std	Y+7, r24	; 0x07
    26d2:	98 87       	std	Y+8, r25	; 0x08
    26d4:	a9 87       	std	Y+9, r26	; 0x09
    26d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26d8:	6f 81       	ldd	r22, Y+7	; 0x07
    26da:	78 85       	ldd	r23, Y+8	; 0x08
    26dc:	89 85       	ldd	r24, Y+9	; 0x09
    26de:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e8       	ldi	r20, 0x80	; 128
    26e6:	5f e3       	ldi	r21, 0x3F	; 63
    26e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26ec:	88 23       	and	r24, r24
    26ee:	2c f4       	brge	.+10     	; 0x26fa <ON_BACKWARD+0x3ba>
		__ticks = 1;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	9e 83       	std	Y+6, r25	; 0x06
    26f6:	8d 83       	std	Y+5, r24	; 0x05
    26f8:	3f c0       	rjmp	.+126    	; 0x2778 <ON_BACKWARD+0x438>
	else if (__tmp > 65535)
    26fa:	6f 81       	ldd	r22, Y+7	; 0x07
    26fc:	78 85       	ldd	r23, Y+8	; 0x08
    26fe:	89 85       	ldd	r24, Y+9	; 0x09
    2700:	9a 85       	ldd	r25, Y+10	; 0x0a
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	3f ef       	ldi	r19, 0xFF	; 255
    2706:	4f e7       	ldi	r20, 0x7F	; 127
    2708:	57 e4       	ldi	r21, 0x47	; 71
    270a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    270e:	18 16       	cp	r1, r24
    2710:	4c f5       	brge	.+82     	; 0x2764 <ON_BACKWARD+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2712:	6b 85       	ldd	r22, Y+11	; 0x0b
    2714:	7c 85       	ldd	r23, Y+12	; 0x0c
    2716:	8d 85       	ldd	r24, Y+13	; 0x0d
    2718:	9e 85       	ldd	r25, Y+14	; 0x0e
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e2       	ldi	r20, 0x20	; 32
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9e 83       	std	Y+6, r25	; 0x06
    2738:	8d 83       	std	Y+5, r24	; 0x05
    273a:	0f c0       	rjmp	.+30     	; 0x275a <ON_BACKWARD+0x41a>
    273c:	88 ec       	ldi	r24, 0xC8	; 200
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9c 83       	std	Y+4, r25	; 0x04
    2742:	8b 83       	std	Y+3, r24	; 0x03
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	9c 81       	ldd	r25, Y+4	; 0x04
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <ON_BACKWARD+0x408>
    274c:	9c 83       	std	Y+4, r25	; 0x04
    274e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2750:	8d 81       	ldd	r24, Y+5	; 0x05
    2752:	9e 81       	ldd	r25, Y+6	; 0x06
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	9e 83       	std	Y+6, r25	; 0x06
    2758:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275a:	8d 81       	ldd	r24, Y+5	; 0x05
    275c:	9e 81       	ldd	r25, Y+6	; 0x06
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	69 f7       	brne	.-38     	; 0x273c <ON_BACKWARD+0x3fc>
    2762:	14 c0       	rjmp	.+40     	; 0x278c <ON_BACKWARD+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2764:	6f 81       	ldd	r22, Y+7	; 0x07
    2766:	78 85       	ldd	r23, Y+8	; 0x08
    2768:	89 85       	ldd	r24, Y+9	; 0x09
    276a:	9a 85       	ldd	r25, Y+10	; 0x0a
    276c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	9e 83       	std	Y+6, r25	; 0x06
    2776:	8d 83       	std	Y+5, r24	; 0x05
    2778:	8d 81       	ldd	r24, Y+5	; 0x05
    277a:	9e 81       	ldd	r25, Y+6	; 0x06
    277c:	9a 83       	std	Y+2, r25	; 0x02
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	9a 81       	ldd	r25, Y+2	; 0x02
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <ON_BACKWARD+0x444>
    2788:	9a 83       	std	Y+2, r25	; 0x02
    278a:	89 83       	std	Y+1, r24	; 0x01

void ON_BACKWARD(u8_t au8_num1)
{
	u8_t x = 0;

	for(x=0; x < au8_num1; x++)
    278c:	89 ad       	ldd	r24, Y+57	; 0x39
    278e:	8f 5f       	subi	r24, 0xFF	; 255
    2790:	89 af       	std	Y+57, r24	; 0x39
    2792:	99 ad       	ldd	r25, Y+57	; 0x39
    2794:	8a ad       	ldd	r24, Y+58	; 0x3a
    2796:	98 17       	cp	r25, r24
    2798:	08 f4       	brcc	.+2      	; 0x279c <ON_BACKWARD+0x45c>
    279a:	e0 cd       	rjmp	.-1088   	; 0x235c <ON_BACKWARD+0x1c>
	mdio_setPinValue(PORTC,PIN3,LOW);
	_delay_ms(200);
	}
	return;

}
    279c:	ea 96       	adiw	r28, 0x3a	; 58
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	08 95       	ret

000027ae <__prologue_saves__>:
    27ae:	2f 92       	push	r2
    27b0:	3f 92       	push	r3
    27b2:	4f 92       	push	r4
    27b4:	5f 92       	push	r5
    27b6:	6f 92       	push	r6
    27b8:	7f 92       	push	r7
    27ba:	8f 92       	push	r8
    27bc:	9f 92       	push	r9
    27be:	af 92       	push	r10
    27c0:	bf 92       	push	r11
    27c2:	cf 92       	push	r12
    27c4:	df 92       	push	r13
    27c6:	ef 92       	push	r14
    27c8:	ff 92       	push	r15
    27ca:	0f 93       	push	r16
    27cc:	1f 93       	push	r17
    27ce:	cf 93       	push	r28
    27d0:	df 93       	push	r29
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	ca 1b       	sub	r28, r26
    27d8:	db 0b       	sbc	r29, r27
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	09 94       	ijmp

000027e6 <__epilogue_restores__>:
    27e6:	2a 88       	ldd	r2, Y+18	; 0x12
    27e8:	39 88       	ldd	r3, Y+17	; 0x11
    27ea:	48 88       	ldd	r4, Y+16	; 0x10
    27ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    27ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    27f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    27f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    27f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    27f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    27f8:	b9 84       	ldd	r11, Y+9	; 0x09
    27fa:	c8 84       	ldd	r12, Y+8	; 0x08
    27fc:	df 80       	ldd	r13, Y+7	; 0x07
    27fe:	ee 80       	ldd	r14, Y+6	; 0x06
    2800:	fd 80       	ldd	r15, Y+5	; 0x05
    2802:	0c 81       	ldd	r16, Y+4	; 0x04
    2804:	1b 81       	ldd	r17, Y+3	; 0x03
    2806:	aa 81       	ldd	r26, Y+2	; 0x02
    2808:	b9 81       	ldd	r27, Y+1	; 0x01
    280a:	ce 0f       	add	r28, r30
    280c:	d1 1d       	adc	r29, r1
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	f8 94       	cli
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	ed 01       	movw	r28, r26
    281a:	08 95       	ret

0000281c <_exit>:
    281c:	f8 94       	cli

0000281e <__stop_program>:
    281e:	ff cf       	rjmp	.-2      	; 0x281e <__stop_program>
